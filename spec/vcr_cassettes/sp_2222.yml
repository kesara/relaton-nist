---
http_interactions:
- request:
    method: get
    uri: https://csrc.nist.gov/publications/search?keywords-lg=SP%202222&sortBy-lg=relevence&status-lg=Final,Withdrawn
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Frame-Options:
      - DENY
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy:
      - frame-ancestors 'self'
      Date:
      - Fri, 14 May 2021 16:48:20 GMT
      Content-Length:
      - '184269'
      Strict-Transport-Security:
      - max-age=31536000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en-us" xml:lang="en-us">
<head>
    <meta charset="utf-8" />
    <title>Search | CSRC</title>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <meta http-equiv="content-style-type" content="text/css" />
    <meta http-equiv="content-script-type" content="text/javascript" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="msapplication-config" content="/CSRC/Media/images/favicons/browserconfig.xml" />
    <meta name="theme-color" content="#000000" />
    <meta name="google-site-verification" content="xbrnrVYDgLD-Bd64xHLCt4XsPXzUhQ-4lGMj4TdUUTA" />
    

    <link rel="apple-touch-icon" sizes="180x180" href="/images/icons/apple-touch-icon.png" />
    <link rel="icon" type="image/png" href="/images/icons/favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="/images/icons/favicon-16x16.png" sizes="16x16" />
    <link rel="manifest" href="/images/icons/manifest.json" />
    <link rel="mask-icon" href="/images/icons/safari-pinned-tab.svg" color="#000000" />
    <link href="/CSRC/Media/images/favicons/favicon.ico" type="image/x-icon" rel="shortcut icon"/>
    <link href="/CSRC/Media/images/favicons/favicon.ico" type="image/x-icon" rel="icon"/>
    
    <link href="/dist/app.css" rel="stylesheet">
    

    <script async type="text/javascript" id="_fed_an_ua_tag" src="https://dap.digitalgov.gov/Universal-Federated-Analytics-Min.js?agency=nist&subagency=csrc&pua=UA-66610693-15&yt=true&exts=xsd,xml,wav,mpg,mpeg,avi,rtf,webm,ogg,ogv,oga,map,otf,eot,svg,ttf,woff"></script>
    <style id="antiClickjack">
        body { display: none !important; }
    </style>
    <script type="text/javascript" id="antiClickjackScript">
        if (self === top) { var antiClickjack = document.getElementById("antiClickjack"); antiClickjack.parentNode.removeChild(antiClickjack);
        } else { top.location = self.location; }
    </script>
</head>
<body>
    <div id="antiClickjack" style="display: none">
        <h1>You are viewing this page in an unauthorized frame window.</h1>
        <p>This is a potential security issue, you are being redirected to <a href="https://csrc.nist.gov">https://csrc.nist.gov</a></p>
    </div>

    <section class="usa-banner" aria-label="Official government website">
        <div class="usa-accordion container">
            <header class="usa-banner__header">
                <img class="usa-banner__header-flag" src="/images/usbanner/us_flag_small.png" alt="U.S. flag">
                &nbsp;
                <span class="usa-banner__header-text">An official website of the United States government</span>

                <button class="usa-accordion__button usa-banner__button" data-toggle="collapse" data-target="#gov-banner" aria-expanded="false" aria-controls="gov-banner">
                    <span class="usa-banner__button-text">Here's how you know</span>
                </button>
            </header>
            <div class="usa-banner__content usa-accordion__content collapse" role="tabpanel" id="gov-banner" aria-expanded="false">
                <div class="row">
                    <div class="col-md-5 col-sm-12">
                        <div class="row">
                            <div class="col-sm-2 col-xs-3">
                                <img class="usa-banner__icon usa-media-block__img" src="/images/usbanner/icon-dot-gov.svg" alt="Dot gov">
                            </div>
                            <div class="col-sm-10 col-xs-9">
                                <p>
                                    <strong>Official websites use .gov</strong>
                                    <br>
                                    A <strong>.gov</strong> website belongs to an official government organization in the United States.
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5 col-sm-12">
                        <div class="row">
                            <div class="col-sm-2 col-xs-3">
                                <img class="usa-banner__icon usa-media-block__img" src="/images/usbanner/icon-https.svg" alt="Https">
                            </div>
                            <div class="col-sm-10 col-xs-9">
                            <p>
                                <strong>Secure .gov websites use HTTPS</strong>
                                <br>
                                A <strong>lock</strong> (<img class="usa-banner__lock" src="/images/usbanner/lock.svg" alt="Dot gov">) or <strong>https://</strong> means you've safely connected to the .gov website. Share sensitive information only on official, secure websites.
                            </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <nav id="navbar" class="navbar">
        <div id="nist-menu-container" class="container">
            <div class="row">
                <!-- Brand -->
                <div class="col-xs-6 col-md-4 navbar-header">
                    <a class="navbar-brand" href="https://www.nist.gov" target="_blank" id="navbar-brand-image">
                        <img src="/CSRC/media/images/svg/nist-logo.svg" alt="National Institute of Standards and Technology" width="110" height="30">
                    </a>
                </div>
                <div class="col-xs-6 col-md-8 navbar-nist-logo">
                    <div class="form-inline hidden-sm hidden-xs">
                        <form name="site-search" id="site-search-form" action="/search" method="GET">
                            <label for="search-csrc-query" class="element-invisible">Search</label>
                            <input autocomplete="off" class="form-control" id="search-csrc-query" name="keywords" type="text" size="15" maxlength="128" placeholder="Search CSRC" />
                            <input type="hidden" name="ipp" value="25" />
                            <input type="hidden" name="sortBy" value="relevance" />
                            <input type="hidden" name="showOnly" value="publications,projects,news,events,presentations,glossary,topics" />
                            <input type="hidden" name="topicsMatch" value="ANY" />
                            <input type="hidden" name="status" value="Final,Draft" />
                            <input type="hidden" name="series" value="FIPS,SP,NISTIR,ITL Bulletin,White Paper,Building Block,Use Case,Journal Article,Conference Paper,Book" />
                            <button type="submit" id="search-csrc-submit-btn" class="form-submit">
                                <span class="element-invisible">Search</span>
                                <i class="fa fa-search"></i>
                            </button>
                        </form>
                    </div>
                    <span id="nvd-menu-button" class="pull-right">
                        <a href="#" id="nvd-menu-button-link">
                            <span class="fa fa-bars"></span>
                            <span id="nvd-menu-full-text">CSRC MENU</span>
                        </a>
                    </span>
                </div>
            </div>
        </div>

        <div class="form-inline hidden-md hidden-lg">
            <form name="site-search-mobile" id="site-search-form-mobile" action="/search" method="GET">
                <label for="search-csrc-query" class="element-invisible">Search</label>
                <input autocomplete="off" class="form-control" id="search-csrc-query-mobile" name="keywords" type="text" size="15" maxlength="128" placeholder="Search CSRC" />
                <button type="submit" id="search-csrc-submit-btn-mobile" class="form-submit">
                    <span class="element-invisible">Search</span>
                    <i class="fa fa-search"></i>
                </button>
            </form>
        </div>
        <div class="main-menu-row container">
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div id="main-menu-drop" class="col-lg-12" style="display: none;">
                <ul>
                    <li><a href="/projects">Projects</a></li>
                    <li>
                        <a href="/publications">
                            Publications
                            <span class="expander fa fa-plus" id="main-menu-pubs-expander" data-expander-name="publications" data-expanded="false">
                                <span class="element-invisible">Expand or Collapse</span>
                            </span>
                        </a>
                        <div style="display: none;" class="sub-menu" data-expander-trigger="publications" id="main-menu-pubs-expanded">
                            <div class="row">
                                <div class="col-lg-4">
                                    <p><a href="/publications/drafts-open-for-comment">Drafts for Public Comment</a></p>
                                    <p><a href="/publications/draft-pubs">All Public Drafts</a></p>
                                    <p><a href="/publications/final-pubs">Final Pubs</a></p>
                                    <p><a href="/publications/fips">FIPS</a></p>
                                </div>
                                <div class="col-lg-4">
                                    <p><a href="/publications/sp">Special Publications (SP<small>s</small>)</a></p>
                                    <p><a href="/publications/nistir">NISTIR<small>s</small></a></p>
                                    <p><a href="/publications/itl-bulletin">ITL Bulletins</a></p>
                                    <p><a href="/publications/white-paper">White Papers</a></p>
                                </div>
                                <div class="col-lg-4">
                                    <p><a href="/publications/journal-article">Journal Articles</a></p>
                                    <p><a href="/publications/conference-paper">Conference Papers</a></p>
                                    <p><a href="/publications/book">Books</a></p>
                                </div>
                            </div>
                        </div>
                    </li>
                    <li>
                        <a href="/topics">
                            Topics
                            <span class="expander fa fa-plus" id="main-menu-topics-expander" data-expander-name="topics" data-expanded="false">
                                <span class="element-invisible">Expand or Collapse</span>
                            </span>
                        </a>
                        <div style="display: none;" class="sub-menu" data-expander-trigger="topics" id="main-menu-topics-expanded">
                            <div class="row">
                                <div class="col-lg-4">
                                    <p><a href="/Topics/Security-and-Privacy">Security & Privacy</a></p>
                                    <p><a href="/Topics/Applications">Applications</a></p>
                                </div>
                                <div class="col-lg-4">
                                    <p><a href="/Topics/Technologies">Technologies</a></p>
                                    <p><a href="/Topics/Sectors">Sectors</a></p>
                                </div>
                                <div class="col-lg-4">
                                    <p><a href="/Topics/Laws-and-Regulations">Laws & Regulations</a></p>
                                    <p><a href="/Topics/Activities-and-Products">Activities & Products</a></p>
                                </div>
                            </div>
                        </div>
                    </li>
                    <li><a href="/news">News & Updates</a></li>
                    <li><a href="/events">Events</a></li>
                    <li><a href="/glossary">Glossary</a></li>
                    <li>
                        <a href="/about">
                            About CSRC
                            <span class="expander fa fa-plus" id="main-menu-about-expander" data-expander-name="about" data-expanded="false">
                                <span class="element-invisible">Expand or Collapse</span>
                            </span>
                        </a>
                        <div style="display: none;" class="sub-menu" data-expander-trigger="about" id="main-menu-about-expanded">
                            <div class="row">
                                <div class="col-lg-6">
                                    <p>
                                        <strong><a href="/Groups/Computer-Security-Division">Computer Security Division</a></strong><br />
                                        <ul>
                                            <li><a href="/Groups/Computer-Security-Division/Cryptographic-Technology">Cryptographic Technology</a></li>
                                            <li><a href="/Groups/Computer-Security-Division/Secure-Systems-and-Applications">Secure Systems and Applications</a></li>
                                            <li><a href="/Groups/Computer-Security-Division/Security-Components-and-Mechanisms">Security Components and Mechanisms</a></li>
                                            <li><a href="/Groups/Computer-Security-Division/Security-Engineering-and-Risk-Management">Security Engineering and Risk Management</a></li>
                                            <li><a href="/Groups/Computer-Security-Division/Security-Testing-Validation-and-Measurement">Security Testing, Validation, and Measurement</a></li>
                                        </ul>
                                    </p>
                                </div>
                                <div class="col-lg-6">
                                    <p>
                                        <strong><a href="/Groups/Applied-Cybersecurity-Division">Applied Cybersecurity Division</a></strong><br />
                                        <ul>
                                            <li><a href="/Groups/Applied-Cybersecurity-Division/Cybersecurity-and-Privacy-Applications">Cybersecurity and Privacy Applications</a></li>
                                            <li><a href="/Groups/Applied-Cybersecurity-Division/National-Cybersecurity-Center-of-Excellence">National Cybersecurity Center of Excellence (NCCoE)</a></li>
                                            <li><a href="https://www.nist.gov/nice/">National Initiative for Cybersecurity Education (NICE)</a></li>
                                        </ul>
                                    </p>
                                    <p>
                                        <a href="/contact">
                                            Contact Us
                                        </a>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </li>
                </ul>
            </div><!-- /#mobile-nav-container -->
        </div>

    </nav>

    <section id="itl-header" class="has-menu">
        <div class="container">
            <div class="row">
                <div class="col-sm-12 col-md-8">
                    <h2 class="hidden-xs hidden-sm">
                        <a href="https://www.nist.gov/itl" target="_blank" id="itl-header-link">Information Technology Laboratory</a>
                    </h2>
                    <h1 class="hidden-xs hidden-sm">
                        <a href="/" id="csrc-header-link-lg">Computer Security Resource Center</a>
                    </h1>
                    <h1 class="hidden-xs text-center hidden-md hidden-lg" id="csrc-header-link-md">Computer Security Resource Center</h1>
                </div>
                <div class="col-sm-12 col-md-4">
                    <a id="logo-csrc" href="/" style="width: 100%; text-align: center; display: block; margin-top: 1rem;"><img id="img-logo-csrc" src="/CSRC/Media/images/CSRC-white-134-38.png" alt="CSRC Logo" class="csrc-header-logo"></a>
                </div>
            </div>
        </div>
    </section>

    <div id="body-section" class="container">
        
        


<div class="publications-content">
    <div class="row">
        <div class="col-lg-3 col-md-4 hidden-sm hidden-xs hidden-xxs">


    <div id="publications-quicklinks-lg" class="bs-callout bs-callout-subnav hidden-sm hidden-xs hidden-xxs">
        <h4>Current Publications <i class="fa fa-bolt"></i></h4>
        <ul>
            <li>
                <strong>
                    NIST Series Pubs <i class="fa fa-info-circle" aria-hidden="true" data-placement="right" data-html="true"
                                        data-tooltip-toggle="tooltipWithFunction" data-title-container="nist-series-pubs-tooltip"></i>
                </strong>
                <ul>
                    <li><a href="/publications/final-pubs" id="quick-link-final-lg">Final Pubs</a></li>
                    <li><a href="/publications/drafts-open-for-comment" id="quick-links-comments-lg">Drafts Open for Comment</a></li>
                    <li><a href="/publications/draft-pubs" id="quick-link-draft-lg">All Public Drafts</a></li>
                    <li>
                        <strong>
                            View By Series <i class="fa fa-info-circle" aria-hidden="true" data-placement="right" data-html="true"
                                              data-tooltip-toggle="tooltipWithFunction" data-title-container="nist-view-series-pubs-tooltip"></i>
                        </strong>
                        <ul>
                            <li><a href="/publications/fips" id="quick-link-fips-lg">FIPS</a></li>
                            <li><a href="/publications/sp800" id="quick-link-sp-800-lg">SP 800 series</a></li>
                            <li><a href="/publications/sp" id="quick-link-sp-lg">All SP series</a></li>
                            <li><a href="/publications/nistir" id="quick-link-nistir-lg">NISTIRs</a></li>
                            <li><a href="/publications/itl-bulletin" id="quick-link-itl-bul-lg">ITL Bulletins</a></li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li>
                <strong>
                    Other Pubs <i class="fa fa-info-circle" aria-hidden="true" data-placement="right" data-html="true"
                                  data-tooltip-toggle="tooltipWithFunction" data-title-container="nist-other-pubs-tooltip"></i>
                </strong>
                <ul>
                    <li><a href="/publications/white-paper" id="quick-link-white-papers-lg">White Papers</a></li>
                    <li><a href="/publications/journal-article" id="quick-link-journal-articles-lg">Journal Articles</a></li>
                    <li><a href="/publications/conference-paper" id="quick-link-conference-papers-lg">Conference Papers</a></li>
                    <li><a href="/publications/book" id="quick-link-books-lg">Books</a></li>
                </ul>
            </li>
        </ul>
        <span style="display: none;" id="nist-series-pubs-tooltip">
            <strong>Final:</strong> <em>Current list of all published NIST cybersecurity documents.</em>
            Does not include "Withdrawn" documents. Includes FIPS, Special Publications, NISTIRs, ITL Bulletins, and NIST Cybersecurity White Papers.<br />
            <br />
            <strong>Public Drafts:</strong> <em>Current list of all draft NIST cybersecurity documents--they are typically posted for public comment.</em>
            "Current" public drafts are the latest draft versions that have not yet been published as "Final."
        </span>
        <span style="display: none;" id="nist-view-series-pubs-tooltip">
            <strong>FIPS:</strong> <em>Current Federal Information Processing Standard Publications (FIPS).</em> Includes current (Final and Draft) FIPS.<br />
            <br />
            <strong>SP 800 Series:</strong> <em>Current NIST Special Publication (SP) 800 series publications, which focus on Computer/Information Security.</em>
            Includes current (Final and Draft) SP 800 pubs.<br />
            <br />
            <strong>All SP Series:</strong> <em>
                Current NIST Special Publications (SP), including SP 800 (Computer/Information Security) and SP 1800
                (Cybersecurity Practice Guides) pubs. Also includes SP 500 (Computer Systems Technology) pubs related to cybersecurity and privacy.
            </em>
            Includes current (Final and Draft) NIST Special Publications.<br />
            <br />
            <strong>NISTIRs:</strong> <em>Current list of NIST Interagency or Internal Reports (NISTIR) related to cybersecurity and privacy.</em>
            Includes current (Final and Draft) NISTIRs.<br />
            <br />
            <strong>ITL Bulletins:</strong> Current list of NIST Information Technology Laboratory (ITL) Bulletins.
        </span>
        <span style="display: none;" id="nist-other-pubs-tooltip">
            <strong>White Papers:</strong> <em>
                Consists of NIST Cybersecurity White Papers; NCCoE Project Descriptions, Building Blocks and Use Cases; and
                other NIST-authored papers that are not part of a formal series.
            </em> Includes current (Final and Draft) papers.<br />
            <br />
            <strong>Journal Articles:</strong> NIST-authored articles published in external journals and in the NIST Journal of Research (JRES).<br />
            <br />
            <strong>Conference Papers:</strong> NIST-authored conference papers related to cybersecurity and privacy.<br />
            <br />
            <strong>Books:</strong> NIST-authored books, book sections, and encyclopedia entries related to cybersecurity and privacy.
        </span>
    </div>

<form action="/publications/search" class="bs-callout bs-callout-success csrc-search-form hidden-sm hidden-xs hidden-xxs" data-csrc-form="true" data-default-query="sortBy-lg=releasedate+DESC&amp;viewMode-lg=brief&amp;ipp-lg=25&amp;status-lg=Final%2CDraft&amp;topicsMatch-lg=ANY&amp;controlsMatch-lg=ANY" data-form-ignore-default="sortBy" data-form-name="pubSearchDesktop" id="pubs-search-form-lg" method="get">    <div class="form-group">
        <label for="keywords-lg">Search</label>
        <input Name="keywords-lg" class="form-control" data-val="true" data-val-length="The field Search must be a string with a maximum length of 255." data-val-length-max="255" id="keywords-lg" name="Form.Keywords" type="text" value="SP 2222" />
        <em class="text-muted">Search publication record data<br /> (not a full text search)</em>
    </div>
    <div class="form-group">
        <label for="sortBy-lg">Sort By</label>
        <div class="form-inline">
            <select Name="sortBy-lg" class="form-control" id="sortBy-lg" name="Form.SortBy"><option value="relevance">Relevance (best match)</option>
<option value="releasedate DESC">Release Date  (newest first)</option>
<option value="releasedate ASC">Release Date  (oldest first)</option>
<option value="Series ASC">Series (A-Z)</option>
<option value="Series DESC">Series (Z-A)</option>
<option value="Number ASC">Number (lowest to highest)</option>
<option value="Number DESC">Number (highest to lowest)</option>
<option value="title asc">Title (A-Z)</option>
<option value="title desc">Title (Z-A)</option>
</select>
        </div>
    </div>
    <div class="form-group">
        <label for="viewMode-lg">Results View</label>
        <select Name="viewMode-lg" class="form-control" id="viewMode-lg" name="Form.ResultsViewMode"><option selected="selected" value="brief">Brief</option>
<option value="summary">Summary</option>
</select>
    </div>
    <div class="form-group form-inline">
        <label for="ipp-lg" class="form-control-half">Items Per Page</label>
        <select Name="ipp-lg" class="form-control" id="ipp-lg" name="Form.ItemsPerPage"><option selected="selected" value="25">25</option>
<option value="50">50</option>
<option value="75">75</option>
<option value="100">100</option>
<option value="all">All</option>
</select>
    </div>
    <div class="form-group">
        <label for="dateFrom-lg">Date</label>
        <div class="form-inline form-date-inline">
            <div class="input-group date" data-date-picker="true">
                <input Name="dateFrom-lg" class="form-control" data-control-type="date" data-val="true" data-val-date="The field Date must be a date." data-validation="true" data-validation-compare-field="dateTo-lg" data-validation-message="From date must be less than To date" data-validation-type="less-than-date" id="dateFrom-lg" name="Form.DateFrom" placeholder="  /  /    " type="text" value="" />
                <span class="input-group-addon">
                    <span class="fa fa-calendar">
                    </span>
                </span>
            </div>
            <div class="input-group date" data-date-picker="true">
                <input Name="dateTo-lg" class="form-control" data-control-type="date" data-val="true" data-val-date="The field DateTo must be a date." id="dateTo-lg" name="Form.DateTo" placeholder="  /  /    " type="text" value="" />
                <span class="input-group-addon">
                    <span class="fa fa-calendar">
                    </span>
                </span>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label for="status-all-lg">
            Status <i class="fa fa-info-circle" aria-hidden="true" data-placement="right" data-html="true"
                      data-tooltip-toggle="tooltipWithFunction" data-title-container="publications-status-info"></i>
        </label>
        <div class="form-inline status-type" style="margin-left: 1rem;">
                <label class="meta-label">
                <input type="checkbox" id="status-final-lg" name="status-lg" value="Final"
                    data-default-checked="True" checked=&#39;checked&#39; /> Final<br />
                </label>
                <label class="meta-label">
                <input type="checkbox" id="status-draft-lg" name="status-lg" value="Draft"
                    data-default-checked="True"  /> Public Draft<br />
                </label>
                <label class="meta-label">
                <input type="checkbox" id="status-withdrawn-lg" name="status-lg" value="Withdrawn"
                    data-default-checked="True" checked=&#39;checked&#39; /> Withdrawn<br />
                </label>
        </div>
    </div>
    <div class="form-group">
        <label for="pub-search-series">
            Series
            <button type="button" id="series-all-lg" class="btn btn-sm btn-success" data-check-all="series-lg">Check All</button>
            <button type="button" id="series-clear-lg" class="btn btn-sm btn-success" data-check-none="series-lg">Clear</button>
        </label>
        <div class="form-inline series-type" style="margin-left: 1rem;">
                <label class="meta-label">
                <input type="checkbox" id="series-fips-lg" name="series-lg" value="FIPS" 
                       data-default-checked="True" /> FIPS<br/>
                </label>
                <label class="meta-label">
                <input type="checkbox" id="series-sp-lg" name="series-lg" value="SP" 
                       data-default-checked="True" /> SP<br/>
                </label>
                <label class="meta-label">
                <input type="checkbox" id="series-nistir-lg" name="series-lg" value="NISTIR" 
                       data-default-checked="True" /> NISTIR<br/>
                </label>
                <label class="meta-label">
                <input type="checkbox" id="series-itl-bul-lg" name="series-lg" value="ITL Bulletin" 
                       data-default-checked="True" /> ITL Bulletin<br/>
                </label>
                <label class="meta-label">
                <input type="checkbox" id="series-white-paper-lg" name="series-lg" value="White Paper" 
                       data-default-checked="True" /> White Paper<br/>
                </label>
                <label class="meta-label">
                <input type="checkbox" id="series-build-block-lg" name="series-lg" value="Building Block" 
                       data-default-checked="True" /> Building Block<br/>
                </label>
                <label class="meta-label">
                <input type="checkbox" id="series-use-case-lg" name="series-lg" value="Use Case" 
                       data-default-checked="True" /> Use Case<br/>
                </label>
                <label class="meta-label">
                <input type="checkbox" id="series-journal-lg" name="series-lg" value="Journal Article" 
                       data-default-checked="True" /> Journal Article<br/>
                </label>
                <label class="meta-label">
                <input type="checkbox" id="series-conf-paper-lg" name="series-lg" value="Conference Paper" 
                       data-default-checked="True" /> Conference Paper<br/>
                </label>
                <label class="meta-label">
                <input type="checkbox" id="series-book-lg" name="series-lg" value="Book" 
                       data-default-checked="True" /> Book<br/>
                </label>
        </div>
    </div>
    <div class="form-group">
        <label for="pub-search-topics-lg">
            Topics
        </label>
        <input Name="topics-lg" id="topics-lg" name="Form.Topics" type="hidden" value="" />
        <div class="form-control topics-selection"
             id="pub-search-topics-lg"
             contenteditable="true"
             data-drop-target="pub-search-topics-drop-lg"
             data-field-name="topics-lg"
             aria-haspopup="true"
             aria-expanded="false">
        </div>
        <div class="topics-selection-dropdown desktop" id="pub-search-topics-drop-lg" style="display: none;" data-topics-selector=""><div class="col-sm-4"><strong>Security and Privacy</strong><br/>
<ul><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27481" data-expander-for="/topics/security-and-privacy/cryptography"></i> <a data-topic-id="27481" data-topic-text="cryptography">cryptography</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27647" data-topic-text="digital signatures">digital signatures</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27648" data-topic-text="encryption">encryption</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27649" data-topic-text="key management">key management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27650" data-topic-text="message authentication">message authentication</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27651" data-topic-text="post-quantum cryptography">post-quantum cryptography</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27652" data-topic-text="random number generation">random number generation</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27653" data-topic-text="secure hashing">secure hashing</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27482" data-topic-text="cyber supply chain risk management">cyber supply chain risk management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27483" data-topic-text="general security & privacy">general security & privacy</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27484" data-expander-for="/topics/security-and-privacy/identity-and-access-management"></i> <a data-topic-id="27484" data-topic-text="identity & access management">identity & access management</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27663" data-topic-text="access authorization">access authorization</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27664" data-topic-text="access control">access control</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27665" data-topic-text="authentication">authentication</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27666" data-topic-text="Personal Identity Verification">Personal Identity Verification</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27667" data-topic-text="public key infrastructure">public key infrastructure</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27485" data-expander-for="/topics/security-and-privacy/privacy"></i> <a data-topic-id="27485" data-topic-text="privacy">privacy</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27680" data-topic-text="personally identifiable information">personally identifiable information</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27681" data-topic-text="privacy engineering">privacy engineering</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27486" data-expander-for="/topics/security-and-privacy/risk-management"></i> <a data-topic-id="27486" data-topic-text="risk management">risk management</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27682" data-topic-text="categorization">categorization</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27683" data-topic-text="continuous monitoring">continuous monitoring</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-27486-27684" data-expander-for="/topics/security-and-privacy/risk-management/controls"></i> <a data-topic-id="27684" data-topic-text="controls">controls</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27767" data-topic-text="controls assessment">controls assessment</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27768" data-topic-text="privacy controls">privacy controls</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27769" data-topic-text="security controls">security controls</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27685" data-topic-text="risk assessment">risk assessment</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27686" data-topic-text="roots of trust">roots of trust</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27687" data-topic-text="system authorization">system authorization</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-27486-27688" data-expander-for="/topics/security-and-privacy/risk-management/threats"></i> <a data-topic-id="27688" data-topic-text="threats">threats</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27770" data-topic-text="advanced persistent threat">advanced persistent threat</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27771" data-topic-text="botnets">botnets</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27772" data-topic-text="information sharing">information sharing</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27773" data-topic-text="intrusion detection & prevention">intrusion detection & prevention</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27774" data-topic-text="malware">malware</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27689" data-topic-text="vulnerability management">vulnerability management</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27487" data-expander-for="/topics/security-and-privacy/security-and-behavior"></i> <a data-topic-id="27487" data-topic-text="security & behavior">security & behavior</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27709" data-topic-text="accessibility">accessibility</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27710" data-topic-text="behavior">behavior</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27711" data-topic-text="usability">usability</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27488" data-expander-for="/topics/security-and-privacy/security-measurement"></i> <a data-topic-id="27488" data-topic-text="security measurement">security measurement</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27690" data-topic-text="analytics">analytics</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27691" data-topic-text="assurance">assurance</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27692" data-topic-text="modeling">modeling</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27693" data-topic-text="testing & validation">testing & validation</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27489" data-expander-for="/topics/security-and-privacy/security-programs-and-operations"></i> <a data-topic-id="27489" data-topic-text="security programs & operations">security programs & operations</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27694" data-topic-text="acquisition">acquisition</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27695" data-topic-text="asset management">asset management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27696" data-topic-text="audit & accountability">audit & accountability</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27697" data-topic-text="awareness training & education">awareness training & education</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27698" data-topic-text="configuration management">configuration management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27699" data-topic-text="contingency planning">contingency planning</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27700" data-topic-text="incident response">incident response</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27701" data-topic-text="maintenance">maintenance</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27702" data-topic-text="media protection">media protection</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27703" data-topic-text="patch management">patch management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27704" data-topic-text="personnel security">personnel security</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27705" data-topic-text="physical & environmental protection">physical & environmental protection</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27706" data-topic-text="planning">planning</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27707" data-topic-text="program management">program management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27708" data-topic-text="security automation">security automation</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27490" data-expander-for="/topics/security-and-privacy/systems-security-engineering"></i> <a data-topic-id="27490" data-topic-text="systems security engineering">systems security engineering</a><ul style="display: none;"><li><i class="fa fa-plus fa-fw" id="topics-expander-27490-27713" data-expander-for="/topics/security-and-privacy/systems-security-engineering/trustworthiness"></i> <a data-topic-id="27713" data-topic-text="trustworthiness">trustworthiness</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27775" data-topic-text="reliability">reliability</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27776" data-topic-text="resilience">resilience</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27777" data-topic-text="safety">safety</a></li></ul>
</li></ul>
</li></ul><strong>Technologies</strong><br/>
<ul><li><i class="fa fa-fw"></i> <a data-topic-id="27491" data-topic-text="artificial intelligence">artificial intelligence</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27492" data-topic-text="big data">big data</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27493" data-topic-text="biometrics">biometrics</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27494" data-topic-text="blockchain">blockchain</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27495" data-topic-text="cloud & virtualization">cloud & virtualization</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27496" data-topic-text="combinatorial testing">combinatorial testing</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27497" data-topic-text="complexity">complexity</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-24671-27499" data-expander-for="/topics/technologies/hardware"></i> <a data-topic-id="27499" data-topic-text="hardware">hardware</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27714" data-topic-text="circuits">circuits</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27715" data-topic-text="personal computers">personal computers</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27716" data-topic-text="sensors">sensors</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27498" data-topic-text="mobile">mobile</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-24671-27500" data-expander-for="/topics/technologies/networks"></i> <a data-topic-id="27500" data-topic-text="networks">networks</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27717" data-topic-text="email">email</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27718" data-topic-text="firewalls">firewalls</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27719" data-topic-text="internet">internet</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27501" data-topic-text="quantum information science">quantum information science</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27502" data-topic-text="servers">servers</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27503" data-topic-text="smart cards">smart cards</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-24671-27504" data-expander-for="/topics/technologies/software-firmware"></i> <a data-topic-id="27504" data-topic-text="software & firmware">software & firmware</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27720" data-topic-text="BIOS">BIOS</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27721" data-topic-text="databases">databases</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27722" data-topic-text="operating systems">operating systems</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27505" data-topic-text="storage">storage</a></li></ul></div><div class="col-sm-4"><strong>Applications</strong><br/>
<ul><li><i class="fa fa-fw"></i> <a data-topic-id="27456" data-topic-text="communications & wireless">communications & wireless</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27457" data-topic-text="cyber-physical systems">cyber-physical systems</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27458" data-topic-text="cybersecurity education">cybersecurity education</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27459" data-topic-text="cybersecurity framework">cybersecurity framework</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27460" data-topic-text="cybersecurity workforce">cybersecurity workforce</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27461" data-topic-text="enterprise">enterprise</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27462" data-topic-text="forensics">forensics</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27463" data-topic-text="industrial control systems">industrial control systems</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27464" data-topic-text="Internet of Things">Internet of Things</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="28914" data-topic-text="positioning navigation & timing">positioning navigation & timing</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27465" data-topic-text="small & medium business">small & medium business</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27466" data-topic-text="telework">telework</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27467" data-topic-text="voting">voting</a></li></ul><strong>Laws and Regulations</strong><br/>
<ul><li><i class="fa fa-plus fa-fw" id="topics-expander-24673-27468" data-expander-for="/topics/laws-and-regulations/executive-documents"></i> <a data-topic-id="27468" data-topic-text="executive documents">executive documents</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27668" data-topic-text="Comprehensive National Cybersecurity Initiative">Comprehensive National Cybersecurity Initiative</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27669" data-topic-text="Cybersecurity Strategy and Implementation Plan">Cybersecurity Strategy and Implementation Plan</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27670" data-topic-text="Cyberspace Policy Review">Cyberspace Policy Review</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27671" data-topic-text="Executive Order 13636">Executive Order 13636</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27672" data-topic-text="Executive Order 13702">Executive Order 13702</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27673" data-topic-text="Executive Order 13718">Executive Order 13718</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27674" data-topic-text="Executive Order 13800">Executive Order 13800</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="28915" data-topic-text="Executive Order 13905">Executive Order 13905</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27675" data-topic-text="Federal Cybersecurity Research and Development Strategic Plan">Federal Cybersecurity Research and Development Strategic Plan</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27676" data-topic-text="Homeland Security Presidential Directive 7">Homeland Security Presidential Directive 7</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27677" data-topic-text="Homeland Security Presidential Directive 12">Homeland Security Presidential Directive 12</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27678" data-topic-text="OMB Circular A-11">OMB Circular A-11</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27679" data-topic-text="OMB Circular A-130">OMB Circular A-130</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24673-27469" data-expander-for="/topics/laws-and-regulations/laws"></i> <a data-topic-id="27469" data-topic-text="laws">laws</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27654" data-topic-text="Cyber Security R&D Act">Cyber Security R&D Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27655" data-topic-text="Cybersecurity Enhancement Act">Cybersecurity Enhancement Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27656" data-topic-text="E-Government Act">E-Government Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27657" data-topic-text="Energy Independence and Security Act">Energy Independence and Security Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27658" data-topic-text="Federal Information Security Modernization Act">Federal Information Security Modernization Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27659" data-topic-text="First Responder Network Authority">First Responder Network Authority</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27660" data-topic-text="Health Insurance Portability and Accountability Act">Health Insurance Portability and Accountability Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27661" data-topic-text="Help America Vote Act">Help America Vote Act</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24673-27470" data-expander-for="/topics/laws-and-regulations/regulations"></i> <a data-topic-id="27470" data-topic-text="regulations">regulations</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27662" data-topic-text="Federal Acquisition Regulation">Federal Acquisition Regulation</a></li></ul>
</li></ul></div><div class="col-sm-4"><strong>Activities and Products</strong><br/>
<ul><li><i class="fa fa-fw"></i> <a data-topic-id="27452" data-topic-text="annual reports">annual reports</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27453" data-topic-text="conferences & workshops">conferences & workshops</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27454" data-topic-text="reference materials">reference materials</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27455" data-topic-text="standards development">standards development</a></li></ul><strong>Sectors</strong><br/>
<ul><li><i class="fa fa-fw"></i> <a data-topic-id="27471" data-topic-text="aerospace">aerospace</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-24675-27472" data-expander-for="/topics/sectors/energy"></i> <a data-topic-id="27472" data-topic-text="energy">energy</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27712" data-topic-text="smart grid">smart grid</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27473" data-topic-text="financial services">financial services</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27474" data-topic-text="healthcare">healthcare</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27475" data-topic-text="hospitality">hospitality</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27476" data-topic-text="manufacturing">manufacturing</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27477" data-topic-text="public safety">public safety</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27478" data-topic-text="retail">retail</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27479" data-topic-text="telecommunications">telecommunications</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27480" data-topic-text="transportation">transportation</a></li></ul></div></div>
        <div class="form-inline topics-type">
            <label class="radio-label">Match ANY: <input Name="topicsMatch-lg" checked="checked" id="topicsMatch-any-lg" name="Form.TopicsMatch" type="radio" value="ANY" /></label>
            <label class="radio-label">Match ALL: <input Name="topicsMatch-lg" id="topicsMatch-all-lg" name="Form.TopicsMatch" type="radio" value="ALL" /></label>
        </div>
    </div>
    <div class="form-group">
        <label for="pub-search-controls-lg">
            Control Family (800-53)
        </label>
        <input Name="controls-lg" id="controls-lg" name="Form.Controls" type="hidden" value="" />
        <div class="form-control controls-selection"
             id="pub-search-controls-lg"
             contenteditable="true"
             data-drop-target="pub-search-controls-drop-lg"
             data-field-name="controls-lg"
             aria-haspopup="true"
             aria-expanded="false">
        </div>
        <div class="controls-selection-dropdown desktop" id="pub-search-controls-drop-lg" style="display: none;" data-controls-selector="">
            <strong>Control Families</strong>
            <ul>
                    <li><a data-control-id="63d54ae4-c6cf-4ae4-a398-f19298c74903">AC - Access Control</a></li>
                    <li><a data-control-id="36fb0b10-f6ae-4e0e-803c-bece9c947fd8">AT - Awareness and Training</a></li>
                    <li><a data-control-id="4243d52c-ff5e-417b-8e1b-8344ff811570">AU - Audit and Accountability</a></li>
                    <li><a data-control-id="0d93bf29-4551-4b7d-9677-23d0eb0524e0">CA - Assessment, Authorization and Monitoring</a></li>
                    <li><a data-control-id="809b7563-f050-4bbf-a0e4-7ad25411734d">CM - Configuration Management</a></li>
                    <li><a data-control-id="da51be5c-b86d-4e32-9484-f94cf75b8217">CP - Contingency Planning</a></li>
                    <li><a data-control-id="ed87a12a-b75a-4555-862c-52f071b7ddb0">IA - Identification and Authentication</a></li>
                    <li><a data-control-id="4801756a-a4ed-4b64-8890-4169d9b6a9ce">IR - Incident Response</a></li>
                    <li><a data-control-id="88089d1d-c115-41f7-92ad-a84abe6101fc">MA - Maintenance</a></li>
                    <li><a data-control-id="3fb9de77-cb37-43fd-b8a5-e33576b8caa1">MP - Media Protection</a></li>
                    <li><a data-control-id="f3b91e7e-2498-49ce-bd0f-5b9ce3bbd9e0">PE - Physical and Environmental Protection</a></li>
                    <li><a data-control-id="641492d1-d2da-40e6-a523-f93fdb5358e9">PL - Planning</a></li>
                    <li><a data-control-id="9d2a46b6-2530-4266-ae75-dab3ea78d7a0">PM - Program Management</a></li>
                    <li><a data-control-id="205e7cff-23a5-4b59-85bc-168ae6e7d95f">PS - Personnel Security</a></li>
                    <li><a data-control-id="09385da5-c3cd-4dcf-91e9-fd455b0ef704">PT - PII Processing and Transparency</a></li>
                    <li><a data-control-id="e08f7835-ea6b-4b7c-9db3-33a3662a38d1">RA - Risk Assessment</a></li>
                    <li><a data-control-id="8e2ea53d-c53d-480e-b374-eb5ab055a94b">SA - System and Services Acquisition</a></li>
                    <li><a data-control-id="f35646b1-d701-4941-b1c5-8e872f6bb812">SC - System and Communications Protection</a></li>
                    <li><a data-control-id="660d9ce0-9cfe-4f5e-890a-41670d010846">SI - System and Information Integrity</a></li>
                    <li><a data-control-id="605d44df-5027-4c32-a228-c000bbcac173">SR - Supply Chain Risk Management</a></li>
            </ul>
        </div>
        <div class="form-inline controls-type">
            <label class="radio-label">Match ANY: <input Name="controlsMatch-lg" checked="checked" id="controlsMatch-any-lg" name="Form.ControlsMatch" type="radio" value="ANY" /></label>
            <label class="radio-label">Match ALL: <input Name="controlsMatch-lg" id="controlsMatch-all-lg" name="Form.ControlsMatch" type="radio" value="ALL" /></label>
        </div>
    </div>
    <div style="display: none;" data-form-error-pane="true" class="text-danger">
        <strong class="text-danger">Please fix the following:</strong>
        <ul data-form-error-list="true">
        </ul>
        <div class="validation-summary-valid" data-valmsg-summary="true"><ul><li style="display:none"></li>
</ul></div>
    </div>
    <div class="form-group">
        <button type="submit" id="pubs-search-submit-lg" name="submit-btn" data-form-button="submit" class="btn">Search</button>
        <button type="reset" id="pubs-search-reset-lg" name="reset-btn" data-form-button="reset" class="btn">Reset</button>
    </div>
    <span style="display: none;" id="publications-status-info">
        <p><strong>Final:</strong> Published documents.</p>

        <p><strong>Public Draft:</strong>  Documents have been posted as Public Drafts, typically with a public comment period.</p>

        <p>
            <strong>Withdrawn:</strong> Documents that have been withdrawn, and are no longer current. This includes:<br/>
            - Final publications that have been withdrawn;<br/>
            - Public drafts that have been obsoleted by a subsequent draft or final publication;<br/>
            - Public drafts that have been retired—further development was discontinued.
        </p>
    </span>
</form>
        </div>
        <div class="col-lg-9 col-md-8 col-sm-12 col-xs-12 col-xxs-12">

            <h4>Search Results</h4>


<form action="/publications/search" class="bs-callout bs-callout-success csrc-search-form hidden-lg hidden-md mobile-form" data-csrc-form="true" data-default-query="sortBy-lg=releasedate+DESC&amp;viewMode-lg=brief&amp;ipp-lg=25&amp;status-lg=Final%2CDraft&amp;topicsMatch-lg=ANY&amp;controlsMatch-lg=ANY" data-form-ignore-default="sortBy" data-form-name="pubSearchMobile" id="pubs-search-form-sm" method="get">    <div class="form-group">
        <label for="keywords-sm">Search</label>
        <input Name="keywords-sm" class="form-control" data-val="true" data-val-length="The field Search must be a string with a maximum length of 255." data-val-length-max="255" id="keywords-sm" name="Form.Keywords" type="text" value="SP 2222" />
        <em class="text-muted">Search publication record data<br /> (not a full text search)</em>
    </div>
    <div class="form-group">
        <label for="sortBy-sm">Sort By</label>
        <div class="form-inline">
            <select Name="sortBy-sm" class="form-control" id="sortBy-sm" name="Form.SortBy"><option value="relevance">Relevance (best match)</option>
<option value="releasedate DESC">Release Date  (newest first)</option>
<option value="releasedate ASC">Release Date  (oldest first)</option>
<option value="Series ASC">Series (A-Z)</option>
<option value="Series DESC">Series (Z-A)</option>
<option value="Number ASC">Number (lowest to highest)</option>
<option value="Number DESC">Number (highest to lowest)</option>
<option value="title asc">Title (A-Z)</option>
<option value="title desc">Title (Z-A)</option>
</select>
        </div>
    </div>
    <div class="form-group">
        <label for="viewMode-sm">Results View</label>
        <select Name="viewMode-sm" class="form-control" id="viewMode-sm" name="Form.ResultsViewMode"><option selected="selected" value="brief">Brief</option>
<option value="summary">Summary</option>
</select>
    </div>
    <div class="form-group form-inline">
        <label for="ipp-sm" class="form-control-half">Items Per Page</label>
        <select Name="ipp-sm" class="form-control" id="ipp-sm" name="Form.ItemsPerPage"><option selected="selected" value="25">25</option>
<option value="50">50</option>
<option value="75">75</option>
<option value="100">100</option>
<option value="all">All</option>
</select>
    </div>
    <div class="form-group">
        <p class="text-center">
            <a href="#" data-form-show-name="advancedSearch" id="advanced-search-link">
                Advanced Search
                <i class="fa fa-caret-down" aria-hidden="true" data-form-show-expanded="true" style="display: none;"></i>
                <i class="fa fa-caret-up" aria-hidden="true" data-form-show-expanded="false"></i>
            </a>
        </p>
    </div>
    <div style="display: none;" data-form-show-trigger="advancedSearch" data-form-show="false">
        <div class="form-group">
            <label for="dateFrom-sm">Date</label>
            <div class="form-inline form-date-inline">
                <div class="input-group date" data-date-picker="true">
                    <input Name="dateFrom-sm" class="form-control" data-control-type="date" data-val="true" data-val-date="The field Date must be a date." data-validation="true" data-validation-compare-field="dateTo-sm" data-validation-message="From date must be less than To date" data-validation-type="less-than-date" id="dateFrom-sm" name="Form.DateFrom" placeholder="  /  /    " type="text" value="" />
                    <span class="input-group-addon">
                        <span class="fa fa-calendar">
                        </span>
                    </span>
                </div>
                <div class="input-group date" data-date-picker="true">
                    <input Name="dateTo-sm" class="form-control" data-control-type="date" data-val="true" data-val-date="The field DateTo must be a date." id="dateTo-sm" name="Form.DateTo" placeholder="  /  /    " type="text" value="" />
                    <span class="input-group-addon">
                        <span class="fa fa-calendar">
                        </span>
                    </span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="status-all-sm">
                Status <i class="fa fa-info-circle" aria-hidden="true" data-placement="right" data-html="true"
                          data-tooltip-toggle="tooltipWithFunction" data-title-container="publications-status-info"></i>
            </label>
            <div class="form-inline status-type" style="margin-left: 1rem;">
                    <label class="meta-label">
                    <input type="checkbox" id="status-final-sm" name="status-sm" value="Final"
                        data-default-checked="True" checked=&#39;checked&#39; /> Final<br />
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="status-draft-sm" name="status-sm" value="Draft"
                        data-default-checked="True"  /> Public Draft<br />
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="status-withdrawn-sm" name="status-sm" value="Withdrawn"
                        data-default-checked="True" checked=&#39;checked&#39; /> Withdrawn<br />
                    </label>
            </div>
        </div>
        <div class="form-group">
            <label for="pub-search-series">
                Series
                <button type="button" id="series-all-sm" class="btn btn-sm btn-success" data-check-all="series-sm">Check All</button>
                <button type="button" id="series-clear-sm" class="btn btn-sm btn-success" data-check-none="series-sm">Clear</button>
            </label>
            <div class="form-inline series-type" style="margin-left: 1rem;">
                    <label class="meta-label">
                    <input type="checkbox" id="series-fips-sm" name="series-sm" value="FIPS"
                       data-default-checked="True" /> FIPS<br/>
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="series-sp-sm" name="series-sm" value="SP"
                       data-default-checked="True" /> SP<br/>
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="series-nistir-sm" name="series-sm" value="NISTIR"
                       data-default-checked="True" /> NISTIR<br/>
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="series-itl-bul-sm" name="series-sm" value="ITL Bulletin"
                       data-default-checked="True" /> ITL Bulletin<br/>
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="series-white-paper-sm" name="series-sm" value="White Paper"
                       data-default-checked="True" /> White Paper<br/>
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="series-build-block-sm" name="series-sm" value="Building Block"
                       data-default-checked="True" /> Building Block<br/>
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="series-use-case-sm" name="series-sm" value="Use Case"
                       data-default-checked="True" /> Use Case<br/>
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="series-journal-sm" name="series-sm" value="Journal Article"
                       data-default-checked="True" /> Journal Article<br/>
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="series-conf-paper-sm" name="series-sm" value="Conference Paper"
                       data-default-checked="True" /> Conference Paper<br/>
                    </label>
                    <label class="meta-label">
                    <input type="checkbox" id="series-book-sm" name="series-sm" value="Book"
                       data-default-checked="True" /> Book<br/>
                    </label>
            </div>
        </div>
        <div class="form-group">
            <label for="pub-search-topics-sm">
                Topics
            </label>
            <input Name="topics-sm" id="topics-sm" name="Form.Topics" type="hidden" value="" />
            <div class="form-control topics-selection"
                 id="pub-search-topics-sm"
                 contenteditable="true"
                 data-drop-target="pub-search-topics-drop-sm"
                 data-field-name="topics-sm"
                 aria-haspopup="true"
                 aria-expanded="false">
            </div>
            <div class="topics-selection-dropdown desktop" id="pub-search-topics-drop-sm" style="display: none;" data-topics-selector=""><div class="col-sm-4"><strong>Security and Privacy</strong><br/>
<ul><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27481" data-expander-for="/topics/security-and-privacy/cryptography"></i> <a data-topic-id="27481" data-topic-text="cryptography">cryptography</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27647" data-topic-text="digital signatures">digital signatures</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27648" data-topic-text="encryption">encryption</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27649" data-topic-text="key management">key management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27650" data-topic-text="message authentication">message authentication</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27651" data-topic-text="post-quantum cryptography">post-quantum cryptography</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27652" data-topic-text="random number generation">random number generation</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27653" data-topic-text="secure hashing">secure hashing</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27482" data-topic-text="cyber supply chain risk management">cyber supply chain risk management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27483" data-topic-text="general security & privacy">general security & privacy</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27484" data-expander-for="/topics/security-and-privacy/identity-and-access-management"></i> <a data-topic-id="27484" data-topic-text="identity & access management">identity & access management</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27663" data-topic-text="access authorization">access authorization</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27664" data-topic-text="access control">access control</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27665" data-topic-text="authentication">authentication</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27666" data-topic-text="Personal Identity Verification">Personal Identity Verification</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27667" data-topic-text="public key infrastructure">public key infrastructure</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27485" data-expander-for="/topics/security-and-privacy/privacy"></i> <a data-topic-id="27485" data-topic-text="privacy">privacy</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27680" data-topic-text="personally identifiable information">personally identifiable information</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27681" data-topic-text="privacy engineering">privacy engineering</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27486" data-expander-for="/topics/security-and-privacy/risk-management"></i> <a data-topic-id="27486" data-topic-text="risk management">risk management</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27682" data-topic-text="categorization">categorization</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27683" data-topic-text="continuous monitoring">continuous monitoring</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-27486-27684" data-expander-for="/topics/security-and-privacy/risk-management/controls"></i> <a data-topic-id="27684" data-topic-text="controls">controls</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27767" data-topic-text="controls assessment">controls assessment</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27768" data-topic-text="privacy controls">privacy controls</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27769" data-topic-text="security controls">security controls</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27685" data-topic-text="risk assessment">risk assessment</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27686" data-topic-text="roots of trust">roots of trust</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27687" data-topic-text="system authorization">system authorization</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-27486-27688" data-expander-for="/topics/security-and-privacy/risk-management/threats"></i> <a data-topic-id="27688" data-topic-text="threats">threats</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27770" data-topic-text="advanced persistent threat">advanced persistent threat</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27771" data-topic-text="botnets">botnets</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27772" data-topic-text="information sharing">information sharing</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27773" data-topic-text="intrusion detection & prevention">intrusion detection & prevention</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27774" data-topic-text="malware">malware</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27689" data-topic-text="vulnerability management">vulnerability management</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27487" data-expander-for="/topics/security-and-privacy/security-and-behavior"></i> <a data-topic-id="27487" data-topic-text="security & behavior">security & behavior</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27709" data-topic-text="accessibility">accessibility</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27710" data-topic-text="behavior">behavior</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27711" data-topic-text="usability">usability</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27488" data-expander-for="/topics/security-and-privacy/security-measurement"></i> <a data-topic-id="27488" data-topic-text="security measurement">security measurement</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27690" data-topic-text="analytics">analytics</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27691" data-topic-text="assurance">assurance</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27692" data-topic-text="modeling">modeling</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27693" data-topic-text="testing & validation">testing & validation</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27489" data-expander-for="/topics/security-and-privacy/security-programs-and-operations"></i> <a data-topic-id="27489" data-topic-text="security programs & operations">security programs & operations</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27694" data-topic-text="acquisition">acquisition</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27695" data-topic-text="asset management">asset management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27696" data-topic-text="audit & accountability">audit & accountability</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27697" data-topic-text="awareness training & education">awareness training & education</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27698" data-topic-text="configuration management">configuration management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27699" data-topic-text="contingency planning">contingency planning</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27700" data-topic-text="incident response">incident response</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27701" data-topic-text="maintenance">maintenance</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27702" data-topic-text="media protection">media protection</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27703" data-topic-text="patch management">patch management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27704" data-topic-text="personnel security">personnel security</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27705" data-topic-text="physical & environmental protection">physical & environmental protection</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27706" data-topic-text="planning">planning</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27707" data-topic-text="program management">program management</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27708" data-topic-text="security automation">security automation</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24670-27490" data-expander-for="/topics/security-and-privacy/systems-security-engineering"></i> <a data-topic-id="27490" data-topic-text="systems security engineering">systems security engineering</a><ul style="display: none;"><li><i class="fa fa-plus fa-fw" id="topics-expander-27490-27713" data-expander-for="/topics/security-and-privacy/systems-security-engineering/trustworthiness"></i> <a data-topic-id="27713" data-topic-text="trustworthiness">trustworthiness</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27775" data-topic-text="reliability">reliability</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27776" data-topic-text="resilience">resilience</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27777" data-topic-text="safety">safety</a></li></ul>
</li></ul>
</li></ul><strong>Technologies</strong><br/>
<ul><li><i class="fa fa-fw"></i> <a data-topic-id="27491" data-topic-text="artificial intelligence">artificial intelligence</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27492" data-topic-text="big data">big data</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27493" data-topic-text="biometrics">biometrics</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27494" data-topic-text="blockchain">blockchain</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27495" data-topic-text="cloud & virtualization">cloud & virtualization</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27496" data-topic-text="combinatorial testing">combinatorial testing</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27497" data-topic-text="complexity">complexity</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-24671-27499" data-expander-for="/topics/technologies/hardware"></i> <a data-topic-id="27499" data-topic-text="hardware">hardware</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27714" data-topic-text="circuits">circuits</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27715" data-topic-text="personal computers">personal computers</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27716" data-topic-text="sensors">sensors</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27498" data-topic-text="mobile">mobile</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-24671-27500" data-expander-for="/topics/technologies/networks"></i> <a data-topic-id="27500" data-topic-text="networks">networks</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27717" data-topic-text="email">email</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27718" data-topic-text="firewalls">firewalls</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27719" data-topic-text="internet">internet</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27501" data-topic-text="quantum information science">quantum information science</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27502" data-topic-text="servers">servers</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27503" data-topic-text="smart cards">smart cards</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-24671-27504" data-expander-for="/topics/technologies/software-firmware"></i> <a data-topic-id="27504" data-topic-text="software & firmware">software & firmware</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27720" data-topic-text="BIOS">BIOS</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27721" data-topic-text="databases">databases</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27722" data-topic-text="operating systems">operating systems</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27505" data-topic-text="storage">storage</a></li></ul></div><div class="col-sm-4"><strong>Applications</strong><br/>
<ul><li><i class="fa fa-fw"></i> <a data-topic-id="27456" data-topic-text="communications & wireless">communications & wireless</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27457" data-topic-text="cyber-physical systems">cyber-physical systems</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27458" data-topic-text="cybersecurity education">cybersecurity education</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27459" data-topic-text="cybersecurity framework">cybersecurity framework</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27460" data-topic-text="cybersecurity workforce">cybersecurity workforce</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27461" data-topic-text="enterprise">enterprise</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27462" data-topic-text="forensics">forensics</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27463" data-topic-text="industrial control systems">industrial control systems</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27464" data-topic-text="Internet of Things">Internet of Things</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="28914" data-topic-text="positioning navigation & timing">positioning navigation & timing</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27465" data-topic-text="small & medium business">small & medium business</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27466" data-topic-text="telework">telework</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27467" data-topic-text="voting">voting</a></li></ul><strong>Laws and Regulations</strong><br/>
<ul><li><i class="fa fa-plus fa-fw" id="topics-expander-24673-27468" data-expander-for="/topics/laws-and-regulations/executive-documents"></i> <a data-topic-id="27468" data-topic-text="executive documents">executive documents</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27668" data-topic-text="Comprehensive National Cybersecurity Initiative">Comprehensive National Cybersecurity Initiative</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27669" data-topic-text="Cybersecurity Strategy and Implementation Plan">Cybersecurity Strategy and Implementation Plan</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27670" data-topic-text="Cyberspace Policy Review">Cyberspace Policy Review</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27671" data-topic-text="Executive Order 13636">Executive Order 13636</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27672" data-topic-text="Executive Order 13702">Executive Order 13702</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27673" data-topic-text="Executive Order 13718">Executive Order 13718</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27674" data-topic-text="Executive Order 13800">Executive Order 13800</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="28915" data-topic-text="Executive Order 13905">Executive Order 13905</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27675" data-topic-text="Federal Cybersecurity Research and Development Strategic Plan">Federal Cybersecurity Research and Development Strategic Plan</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27676" data-topic-text="Homeland Security Presidential Directive 7">Homeland Security Presidential Directive 7</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27677" data-topic-text="Homeland Security Presidential Directive 12">Homeland Security Presidential Directive 12</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27678" data-topic-text="OMB Circular A-11">OMB Circular A-11</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27679" data-topic-text="OMB Circular A-130">OMB Circular A-130</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24673-27469" data-expander-for="/topics/laws-and-regulations/laws"></i> <a data-topic-id="27469" data-topic-text="laws">laws</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27654" data-topic-text="Cyber Security R&D Act">Cyber Security R&D Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27655" data-topic-text="Cybersecurity Enhancement Act">Cybersecurity Enhancement Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27656" data-topic-text="E-Government Act">E-Government Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27657" data-topic-text="Energy Independence and Security Act">Energy Independence and Security Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27658" data-topic-text="Federal Information Security Modernization Act">Federal Information Security Modernization Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27659" data-topic-text="First Responder Network Authority">First Responder Network Authority</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27660" data-topic-text="Health Insurance Portability and Accountability Act">Health Insurance Portability and Accountability Act</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27661" data-topic-text="Help America Vote Act">Help America Vote Act</a></li></ul>
</li><li><i class="fa fa-plus fa-fw" id="topics-expander-24673-27470" data-expander-for="/topics/laws-and-regulations/regulations"></i> <a data-topic-id="27470" data-topic-text="regulations">regulations</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27662" data-topic-text="Federal Acquisition Regulation">Federal Acquisition Regulation</a></li></ul>
</li></ul></div><div class="col-sm-4"><strong>Activities and Products</strong><br/>
<ul><li><i class="fa fa-fw"></i> <a data-topic-id="27452" data-topic-text="annual reports">annual reports</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27453" data-topic-text="conferences & workshops">conferences & workshops</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27454" data-topic-text="reference materials">reference materials</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27455" data-topic-text="standards development">standards development</a></li></ul><strong>Sectors</strong><br/>
<ul><li><i class="fa fa-fw"></i> <a data-topic-id="27471" data-topic-text="aerospace">aerospace</a></li><li><i class="fa fa-plus fa-fw" id="topics-expander-24675-27472" data-expander-for="/topics/sectors/energy"></i> <a data-topic-id="27472" data-topic-text="energy">energy</a><ul style="display: none;"><li><i class="fa fa-fw"></i> <a data-topic-id="27712" data-topic-text="smart grid">smart grid</a></li></ul>
</li><li><i class="fa fa-fw"></i> <a data-topic-id="27473" data-topic-text="financial services">financial services</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27474" data-topic-text="healthcare">healthcare</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27475" data-topic-text="hospitality">hospitality</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27476" data-topic-text="manufacturing">manufacturing</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27477" data-topic-text="public safety">public safety</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27478" data-topic-text="retail">retail</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27479" data-topic-text="telecommunications">telecommunications</a></li><li><i class="fa fa-fw"></i> <a data-topic-id="27480" data-topic-text="transportation">transportation</a></li></ul></div></div>
            <div class="form-inline topics-type">
                <label class="radio-label">Match ANY: <input Name="topicsMatch-sm" checked="checked" id="topicsMatch-any-sm" name="Form.TopicsMatch" type="radio" value="ANY" /></label>
                <label class="radio-label">Match ALL: <input Name="topicsMatch-sm" id="topicsMatch-all-sm" name="Form.TopicsMatch" type="radio" value="ALL" /></label>
            </div>
        </div>
        <div class="form-group">
            <label for="pub-search-controls-sm">
                Control Family (800-53)
            </label>
            <input Name="controls-sm" id="controls-sm" name="Form.Controls" type="hidden" value="" />
            <div class="form-control controls-selection"
                 id="pub-search-controls-sm"
                 contenteditable="true"
                 data-drop-target="pub-search-controls-drop-sm"
                 data-field-name="controls-sm"
                 aria-haspopup="true"
                 aria-expanded="false">
            </div>
            <div class="controls-selection-dropdown desktop" id="pub-search-controls-drop-sm" style="display: none;" data-controls-selector="">
                <strong>Control Families</strong>
                <ul>
                        <li><a data-control-id="63d54ae4-c6cf-4ae4-a398-f19298c74903">AC - Access Control</a></li>
                        <li><a data-control-id="36fb0b10-f6ae-4e0e-803c-bece9c947fd8">AT - Awareness and Training</a></li>
                        <li><a data-control-id="4243d52c-ff5e-417b-8e1b-8344ff811570">AU - Audit and Accountability</a></li>
                        <li><a data-control-id="0d93bf29-4551-4b7d-9677-23d0eb0524e0">CA - Assessment, Authorization and Monitoring</a></li>
                        <li><a data-control-id="809b7563-f050-4bbf-a0e4-7ad25411734d">CM - Configuration Management</a></li>
                        <li><a data-control-id="da51be5c-b86d-4e32-9484-f94cf75b8217">CP - Contingency Planning</a></li>
                        <li><a data-control-id="ed87a12a-b75a-4555-862c-52f071b7ddb0">IA - Identification and Authentication</a></li>
                        <li><a data-control-id="4801756a-a4ed-4b64-8890-4169d9b6a9ce">IR - Incident Response</a></li>
                        <li><a data-control-id="88089d1d-c115-41f7-92ad-a84abe6101fc">MA - Maintenance</a></li>
                        <li><a data-control-id="3fb9de77-cb37-43fd-b8a5-e33576b8caa1">MP - Media Protection</a></li>
                        <li><a data-control-id="f3b91e7e-2498-49ce-bd0f-5b9ce3bbd9e0">PE - Physical and Environmental Protection</a></li>
                        <li><a data-control-id="641492d1-d2da-40e6-a523-f93fdb5358e9">PL - Planning</a></li>
                        <li><a data-control-id="9d2a46b6-2530-4266-ae75-dab3ea78d7a0">PM - Program Management</a></li>
                        <li><a data-control-id="205e7cff-23a5-4b59-85bc-168ae6e7d95f">PS - Personnel Security</a></li>
                        <li><a data-control-id="09385da5-c3cd-4dcf-91e9-fd455b0ef704">PT - PII Processing and Transparency</a></li>
                        <li><a data-control-id="e08f7835-ea6b-4b7c-9db3-33a3662a38d1">RA - Risk Assessment</a></li>
                        <li><a data-control-id="8e2ea53d-c53d-480e-b374-eb5ab055a94b">SA - System and Services Acquisition</a></li>
                        <li><a data-control-id="f35646b1-d701-4941-b1c5-8e872f6bb812">SC - System and Communications Protection</a></li>
                        <li><a data-control-id="660d9ce0-9cfe-4f5e-890a-41670d010846">SI - System and Information Integrity</a></li>
                        <li><a data-control-id="605d44df-5027-4c32-a228-c000bbcac173">SR - Supply Chain Risk Management</a></li>
                </ul>
            </div>
            <div class="form-inline controls-type">
                <label class="radio-label">Match ANY: <input Name="controlsMatch-sm" checked="checked" id="controlsMatch-any-sm" name="Form.ControlsMatch" type="radio" value="ANY" /></label>
                <label class="radio-label">Match ALL: <input Name="controlsMatch-sm" id="controlsMatch-all-sm" name="Form.ControlsMatch" type="radio" value="ALL" /></label>
            </div>
        </div>
    </div>
    <div style="display: none;" data-form-error-pane="true" class="text-danger">
        <strong class="text-danger">Please fix the following:</strong>
        <ul data-form-error-list="true">
        </ul>
        <div class="validation-summary-valid" data-valmsg-summary="true"><ul><li style="display:none"></li>
</ul></div>
    </div>
    <div class="form-group">
        <button type="submit" id="pubs-search-submit-sm" name="submit-btn" data-form-button="submit" class="btn">Search</button>
        <button type="reset" id="pubs-search-reset-sm" name="reset-btn" data-form-button="reset" class="btn">Reset</button>
    </div>
    <span style="display: none;" id="publications-status-info">
        <p><strong>Final:</strong> Published documents.</p>

        <p><strong>Public Draft:</strong>  Documents have been posted as Public Drafts, typically with a public comment period.</p>

        <p>
            <strong>Withdrawn:</strong> Documents that have been withdrawn, and are no longer current. This includes:<br />
            - Final publications that have been withdrawn;<br />
            - Public drafts that have been obsoleted by a subsequent draft or final publication;<br />
            - Public drafts that have been retired—further development was discontinued.
        </p>
    </span>
</form>

    <div id="search-criteria-container" data-target-form="pubSearchDesktop"></div>
        <div class="row top-pagination-area">
            <div class="col-lg-6 col-sm-12">
                <span id='showing-results-text' data-total-pages='47' data-first-record='1' data-last-record='25' data-current-page='1' data-items-per-page='25' data-total-results='1156'>Showing <strong id='showing-results-first'>1</strong> through <strong id='showing-results-last'>25</strong> of <strong id='showing-results-total'>1156</strong> matching records.</span>
            </div>
            <div class="col-lg-6 col-sm-12">
                <span class="pull-right hidden-sm hidden-xs hidden-xxs">
                    <span class='pagination-links' id='top-pagination-container' data-total-pages='47' data-min-page='1' data-max-page='10' data-current-page='1' data-show-first='False' data-show-last='True'><strong aria-label="Page 1" id="top-page-1">1</strong> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=2" aria-label="Page 2" id="top-page-2">2</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=3" aria-label="Page 3" id="top-page-3">3</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=4" aria-label="Page 4" id="top-page-4">4</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=5" aria-label="Page 5" id="top-page-5">5</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=6" aria-label="Page 6" id="top-page-6">6</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=7" aria-label="Page 7" id="top-page-7">7</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=8" aria-label="Page 8" id="top-page-8">8</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=9" aria-label="Page 9" id="top-page-9">9</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=10" aria-label="Page 10" id="top-page-10">10</a>&nbsp;&nbsp;<a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=2" aria-label="Next Page" id="top-page-next">&gt;</a>&nbsp;&nbsp;<a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=47" aria-label="Last Page" id="top-page-last" data-last-page-number="47">&gt;&gt;</a></span>
                </span>
                <p class="text-center hidden-md hidden-lg">
                    <span class='pagination-links' id='mobile-top-pagination-container' data-total-pages='47' data-min-page='1' data-max-page='10' data-current-page='1' data-show-first='False' data-show-last='True'><strong aria-label="Page 1" id="mobile-top-page-1">1</strong> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=2" aria-label="Page 2" id="mobile-top-page-2">2</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=3" aria-label="Page 3" id="mobile-top-page-3">3</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=4" aria-label="Page 4" id="mobile-top-page-4">4</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=5" aria-label="Page 5" id="mobile-top-page-5">5</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=6" aria-label="Page 6" id="mobile-top-page-6">6</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=7" aria-label="Page 7" id="mobile-top-page-7">7</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=8" aria-label="Page 8" id="mobile-top-page-8">8</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=9" aria-label="Page 9" id="mobile-top-page-9">9</a> |  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=10" aria-label="Page 10" id="mobile-top-page-10">10</a>&nbsp;&nbsp;<a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=2" aria-label="Next Page" id="mobile-top-page-next">&gt;</a>&nbsp;&nbsp;<a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=47" aria-label="Last Page" id="mobile-top-page-last" data-last-page-number="47">&gt;&gt;</a></span>
                </p>
            </div>
        </div>
    <table class="table table-striped table-condensed publications-table table-bordered"
           id="publications-results-table"
           data-total-records="1156"
           data-page="1" data-first-record="1"
           data-last-record="25" data-ipp="25">
        <thead>
            <tr>
                <th nowrap class="hidden-sm hidden-xs hidden-xxs">Series</th>
                <th nowrap class="hidden-sm hidden-xs hidden-xxs">Number</th>
                <th nowrap>
                    <span class="hidden-sm hidden-xs hidden-xxs">Title</span>
                    <span class="hidden-md hidden-lg">Publications</span>
                </th>
                <th nowrap class="hidden-sm hidden-xs hidden-xxs">Status</th>
                <th nowrap class="hidden-sm hidden-xs hidden-xxs">Release Date</th>
            </tr>
        </thead>
        <tbody>
                <tr id="result-1">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-1">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-1"> 1800-21</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-21/archive/2019-07-22" id="pub-title-link-1">Mobile Device Security: Corporate-Owned Personally-Enabled (COPE)</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-1">SP 1800-21 (Draft)</span><br />
                                <a href="/publications/detail/sp/1800-21/archive/2019-07-22" class="mobile-pub-title" id="pub-title-link-sm-1">Mobile Device Security: Corporate-Owned Personally-Enabled (COPE)</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-1">7/22/2019</strong>
                            <br />
                            Status: <span id="pub-status-sm-1">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-1">
                                            <span id='download-value-1-0'>
                                                <a href="https://www.nccoe.nist.gov/sites/default/files/library/sp1800/mdse-nist-sp1800-21-draft.pdf">Draft 1800-21</a>; 
                                            </span>
                                            <span id='download-value-1-1'>
                                                <a href="https://www.nccoe.nist.gov/projects/building-blocks/mobile-device-security/corporate-owned-personally-enabled">Project Homepage</a>; 
                                            </span>
                                            <span id='download-value-1-2'>
                                                <a href="https://www.nccoe.nist.gov/webform/comments-sp-1800-21-mobile-device-security-corporate-owned-personally-enabled-cope">Submit Comments</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-1">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-1">
                        7/22/2019
                    </td>
                </tr>
                <tr id="result-2">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-2">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-2"> 1800-12</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-12/archive/2018-08-02" id="pub-title-link-2">Derived Personal Identity Verification (PIV) Credentials (2nd Draft)</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-2">SP 1800-12 (Draft)</span><br />
                                <a href="/publications/detail/sp/1800-12/archive/2018-08-02" class="mobile-pub-title" id="pub-title-link-sm-2">Derived Personal Identity Verification (PIV) Credentials (2nd Draft)</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-2">8/02/2018</strong>
                            <br />
                            Status: <span id="pub-status-sm-2">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-2">
                                            <span id='download-value-2-0'>
                                                <a href="https://nccoe.nist.gov/projects/building-blocks/piv-credentials">Draft SP 1800-12 volumes and Project Homepage</a>; 
                                            </span>
                                            <span id='download-value-2-1'>
                                                <a href="https://www.nccoe.nist.gov/webform/comments-second-draft-sp-1800-12-derived-piv-credentials">Submit Comments</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-2">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-2">
                        8/02/2018
                    </td>
                </tr>
                <tr id="result-3">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-3">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-3"> 1800-12</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-12/archive/2017-09-29" id="pub-title-link-3">Derived Personal Identity Verification (PIV) Credentials</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-3">SP 1800-12 (Draft)</span><br />
                                <a href="/publications/detail/sp/1800-12/archive/2017-09-29" class="mobile-pub-title" id="pub-title-link-sm-3">Derived Personal Identity Verification (PIV) Credentials</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-3">9/29/2017</strong>
                            <br />
                            Status: <span id="pub-status-sm-3">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-3">
                                            <span id='download-value-3-0'>
                                                <a href="https://nccoe.nist.gov/projects/building-blocks/piv-credentials">Draft SP 1800-12 volumes and Project Homepage</a>; 
                                            </span>
                                            <span id='download-value-3-1'>
                                                <a href="https://nccoe.nist.gov/webform/comments-sp-1800-12-derived-piv-credentials">Submit Comments</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-3">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-3">
                        9/29/2017
                    </td>
                </tr>
                <tr id="result-4">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-4">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-4"> 1800-13</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-13/archive/2018-04-16" id="pub-title-link-4">Mobile Application Single Sign-On: Improving Authentication for Public Safety and First Responders</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-4">SP 1800-13 (Draft)</span><br />
                                <a href="/publications/detail/sp/1800-13/archive/2018-04-16" class="mobile-pub-title" id="pub-title-link-sm-4">Mobile Application Single Sign-On: Improving Authentication for Public Safety and First Responders</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-4">4/16/2018</strong>
                            <br />
                            Status: <span id="pub-status-sm-4">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-4">
                                            <span id='download-value-4-0'>
                                                <a href="https://www.nccoe.nist.gov/projects/use-cases/mobile-sso">Draft SP 1800-13 volumes and Project Homepage</a>; 
                                            </span>
                                            <span id='download-value-4-1'>
                                                <a href="https://www.nccoe.nist.gov/webform/comments-sp-1800-13-mobile-application-single-sign">Submit Comments</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-4">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-4">
                        4/16/2018
                    </td>
                </tr>
                <tr id="result-5">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-5">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-5"> 1800-21</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-21/final" id="pub-title-link-5">Mobile Device Security: Corporate-Owned Personally-Enabled (COPE)</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-5">SP 1800-21</span><br />
                                <a href="/publications/detail/sp/1800-21/final" class="mobile-pub-title" id="pub-title-link-sm-5">Mobile Device Security: Corporate-Owned Personally-Enabled (COPE)</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-5">9/15/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-5">Final</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-5">
                                            <span id='download-value-5-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.1800-21">SP 1800-21 (DOI)</a>; 
                                            </span>
                                            <span id='download-value-5-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.1800-21.pdf">Local Download</a>; 
                                            </span>
                                            <span id='download-value-5-2'>
                                                <a href="https://www.nccoe.nist.gov/projects/building-blocks/mobile-device-security/corporate-owned-personally-enabled">SP 1800-21 volumes and Project Homepage</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-5">
                        Final
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-5">
                        9/15/2020
                    </td>
                </tr>
                <tr id="result-6">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-6">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-6"> 1800-12</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-12/final" id="pub-title-link-6">Derived Personal Identity Verification (PIV) Credentials</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-6">SP 1800-12</span><br />
                                <a href="/publications/detail/sp/1800-12/final" class="mobile-pub-title" id="pub-title-link-sm-6">Derived Personal Identity Verification (PIV) Credentials</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-6">8/27/2019</strong>
                            <br />
                            Status: <span id="pub-status-sm-6">Final</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-6">
                                            <span id='download-value-6-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.1800-12">SP 1800-12 (DOI)</a>; 
                                            </span>
                                            <span id='download-value-6-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.1800-12.pdf">Local Download</a>; 
                                            </span>
                                            <span id='download-value-6-2'>
                                                <a href="https://www.nccoe.nist.gov/publication/1800-12/">Web version</a>; 
                                            </span>
                                            <span id='download-value-6-3'>
                                                <a href="https://nccoe.nist.gov/projects/building-blocks/piv-credentials">Project Homepage</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-6">
                        Final
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-6">
                        8/27/2019
                    </td>
                </tr>
                <tr id="result-7">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-7">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-7"> 1800-4</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-4/final" id="pub-title-link-7">Mobile Device Security: Cloud and Hybrid Builds</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-7">SP 1800-4</span><br />
                                <a href="/publications/detail/sp/1800-4/final" class="mobile-pub-title" id="pub-title-link-sm-7">Mobile Device Security: Cloud and Hybrid Builds</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-7">2/21/2019</strong>
                            <br />
                            Status: <span id="pub-status-sm-7">Final</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-7">
                                            <span id='download-value-7-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.1800-4">SP 1800-4 (DOI)</a>; 
                                            </span>
                                            <span id='download-value-7-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.1800-4.pdf">Local Download</a>; 
                                            </span>
                                            <span id='download-value-7-2'>
                                                <a href="https://www.nccoe.nist.gov/publication/1800-4/">Web version</a>; 
                                            </span>
                                            <span id='download-value-7-3'>
                                                <a href="https://nccoe.nist.gov/projects/building_blocks/mobile_device_security">Project Homepage</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-7">
                        Final
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-7">
                        2/21/2019
                    </td>
                </tr>
                <tr id="result-8">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-8">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-8"> 1800-30</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-30/archive/2020-11-16" id="pub-title-link-8">Securing Telehealth Remote Patient Monitoring Ecosystem</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-8">SP 1800-30 (Draft)</span><br />
                                <a href="/publications/detail/sp/1800-30/archive/2020-11-16" class="mobile-pub-title" id="pub-title-link-sm-8">Securing Telehealth Remote Patient Monitoring Ecosystem</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-8">11/16/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-8">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-8">
                                            <span id='download-value-8-0'>
                                                <a href="https://www.nccoe.nist.gov/sites/default/files/library/sp1800/rpm-nist-sp1800-30-draft.pdf">Draft SP 1800-30</a>; 
                                            </span>
                                            <span id='download-value-8-1'>
                                                <a href="https://www.nccoe.nist.gov/projects/use-cases/health-it/telehealth">Project homepage</a>; 
                                            </span>
                                            <span id='download-value-8-2'>
                                                <a href="https://www.nccoe.nist.gov/webform/comments-draft-sp-1800-30-securing-telehealth-remote-patient-monitoring-ecosystem">Submit comments</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-8">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-8">
                        11/16/2020
                    </td>
                </tr>
                <tr id="result-9">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-9">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-9"> 800-53B</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-53b/archive/2020-10-29" id="pub-title-link-9">Control Baselines for Information Systems and Organizations</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-9">SP 800-53B (Withdrawn)</span><br />
                                <a href="/publications/detail/sp/800-53b/archive/2020-10-29" class="mobile-pub-title" id="pub-title-link-sm-9">Control Baselines for Information Systems and Organizations</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-9">10/29/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-9">Withdrawn</span>
                        </div>

                        <div class="control-value-no-block">
                                Download: <span id='download-values-9'>None available</span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-9">
                        Withdrawn
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-9">
                        10/29/2020
                    </td>
                </tr>
                <tr id="result-10">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-10">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-10"> 1800-27</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-27/archive/2020-09-14" id="pub-title-link-10">Securing Property Management Systems</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-10">SP 1800-27 (Draft)</span><br />
                                <a href="/publications/detail/sp/1800-27/archive/2020-09-14" class="mobile-pub-title" id="pub-title-link-sm-10">Securing Property Management Systems</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-10">9/14/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-10">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-10">
                                            <span id='download-value-10-0'>
                                                <a href="https://www.nccoe.nist.gov/sites/default/files/library/sp1800/hosp-nist-sp1800-27-draft.pdf">Draft SP 1800-27</a>; 
                                            </span>
                                            <span id='download-value-10-1'>
                                                <a href="https://www.nccoe.nist.gov/projects/use-cases/securing-property-management-systems">Project Homepage</a>; 
                                            </span>
                                            <span id='download-value-10-2'>
                                                <a href="https://www.nccoe.nist.gov/webform/comments-draft-sp-1800-27-securing-property-management-systems">Submit Comments</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-10">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-10">
                        9/14/2020
                    </td>
                </tr>
                <tr id="result-11">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-11">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-11"> 800-53B</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-53b/archive/2020-07-31" id="pub-title-link-11">Control Baselines for Information Systems and Organizations</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-11">SP 800-53B (Draft)</span><br />
                                <a href="/publications/detail/sp/800-53b/archive/2020-07-31" class="mobile-pub-title" id="pub-title-link-sm-11">Control Baselines for Information Systems and Organizations</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-11">7/31/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-11">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-11">
                                            <span id='download-value-11-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-53B-draft">SP 800-53B (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-11-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53B-draft.pdf">Local Download</a>; 
                                            </span>
                                            <span id='download-value-11-2'>
                                                <a href="/CSRC/media/Publications/sp/800-53b/draft/documents/sp800-53B-draft-comment-template.xlsx">Comment template</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-11">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-11">
                        7/31/2020
                    </td>
                </tr>
                <tr id="result-12">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-12">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-12"> 800-209</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-209/archive/2020-07-21" id="pub-title-link-12">Security Guidelines for Storage Infrastructure</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-12">SP 800-209 (Draft)</span><br />
                                <a href="/publications/detail/sp/800-209/archive/2020-07-21" class="mobile-pub-title" id="pub-title-link-sm-12">Security Guidelines for Storage Infrastructure</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-12">7/21/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-12">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-12">
                                            <span id='download-value-12-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-209-draft">SP 800-209 (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-12-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-209-draft.pdf">Local Download</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-12">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-12">
                        7/21/2020
                    </td>
                </tr>
                <tr id="result-13">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-13">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-13"> 800-181 Rev. 1</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-181/rev-1/archive/2020-07-15" id="pub-title-link-13">Workforce Framework for Cybersecurity (NICE Framework)</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-13">SP 800-181 Rev. 1 (Draft)</span><br />
                                <a href="/publications/detail/sp/800-181/rev-1/archive/2020-07-15" class="mobile-pub-title" id="pub-title-link-sm-13">Workforce Framework for Cybersecurity (NICE Framework)</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-13">7/15/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-13">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-13">
                                            <span id='download-value-13-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-181r1-draft">SP 800-181 Rev. 1 (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-13-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-181r1-draft.pdf">Local Download</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-13">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-13">
                        7/15/2020
                    </td>
                </tr>
                <tr id="result-14">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-14">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-14"> 800-172</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-172/archive/2020-07-06" id="pub-title-link-14">Enhanced Security Requirements for Protecting Controlled Unclassified Information: A Supplement to NIST Special Publication 800-171 (Final Public Draft)</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-14">SP 800-172 (Draft)</span><br />
                                <a href="/publications/detail/sp/800-172/archive/2020-07-06" class="mobile-pub-title" id="pub-title-link-sm-14">Enhanced Security Requirements for Protecting Controlled Unclassified Information: A Supplement to NIST Special Publication 800-171 (Final Public Draft)</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-14">7/06/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-14">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-14">
                                            <span id='download-value-14-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-172-draft">SP 800-172 (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-14-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-172-draft.pdf">Local Download</a>; 
                                            </span>
                                            <span id='download-value-14-2'>
                                                <a href="/CSRC/media/Publications/sp/800-172/draft/documents/sp800-172-draft-fpd-comment-template.xlsx">Comment template</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-14">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-14">
                        7/06/2020
                    </td>
                </tr>
                <tr id="result-15">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-15">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-15"> 800-210</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-210/archive/2020-04-01" id="pub-title-link-15">General Access Control Guidance for Cloud Systems</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-15">SP 800-210 (Draft)</span><br />
                                <a href="/publications/detail/sp/800-210/archive/2020-04-01" class="mobile-pub-title" id="pub-title-link-sm-15">General Access Control Guidance for Cloud Systems</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-15">4/01/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-15">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-15">
                                            <span id='download-value-15-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-210-draft">SP 800-210 (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-15-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-210-draft.pdf">Local Download</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-15">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-15">
                        4/01/2020
                    </td>
                </tr>
                <tr id="result-16">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-16">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-16"> 800-56C Rev. 2</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-56c/rev-2/archive/2020-03-24" id="pub-title-link-16">Recommendation for Key-Derivation Methods in Key-Establishment Schemes</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-16">SP 800-56C Rev. 2 (Draft)</span><br />
                                <a href="/publications/detail/sp/800-56c/rev-2/archive/2020-03-24" class="mobile-pub-title" id="pub-title-link-sm-16">Recommendation for Key-Derivation Methods in Key-Establishment Schemes</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-16">3/24/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-16">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-16">
                                            <span id='download-value-16-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-56Cr2-draft">SP 800-56C Rev. 2 (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-16-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2-draft.pdf">Local Download</a>; 
                                            </span>
                                            <span id='download-value-16-2'>
                                                <a href="/CSRC/media/Publications/sp/800-56c/rev-2/draft/documents/sp800-56Cr2-draft-comments-received.pdf">Comments received on Draft SP 800-56C Rev. 2</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-16">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-16">
                        3/24/2020
                    </td>
                </tr>
                <tr id="result-17">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-17">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-17"> 800-53 Rev. 5</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-53/rev-5/archive/2020-03-16" id="pub-title-link-17">Security and Privacy Controls for Information Systems and Organizations (Final Public Draft)</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-17">SP 800-53 Rev. 5 (Draft)</span><br />
                                <a href="/publications/detail/sp/800-53/rev-5/archive/2020-03-16" class="mobile-pub-title" id="pub-title-link-sm-17">Security and Privacy Controls for Information Systems and Organizations (Final Public Draft)</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-17">3/16/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-17">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-17">
                                            <span id='download-value-17-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-53r5-draft">SP 800-53 Rev. 5 (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-17-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5-draft.pdf">Local Download</a>; 
                                            </span>
                                            <span id='download-value-17-2'>
                                                <a href="/CSRC/media/Publications/sp/800-53/rev-5/draft/documents/sp800-53r5-draft-fpd-comment-template.xlsx">Comment template</a>; 
                                            </span>
                                            <span id='download-value-17-3'>
                                                <a href="/CSRC/media/Publications/sp/800-53/rev-5/draft/documents/sp800-53r5-draft-fpd-summary-of-significant-changes.pdf">Summary: Significant Changes from Rev. 4</a>; 
                                            </span>
                                            <span id='download-value-17-4'>
                                                <a href="/CSRC/media/Publications/sp/800-53/rev-5/draft/documents/sp800-53r5-draft-fpd-comparison-with-rev4.xlsx">Comparison of Revs. 4 and 5, authored by MITRE Corp. for ODNI</a>; 
                                            </span>
                                            <span id='download-value-17-5'>
                                                <a href="https://github.com/usnistgov/OSCAL/tree/master/content/nist.gov/SP800-53">OSCAL version of 800-53 FPD controls</a>; 
                                            </span>
                                            <span id='download-value-17-6'>
                                                <a href="/CSRC/media/Publications/sp/800-53/rev-5/draft/documents/sp800-53r5-fpd-controls.xlsx">Spreadsheet version of 800-53 FPD controls</a>; 
                                            </span>
                                            <span id='download-value-17-7'>
                                                <a href="https://www.nist.gov/news-events/news/2020/03/nist-updates-and-expands-its-flagship-catalog-information-system-safeguards">NIST news article</a>; 
                                            </span>
                                            <span id='download-value-17-8'>
                                                <a href="/CSRC/media/Publications/sp/800-53/rev-5/draft/documents/sp800-53r5-draft-fpd-faq.pdf">Frequently Asked Questions</a>; 
                                            </span>
                                            <span id='download-value-17-9'>
                                                <a href="https://csrc.nist.gov/Projects/risk-management/faqs#F1qf">Frequently Asked Questions</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-17">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-17">
                        3/16/2020
                    </td>
                </tr>
                <tr id="result-18">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-18">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-18"> 800-133 Rev. 2</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-133/rev-2/archive/2020-03-05" id="pub-title-link-18">Recommendation for Cryptographic Key Generation</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-18">SP 800-133 Rev. 2 (Draft)</span><br />
                                <a href="/publications/detail/sp/800-133/rev-2/archive/2020-03-05" class="mobile-pub-title" id="pub-title-link-sm-18">Recommendation for Cryptographic Key Generation</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-18">3/05/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-18">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-18">
                                            <span id='download-value-18-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-133r2-draft">SP 800-133 Rev. 2 (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-18-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-133r2-draft.pdf">Local Download</a>; 
                                            </span>
                                            <span id='download-value-18-2'>
                                                <a href="/CSRC/media/Publications/sp/800-133/rev-2/draft/sp800-133r2-draft-comments-received.pdf">Comments received</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-18">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-18">
                        3/05/2020
                    </td>
                </tr>
                <tr id="result-19">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-19">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-19"> 800-171 Rev. 2</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-171/rev-2/archive/2020-02-21" id="pub-title-link-19">Protecting Controlled Unclassified Information in Nonfederal Systems and Organizations</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-19">SP 800-171 Rev. 2 (Withdrawn)</span><br />
                                <a href="/publications/detail/sp/800-171/rev-2/archive/2020-02-21" class="mobile-pub-title" id="pub-title-link-sm-19">Protecting Controlled Unclassified Information in Nonfederal Systems and Organizations</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-19">2/21/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-19">Withdrawn</span>
                        </div>

                        <div class="control-value-no-block">
                                Download: <span id='download-values-19'>None available</span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-19">
                        Withdrawn
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-19">
                        2/21/2020
                    </td>
                </tr>
                <tr id="result-20">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-20">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-20"> 800-207</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-207/archive/2020-02-13" id="pub-title-link-20">Zero Trust Architecture (2nd Draft)</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-20">SP 800-207 (Draft)</span><br />
                                <a href="/publications/detail/sp/800-207/archive/2020-02-13" class="mobile-pub-title" id="pub-title-link-sm-20">Zero Trust Architecture (2nd Draft)</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-20">2/13/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-20">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-20">
                                            <span id='download-value-20-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-207-draft2">SP 800-207 (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-20-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-207-draft2.pdf">Local Download</a>; 
                                            </span>
                                            <span id='download-value-20-2'>
                                                <a href="/CSRC/media/Publications/sp/800-207/draft/documents/sp800-207-draft2-comment-template.xlsx">Comment template</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-20">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-20">
                        2/13/2020
                    </td>
                </tr>
                <tr id="result-21">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-21">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-21"> 800-161 Rev. 1</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-161/rev-1/archive/2020-02-04" id="pub-title-link-21">PRE-DRAFT Call for Comments: Supply Chain Risk Management Practices for Federal Information Systems and Organizations</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-21">SP 800-161 Rev. 1 (Draft)</span><br />
                                <a href="/publications/detail/sp/800-161/rev-1/archive/2020-02-04" class="mobile-pub-title" id="pub-title-link-sm-21">PRE-DRAFT Call for Comments: Supply Chain Risk Management Practices for Federal Information Systems and Organizations</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-21">2/04/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-21">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                Download: <span id='download-values-21'>None available</span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-21">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-21">
                        2/04/2020
                    </td>
                </tr>
                <tr id="result-22">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-22">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-22"> 1800-25</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-25/archive/2020-01-27" id="pub-title-link-22">Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-22">SP 1800-25 (Draft)</span><br />
                                <a href="/publications/detail/sp/1800-25/archive/2020-01-27" class="mobile-pub-title" id="pub-title-link-sm-22">Data Integrity: Identifying and Protecting Assets Against Ransomware and Other Destructive Events</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-22">1/27/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-22">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-22">
                                            <span id='download-value-22-0'>
                                                <a href="https://www.nccoe.nist.gov/sites/default/files/library/sp1800/di-identity-protect-nist-sp1800-25-draft.pdf">Draft SP 1800-25</a>; 
                                            </span>
                                            <span id='download-value-22-1'>
                                                <a href="https://www.nccoe.nist.gov/projects/building-blocks/data-integrity/identify-protect">Project Homepage</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-22">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-22">
                        1/27/2020
                    </td>
                </tr>
                <tr id="result-23">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-23">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-23"> 1800-26</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/1800-26/archive/2020-01-27" id="pub-title-link-23">Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-23">SP 1800-26 (Draft)</span><br />
                                <a href="/publications/detail/sp/1800-26/archive/2020-01-27" class="mobile-pub-title" id="pub-title-link-sm-23">Data Integrity: Detecting and Responding to Ransomware and Other Destructive Events</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-23">1/27/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-23">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-23">
                                            <span id='download-value-23-0'>
                                                <a href="https://www.nccoe.nist.gov/sites/default/files/library/sp1800/di-detect-respond-nist-sp1800-26-draft.pdf">Draft SP 1800-26</a>; 
                                            </span>
                                            <span id='download-value-23-1'>
                                                <a href="https://www.nccoe.nist.gov/projects/building-blocks/data-integrity/detect-respond">Project Homepage</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-23">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-23">
                        1/27/2020
                    </td>
                </tr>
                <tr id="result-24">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-24">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-24"> 800-204A</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-204a/archive/2020-01-17" id="pub-title-link-24">Building Secure Microservices-based Applications Using Service-Mesh Architecture</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-24">SP 800-204A (Draft)</span><br />
                                <a href="/publications/detail/sp/800-204a/archive/2020-01-17" class="mobile-pub-title" id="pub-title-link-sm-24">Building Secure Microservices-based Applications Using Service-Mesh Architecture</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-24">1/17/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-24">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-24">
                                            <span id='download-value-24-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-204A-draft">SP 800-204A (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-24-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204A-draft.pdf">Local Download</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-24">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-24">
                        1/17/2020
                    </td>
                </tr>
                <tr id="result-25">
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-series-25">SP</td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-number-25"> 800-137A</td>
                    <td>

                        <div class="hidden-sm hidden-xs hidden-xxs">
                            <strong><a href="/publications/detail/sp/800-137a/archive/2020-01-13" id="pub-title-link-25">Assessing Information Security Continuous Monitoring (ISCM) Programs: Developing an ISCM Program Assessment</a></strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong>
                                <span id="pub-full-display-sm-25">SP 800-137A (Draft)</span><br />
                                <a href="/publications/detail/sp/800-137a/archive/2020-01-13" class="mobile-pub-title" id="pub-title-link-sm-25">Assessing Information Security Continuous Monitoring (ISCM) Programs: Developing an ISCM Program Assessment</a>
                            </strong>
                        </div>

                        <div class="hidden-md hidden-lg">
                            <strong id="pub-release-date-sm-25">1/13/2020</strong>
                            <br />
                            Status: <span id="pub-status-sm-25">Draft (Obsolete)</span>
                        </div>

                        <div class="control-value-no-block">
                                <span>
                                    Download:
                                    <span id="download-values-25">
                                            <span id='download-value-25-0'>
                                                <a href="https://doi.org/10.6028/NIST.SP.800-137A-draft">SP 800-137A (Draft) (DOI)</a>; 
                                            </span>
                                            <span id='download-value-25-1'>
                                                <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-137A-draft.pdf">Local Download</a>; 
                                            </span>
                                            <span id='download-value-25-2'>
                                                <a href="/CSRC/media/Publications/sp/800-137a/draft/documents/draft-sp800-137a-element-catalog.xlsx">Element Catalog for Draft SP 800-137A</a>; 
                                            </span>
                                            <span id='download-value-25-3'>
                                                <a href="/CSRC/media/Publications/sp/800-137a/draft/documents/sp800-137a-draft-comment-template.xlsx">Comment template</a>
                                            </span>
                                    </span>
                                </span>
                        </div>
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-status-25">
                        Draft (Obsolete)
                    </td>
                    <td class="hidden-sm hidden-xs hidden-xxs" id="pub-release-date-25">
                        1/13/2020
                    </td>
                </tr>
        </tbody>
    </table>
        <div class="row bottom-pagination-area">
            <p class="text-center">
                <span class='pagination-links' id='bottom-pagination-container' data-total-pages='47' data-min-page='1' data-max-page='10' data-current-page='1' data-show-first='False' data-show-last='True'><strong aria-label="Page 1" id="bottom-page-1">1</strong> &nbsp;&nbsp;&nbsp;  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=2" aria-label="Page 2" id="bottom-page-2">2</a> &nbsp;&nbsp;&nbsp;  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=3" aria-label="Page 3" id="bottom-page-3">3</a> &nbsp;&nbsp;&nbsp;  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=4" aria-label="Page 4" id="bottom-page-4">4</a> &nbsp;&nbsp;&nbsp;  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=5" aria-label="Page 5" id="bottom-page-5">5</a> &nbsp;&nbsp;&nbsp;  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=6" aria-label="Page 6" id="bottom-page-6">6</a> &nbsp;&nbsp;&nbsp;  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=7" aria-label="Page 7" id="bottom-page-7">7</a> &nbsp;&nbsp;&nbsp;  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=8" aria-label="Page 8" id="bottom-page-8">8</a> &nbsp;&nbsp;&nbsp;  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=9" aria-label="Page 9" id="bottom-page-9">9</a> &nbsp;&nbsp;&nbsp;  <a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=10" aria-label="Page 10" id="bottom-page-10">10</a>&nbsp;&nbsp;<a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=2" aria-label="Next Page" id="bottom-page-next">next &gt;</a>&nbsp;&nbsp;<a href="/publications/search?keywords-lg=SP+2222&sortBy-lg=relevence&status-lg=Final%2cWithdrawn&page=47" aria-label="Last Page" id="bottom-page-last" data-last-page-number="47">last &gt;&gt;</a></span>
            </p>
        </div>
<div>
    <span class="pull-right">
        <a href="/publications/search" id="view-all-pubs-link">View All Publications</a>
    </span>
</div>


    <div id="publications-quicklinks-sm" class="bs-callout bs-callout-subnav hidden-md hidden-lg">
        <h4>Current Publications <i class="fa fa-bolt"></i></h4>
        <ul>
            <li>
                <strong>
                    NIST Series Pubs <i class="fa fa-info-circle" aria-hidden="true" data-placement="right" data-html="true"
                                        data-tooltip-toggle="tooltipWithFunction" data-title-container="nist-series-pubs-tooltip"></i>
                </strong>
                <ul>
                    <li><a href="/publications/final-pubs" id="quick-link-final-sm">Final Pubs</a></li>
                    <li><a href="/publications/drafts-open-for-comment" id="quick-links-comments-sm">Drafts Open for Comment</a></li>
                    <li><a href="/publications/draft-pubs" id="quick-link-draft-sm">All Public Drafts</a></li>
                    <li>
                        <strong>
                            View By Series <i class="fa fa-info-circle" aria-hidden="true" data-placement="right" data-html="true"
                                              data-tooltip-toggle="tooltipWithFunction" data-title-container="nist-view-series-pubs-tooltip"></i>
                        </strong>
                        <ul>
                            <li><a href="/publications/fips" id="quick-link-fips-sm">FIPS</a></li>
                            <li><a href="/publications/sp800" id="quick-link-sp-800-sm">SP 800 series</a></li>
                            <li><a href="/publications/sp" id="quick-link-sp-sm">All SP series</a></li>
                            <li><a href="/publications/nistir" id="quick-link-nistir-sm">NISTIRs</a></li>
                            <li><a href="/publications/itl-bulletin" id="quick-link-itl-bul-sm">ITL Bulletins</a></li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li>
                <strong>
                    Other Pubs <i class="fa fa-info-circle" aria-hidden="true" data-placement="right" data-html="true"
                                  data-tooltip-toggle="tooltipWithFunction" data-title-container="nist-other-pubs-tooltip"></i>
                </strong>
                <ul>
                    <li><a href="/publications/white-paper" id="quick-link-white-papers-sm">White Papers</a></li>
                    <li><a href="/publications/journal-article" id="quick-link-journal-articles-sm">Journal Articles</a></li>
                    <li><a href="/publications/conference-paper" id="quick-link-conference-papers-sm">Conference Papers</a></li>
                    <li><a href="/publications/book" id="quick-link-books-sm">Books</a></li>
                </ul>
            </li>
        </ul>
        <span style="display: none;" id="nist-series-pubs-tooltip">
            <strong>Final:</strong> <em>Current list of all published NIST cybersecurity documents.</em>
            Does not include "Withdrawn" documents. Includes FIPS, Special Publications, NISTIRs, ITL Bulletins, and NIST Cybersecurity White Papers.<br />
            <br />
            <strong>Public Drafts:</strong> <em>Current list of all draft NIST cybersecurity documents--they are typically posted for public comment.</em>
            "Current" public drafts are the latest draft versions that have not yet been published as "Final."
        </span>
        <span style="display: none;" id="nist-view-series-pubs-tooltip">
            <strong>FIPS:</strong> <em>Current Federal Information Processing Standard Publications (FIPS).</em> Includes current (Final and Draft) FIPS.<br />
            <br />
            <strong>SP 800 Series:</strong> <em>Current NIST Special Publication (SP) 800 series publications, which focus on Computer/Information Security.</em>
            Includes current (Final and Draft) SP 800 pubs.<br />
            <br />
            <strong>All SP Series:</strong> <em>
                Current NIST Special Publications (SP), including SP 800 (Computer/Information Security) and SP 1800
                (Cybersecurity Practice Guides) pubs. Also includes SP 500 (Computer Systems Technology) pubs related to cybersecurity and privacy.
            </em>
            Includes current (Final and Draft) NIST Special Publications.<br />
            <br />
            <strong>NISTIRs:</strong> <em>Current list of NIST Interagency or Internal Reports (NISTIR) related to cybersecurity and privacy.</em>
            Includes current (Final and Draft) NISTIRs.<br />
            <br />
            <strong>ITL Bulletins:</strong> Current list of NIST Information Technology Laboratory (ITL) Bulletins.
        </span>
        <span style="display: none;" id="nist-other-pubs-tooltip">
            <strong>White Papers:</strong> <em>
                Consists of NIST Cybersecurity White Papers; NCCoE Project Descriptions, Building Blocks and Use Cases; and
                other NIST-authored papers that are not part of a formal series.
            </em> Includes current (Final and Draft) papers.<br />
            <br />
            <strong>Journal Articles:</strong> NIST-authored articles published in external journals and in the NIST Journal of Research (JRES).<br />
            <br />
            <strong>Conference Papers:</strong> NIST-authored conference papers related to cybersecurity and privacy.<br />
            <br />
            <strong>Books:</strong> NIST-authored books, book sections, and encyclopedia entries related to cybersecurity and privacy.
        </span>
    </div>

        </div>
    </div>
</div>

        <div id="footer-pusher"></div>

    </div>

    

    <footer id="footer">
        <div class="container">

            <div class="row">
                <div class="col-sm-6">
                    <span class="hidden-xs">
                        <a href="https://www.nist.gov" title="National Institute of Standards and Technology" rel="home" target="_blank" class="footer-nist-logo" id="footer-nist-logo-link">
                            <img src="/CSRC/Media/images/logo_rev.png" alt="National Institute of Standards and Technology logo" id="footer-nist-logo" />
                        </a>
                    </span>

                    <div class="row footer-contact-container">
                        <div class="col-sm-12" id="footer-address">
                            <strong>HEADQUARTERS</strong><br>
                            100 Bureau Drive<br>
                            Gaithersburg, MD 20899
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <ul class="social-list text-right" style="display: block;">
                        <li class="field-item service-twitter list-horiz">
                            <a href="https://twitter.com/NISTCyber" class="social-btn social-btn--large extlink ext" id="footer-social-twitter-link">
                                <i class="fa fa-twitter fa-fw"><span class="element-invisible">twitter</span></i><span class="ext"><span class="element-invisible"> (link is external)</span></span>
                            </a>
                        </li>
                        <li class="field-item service-facebook list-horiz">
                            <a href="https://www.facebook.com/NIST" class="social-btn social-btn--large extlink ext" id="footer-social-facebook-link">
                                <i class="fa fa-facebook fa-fw"><span class="element-invisible">facebook</span></i><span class="ext"><span class="element-invisible"> (link is external)</span></span>
                            </a>

                        </li>
                        <li class="field-item service-linkedin list-horiz">
                            <a href="https://www.linkedin.com/company/nist" class="social-btn social-btn--large extlink ext" id="footer-social-linkedin-link">
                                <i class="fa fa-linkedin fa-fw"><span class="element-invisible">linkedin</span></i><span class="ext"><span class="element-invisible"> (link is external)</span></span>
                            </a>

                        </li>
                        <li class="field-item service-instagram list-horiz">
                            <a href="https://www.instagram.com/usnistgov/" class="social-btn social-btn--large extlink ext" id="footer-social-instagram-link">
                                <i class="fa fa-instagram fa-fw"><span class="element-invisible">instagram</span></i>
                                <span class="ext"><span class="element-invisible"> (link is external)</span></span>
                            </a>

                        </li>
                        <li class="field-item service-youtube list-horiz">
                            <a href="https://www.youtube.com/user/USNISTGOV" class="social-btn social-btn--large extlink ext" id="footer-social-youtube-link">
                                <i class="fa fa-youtube fa-fw"><span class="element-invisible">youtube</span></i><span class="ext"><span class="element-invisible"> (link is external)</span></span>
                            </a>

                        </li>
                        <li class="field-item service-rss list-horiz">
                            <a href="https://www.nist.gov/news-events/nist-rss-feeds" class="social-btn social-btn--large extlink" id="footer-social-rss-link">
                                <i class="fa fa-rss fa-fw"><span class="element-invisible">rss</span></i>
                            </a>

                        </li>
                        <li class="field-item service-govdelivery list-horiz last">
                            <a href="https://public.govdelivery.com/accounts/USNIST/subscriber/new?qsp=USNIST_3" class="social-btn social-btn--large extlink ext" title="Subscribe to CSRC and publication updates, and other NIST cybersecurity news" id="footer-social-govdelivery-link">
                                <i class="fa fa-envelope fa-fw"><span class="element-invisible">govdelivery</span></i><span class="ext"><span class="element-invisible"> (link is external)</span></span>
                            </a>
                        </li>
                    </ul>
                    <p class="text-right">
                        Want updates about CSRC and our publications?
                        <a href="https://public.govdelivery.com/accounts/USNIST/subscriber/new?qsp=USNIST_3" class="btn btn-lg btn-info" style="background-color: #12659c!important; border-color: #12659c!important;" id="footer-subscribe-link">Subscribe</a>
                    </p>
                </div>
            </div>
            <div class="row hidden-sm hidden-md hidden-lg">
                <div class="col-sm-12">
                    <a href="https://www.nist.gov" title="National Institute of Standards and Technology" rel="home" target="_blank" class="footer-nist-logo" id="footer-bottom-nist-logo-link">
                        <img src="/CSRC/Media/images/logo_rev.png" alt="National Institute of Standards and Technology logo" id="footer-bottom-nist-logo" />
                    </a>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-12 col-md-6">
                    <p>
                        <a href="mailto:webmaster-csrc@nist.gov?subject=CSRC Inquiry" id="footer-webmaster-link">Webmaster</a> |
                        <a href="/about/contact" id="footer-contact-us-link">Contact Us</a> |
                        <a href="https://www.nist.gov/about-nist/our-organization" style="display: inline-block;" id="footer-org-link">Our Other Offices</a>
                    </p>
                </div>
                <div class="col-md-6 col-sm-12">
                    <span class="pull-right text-right">
                        Contact CSRC Webmaster: <a href="mailto:webmaster-csrc@nist.gov?subject=CSRC Inquiry" style="display: inline-block;" id="footer-info-webmaster-link">webmaster-csrc@nist.gov</a>
                    </span>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 footer-bottom-links-container" id="footer-bottom-links-container">
                    <p>
                        <a target="_blank" href="https://www.nist.gov/privacy-policy">Privacy Statement</a> |
                        <a target="_blank" href="https://www.nist.gov/privacy-policy#privpolicy">Privacy Policy</a> |
                        <a target="_blank" href="https://www.nist.gov/privacy-policy#secnot">Security Notice</a> |
                        <a target="_blank" href="https://www.nist.gov/privacy-policy#accesstate">Accessibility Statement</a> |
                        <a target="_blank" href="https://www.nist.gov/privacy">NIST Privacy Program</a> |
                        <a target="_blank" href="https://www.nist.gov/no-fear-act-policy">No Fear Act Policy</a> |
                        <a target="_blank" href="https://www.nist.gov/disclaimer">Disclaimer</a> |
                        <a target="_blank" href="https://www.nist.gov/office-director/freedom-information-act">FOIA</a> |
                        <a target="_blank" href="https://www.nist.gov/environmental-policy-statement">Environmental Policy Statement</a>
                    </p>
                    <p>
                        <a target="_blank" href="https://www.nist.gov/privacy-policy#cookie">Cookie Disclaimer</a> |
                        <a target="_blank" href="https://www.nist.gov/summary-report-scientific-integrity">Scientific Integrity Summary</a> |
                        <a target="_blank" href="https://www.nist.gov/nist-information-quality-standards">NIST Information Quality Standards</a> |
                        <a target="_blank" href="https://www.commerce.gov/">Commerce.gov</a> |
                        <a target="_blank" href="https://www.healthcare.gov/">Healthcare.gov</a> |
                        <a target="_blank" href="http://www.science.gov/">Science.gov</a> |
                        <a target="_blank" href="http://www.usa.gov/">USA.gov</a>
                    </p>
                </div>
            </div>
        </div>
    </footer>

    <script type="text/javascript" src="/dist/app.bundle.js"></script>
    <script async type="text/javascript" src="/dist/mathjax/MathJax.js?config=TeX-AMS_HTML"></script>

    

    </body>
</html>

  recorded_at: Fri, 14 May 2021 16:48:20 GMT
recorded_with: VCR 6.0.0
