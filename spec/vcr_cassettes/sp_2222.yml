---
http_interactions:
- request:
    method: get
    uri: https://csrc.nist.gov/publications/search?keywords-lg=SP%202222&sortBy-lg=relevence&status-lg=Final,Withdrawn
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache
      Pragma:
      - no-cache
      Content-Type:
      - text/html; charset=utf-8
      Expires:
      - "-1"
      Server:
      - Microsoft-IIS/10.0
      X-Frame-Options:
      - DENY
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Content-Security-Policy:
      - frame-ancestors 'self'
      Date:
      - Thu, 18 Mar 2021 20:34:11 GMT
      Content-Length:
      - '183681'
      Strict-Transport-Security:
      - max-age=31536000
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJlbi11cyIgeG1sOmxhbmc9ImVuLXVzIj4NCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPg0KICAgIDx0aXRsZT5TZWFyY2ggfCBDU1JDPC90aXRsZT4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1VVEYtOCIgLz4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXN0eWxlLXR5cGUiIGNvbnRlbnQ9InRleHQvY3NzIiAvPg0KICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtc2NyaXB0LXR5cGUiIGNvbnRlbnQ9InRleHQvamF2YXNjcmlwdCIgLz4NCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIgLz4NCiAgICA8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLWNvbmZpZyIgY29udGVudD0iL0NTUkMvTWVkaWEvaW1hZ2VzL2Zhdmljb25zL2Jyb3dzZXJjb25maWcueG1sIiAvPg0KICAgIDxtZXRhIG5hbWU9InRoZW1lLWNvbG9yIiBjb250ZW50PSIjMDAwMDAwIiAvPg0KICAgIDxtZXRhIG5hbWU9Imdvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbiIgY29udGVudD0ieGJybnJWWURnTEQtQmQ2NHhITEN0NFhzUFh6VWhRLTRsR01qNFRkVVVUQSIgLz4NCiAgICANCg0KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE4MHgxODAiIGhyZWY9Ii9pbWFnZXMvaWNvbnMvYXBwbGUtdG91Y2gtaWNvbi5wbmciIC8+DQogICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS9wbmciIGhyZWY9Ii9pbWFnZXMvaWNvbnMvZmF2aWNvbi0zMngzMi5wbmciIHNpemVzPSIzMngzMiIgLz4NCiAgICA8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3BuZyIgaHJlZj0iL2ltYWdlcy9pY29ucy9mYXZpY29uLTE2eDE2LnBuZyIgc2l6ZXM9IjE2eDE2IiAvPg0KICAgIDxsaW5rIHJlbD0ibWFuaWZlc3QiIGhyZWY9Ii9pbWFnZXMvaWNvbnMvbWFuaWZlc3QuanNvbiIgLz4NCiAgICA8bGluayByZWw9Im1hc2staWNvbiIgaHJlZj0iL2ltYWdlcy9pY29ucy9zYWZhcmktcGlubmVkLXRhYi5zdmciIGNvbG9yPSIjMDAwMDAwIiAvPg0KICAgIDxsaW5rIGhyZWY9Ii9DU1JDL01lZGlhL2ltYWdlcy9mYXZpY29ucy9mYXZpY29uLmljbyIgdHlwZT0iaW1hZ2UveC1pY29uIiByZWw9InNob3J0Y3V0IGljb24iLz4NCiAgICA8bGluayBocmVmPSIvQ1NSQy9NZWRpYS9pbWFnZXMvZmF2aWNvbnMvZmF2aWNvbi5pY28iIHR5cGU9ImltYWdlL3gtaWNvbiIgcmVsPSJpY29uIi8+DQogICAgDQogICAgPGxpbmsgaHJlZj0iL2Rpc3QvYXBwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ij4NCiAgICANCg0KICAgIDxzY3JpcHQgYXN5bmMgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBpZD0iX2ZlZF9hbl91YV90YWciIHNyYz0iaHR0cHM6Ly9kYXAuZGlnaXRhbGdvdi5nb3YvVW5pdmVyc2FsLUZlZGVyYXRlZC1BbmFseXRpY3MtTWluLmpzP2FnZW5jeT1uaXN0JnN1YmFnZW5jeT1jc3JjJnB1YT1VQS02NjYxMDY5My0xNSZ5dD10cnVlJmV4dHM9eHNkLHhtbCx3YXYsbXBnLG1wZWcsYXZpLHJ0Zix3ZWJtLG9nZyxvZ3Ysb2dhLG1hcCxvdGYsZW90LHN2Zyx0dGYsd29mZiI+PC9zY3JpcHQ+DQogICAgPHN0eWxlIGlkPSJhbnRpQ2xpY2tqYWNrIj4NCiAgICAgICAgYm9keSB7IGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfQ0KICAgIDwvc3R5bGU+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGlkPSJhbnRpQ2xpY2tqYWNrU2NyaXB0Ij4NCiAgICAgICAgaWYgKHNlbGYgPT09IHRvcCkgeyB2YXIgYW50aUNsaWNramFjayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhbnRpQ2xpY2tqYWNrIik7IGFudGlDbGlja2phY2sucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhbnRpQ2xpY2tqYWNrKTsNCiAgICAgICAgfSBlbHNlIHsgdG9wLmxvY2F0aW9uID0gc2VsZi5sb2NhdGlvbjsgfQ0KICAgIDwvc2NyaXB0Pg0KPC9oZWFkPg0KPGJvZHk+DQogICAgPGRpdiBpZD0iYW50aUNsaWNramFjayIgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPg0KICAgICAgICA8aDE+WW91IGFyZSB2aWV3aW5nIHRoaXMgcGFnZSBpbiBhbiB1bmF1dGhvcml6ZWQgZnJhbWUgd2luZG93LjwvaDE+DQogICAgICAgIDxwPlRoaXMgaXMgYSBwb3RlbnRpYWwgc2VjdXJpdHkgaXNzdWUsIHlvdSBhcmUgYmVpbmcgcmVkaXJlY3RlZCB0byA8YSBocmVmPSJodHRwczovL2NzcmMubmlzdC5nb3YiPmh0dHBzOi8vY3NyYy5uaXN0LmdvdjwvYT48L3A+DQogICAgPC9kaXY+DQoNCiAgICA8c2VjdGlvbiBjbGFzcz0idXNhLWJhbm5lciIgYXJpYS1sYWJlbD0iT2ZmaWNpYWwgZ292ZXJubWVudCB3ZWJzaXRlIj4NCiAgICAgICAgPGRpdiBjbGFzcz0idXNhLWFjY29yZGlvbiBjb250YWluZXIiPg0KICAgICAgICAgICAgPGhlYWRlciBjbGFzcz0idXNhLWJhbm5lcl9faGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJ1c2EtYmFubmVyX19oZWFkZXItZmxhZyIgc3JjPSIvaW1hZ2VzL3VzYmFubmVyL3VzX2ZsYWdfc21hbGwucG5nIiBhbHQ9IlUuUy4gZmxhZyI+DQogICAgICAgICAgICAgICAgJm5ic3A7DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVzYS1iYW5uZXJfX2hlYWRlci10ZXh0Ij5BbiBvZmZpY2lhbCB3ZWJzaXRlIG9mIHRoZSBVbml0ZWQgU3RhdGVzIGdvdmVybm1lbnQ8L3NwYW4+DQoNCiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ1c2EtYWNjb3JkaW9uX19idXR0b24gdXNhLWJhbm5lcl9fYnV0dG9uIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjZ292LWJhbm5lciIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9Imdvdi1iYW5uZXIiPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idXNhLWJhbm5lcl9fYnV0dG9uLXRleHQiPkhlcmUncyBob3cgeW91IGtub3c8L3NwYW4+DQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICA8L2hlYWRlcj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InVzYS1iYW5uZXJfX2NvbnRlbnQgdXNhLWFjY29yZGlvbl9fY29udGVudCBjb2xsYXBzZSIgcm9sZT0idGFicGFuZWwiIGlkPSJnb3YtYmFubmVyIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgY29sLXNtLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJ1c2EtYmFubmVyX19pY29uIHVzYS1tZWRpYS1ibG9ja19faW1nIiBzcmM9Ii9pbWFnZXMvdXNiYW5uZXIvaWNvbi1kb3QtZ292LnN2ZyIgYWx0PSJEb3QgZ292Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+T2ZmaWNpYWwgd2Vic2l0ZXMgdXNlIC5nb3Y8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEgPHN0cm9uZz4uZ292PC9zdHJvbmc+IHdlYnNpdGUgYmVsb25ncyB0byBhbiBvZmZpY2lhbCBnb3Zlcm5tZW50IG9yZ2FuaXphdGlvbiBpbiB0aGUgVW5pdGVkIFN0YXRlcy4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSBjb2wtc20tMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9InVzYS1iYW5uZXJfX2ljb24gdXNhLW1lZGlhLWJsb2NrX19pbWciIHNyYz0iL2ltYWdlcy91c2Jhbm5lci9pY29uLWh0dHBzLnN2ZyIgYWx0PSJIdHRwcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5TZWN1cmUgLmdvdiB3ZWJzaXRlcyB1c2UgSFRUUFM8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIDxzdHJvbmc+bG9jazwvc3Ryb25nPiAoPGltZyBjbGFzcz0idXNhLWJhbm5lcl9fbG9jayIgc3JjPSIvaW1hZ2VzL3VzYmFubmVyL2xvY2suc3ZnIiBhbHQ9IkRvdCBnb3YiPikgb3IgPHN0cm9uZz5odHRwczovLzwvc3Ryb25nPiBtZWFucyB5b3UndmUgc2FmZWx5IGNvbm5lY3RlZCB0byB0aGUgLmdvdiB3ZWJzaXRlLiBTaGFyZSBzZW5zaXRpdmUgaW5mb3JtYXRpb24gb25seSBvbiBvZmZpY2lhbCwgc2VjdXJlIHdlYnNpdGVzLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L3NlY3Rpb24+DQoNCiAgICA8bmF2IGlkPSJuYXZiYXIiIGNsYXNzPSJuYXZiYXIiPg0KICAgICAgICA8ZGl2IGlkPSJuaXN0LW1lbnUtY29udGFpbmVyIiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgPCEtLSBCcmFuZCAtLT4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtNiBjb2wtbWQtNCBuYXZiYXItaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iaHR0cHM6Ly93d3cubmlzdC5nb3YiIHRhcmdldD0iX2JsYW5rIiBpZD0ibmF2YmFyLWJyYW5kLWltYWdlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvQ1NSQy9tZWRpYS9pbWFnZXMvc3ZnL25pc3QtbG9nby5zdmciIGFsdD0iTmF0aW9uYWwgSW5zdGl0dXRlIG9mIFN0YW5kYXJkcyBhbmQgVGVjaG5vbG9neSIgd2lkdGg9IjExMCIgaGVpZ2h0PSIzMCI+DQogICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtNiBjb2wtbWQtOCBuYXZiYXItbmlzdC1sb2dvIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1pbmxpbmUgaGlkZGVuLXNtIGhpZGRlbi14cyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBuYW1lPSJzaXRlLXNlYXJjaCIgaWQ9InNpdGUtc2VhcmNoLWZvcm0iIGFjdGlvbj0iL3NlYXJjaCIgbWV0aG9kPSJHRVQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InNlYXJjaC1jc3JjLXF1ZXJ5IiBjbGFzcz0iZWxlbWVudC1pbnZpc2libGUiPlNlYXJjaDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGF1dG9jb21wbGV0ZT0ib2ZmIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0ic2VhcmNoLWNzcmMtcXVlcnkiIG5hbWU9ImtleXdvcmRzIiB0eXBlPSJ0ZXh0IiBzaXplPSIxNSIgbWF4bGVuZ3RoPSIxMjgiIHBsYWNlaG9sZGVyPSJTZWFyY2ggQ1NSQyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJpcHAiIHZhbHVlPSIyNSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzb3J0QnkiIHZhbHVlPSJyZWxldmFuY2UiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2hvd09ubHkiIHZhbHVlPSJwdWJsaWNhdGlvbnMscHJvamVjdHMsbmV3cyxldmVudHMscHJlc2VudGF0aW9ucyxnbG9zc2FyeSx0b3BpY3MiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idG9waWNzTWF0Y2giIHZhbHVlPSJBTlkiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3RhdHVzIiB2YWx1ZT0iRmluYWwsRHJhZnQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic2VyaWVzIiB2YWx1ZT0iRklQUyxTUCxOSVNUSVIsSVRMIEJ1bGxldGluLFdoaXRlIFBhcGVyLEJ1aWxkaW5nIEJsb2NrLFVzZSBDYXNlLEpvdXJuYWwgQXJ0aWNsZSxDb25mZXJlbmNlIFBhcGVyLEJvb2siIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJzZWFyY2gtY3NyYy1zdWJtaXQtYnRuIiBjbGFzcz0iZm9ybS1zdWJtaXQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZWxlbWVudC1pbnZpc2libGUiPlNlYXJjaDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXNlYXJjaCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9Im52ZC1tZW51LWJ1dHRvbiIgY2xhc3M9InB1bGwtcmlnaHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgaWQ9Im52ZC1tZW51LWJ1dHRvbi1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmEgZmEtYmFycyI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJudmQtbWVudS1mdWxsLXRleHQiPkNTUkMgTUVOVTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0taW5saW5lIGhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgPGZvcm0gbmFtZT0ic2l0ZS1zZWFyY2gtbW9iaWxlIiBpZD0ic2l0ZS1zZWFyY2gtZm9ybS1tb2JpbGUiIGFjdGlvbj0iL3NlYXJjaCIgbWV0aG9kPSJHRVQiPg0KICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InNlYXJjaC1jc3JjLXF1ZXJ5IiBjbGFzcz0iZWxlbWVudC1pbnZpc2libGUiPlNlYXJjaDwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGlucHV0IGF1dG9jb21wbGV0ZT0ib2ZmIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0ic2VhcmNoLWNzcmMtcXVlcnktbW9iaWxlIiBuYW1lPSJrZXl3b3JkcyIgdHlwZT0idGV4dCIgc2l6ZT0iMTUiIG1heGxlbmd0aD0iMTI4IiBwbGFjZWhvbGRlcj0iU2VhcmNoIENTUkMiIC8+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJzZWFyY2gtY3NyYy1zdWJtaXQtYnRuLW1vYmlsZSIgY2xhc3M9ImZvcm0tc3VibWl0Ij4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVsZW1lbnQtaW52aXNpYmxlIj5TZWFyY2g8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zZWFyY2giPjwvaT4NCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9Im1haW4tbWVudS1yb3cgY29udGFpbmVyIj4NCiAgICAgICAgICAgIDwhLS0gQ29sbGVjdCB0aGUgbmF2IGxpbmtzLCBmb3JtcywgYW5kIG90aGVyIGNvbnRlbnQgZm9yIHRvZ2dsaW5nIC0tPg0KICAgICAgICAgICAgPGRpdiBpZD0ibWFpbi1tZW51LWRyb3AiIGNsYXNzPSJjb2wtbGctMTIiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3Byb2plY3RzIj5Qcm9qZWN0czwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHVibGljYXRpb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQdWJsaWNhdGlvbnMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXhwYW5kZXIgZmEgZmEtcGx1cyIgaWQ9Im1haW4tbWVudS1wdWJzLWV4cGFuZGVyIiBkYXRhLWV4cGFuZGVyLW5hbWU9InB1YmxpY2F0aW9ucyIgZGF0YS1leHBhbmRlZD0iZmFsc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZWxlbWVudC1pbnZpc2libGUiPkV4cGFuZCBvciBDb2xsYXBzZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OiBub25lOyIgY2xhc3M9InN1Yi1tZW51IiBkYXRhLWV4cGFuZGVyLXRyaWdnZXI9InB1YmxpY2F0aW9ucyIgaWQ9Im1haW4tbWVudS1wdWJzLWV4cGFuZGVkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPSIvcHVibGljYXRpb25zL2RyYWZ0cy1vcGVuLWZvci1jb21tZW50Ij5EcmFmdHMgZm9yIFB1YmxpYyBDb21tZW50PC9hPjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZHJhZnQtcHVicyI+QWxsIFB1YmxpYyBEcmFmdHM8L2E+PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9maW5hbC1wdWJzIj5GaW5hbCBQdWJzPC9hPjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZmlwcyI+RklQUzwvYT48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPSIvcHVibGljYXRpb25zL3NwIj5TcGVjaWFsIFB1YmxpY2F0aW9ucyAoU1A8c21hbGw+czwvc21hbGw+KTwvYT48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPSIvcHVibGljYXRpb25zL25pc3RpciI+TklTVElSPHNtYWxsPnM8L3NtYWxsPjwvYT48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPSIvcHVibGljYXRpb25zL2l0bC1idWxsZXRpbiI+SVRMIEJ1bGxldGluczwvYT48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPSIvcHVibGljYXRpb25zL3doaXRlLXBhcGVyIj5XaGl0ZSBQYXBlcnM8L2E+PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9qb3VybmFsLWFydGljbGUiPkpvdXJuYWwgQXJ0aWNsZXM8L2E+PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9jb25mZXJlbmNlLXBhcGVyIj5Db25mZXJlbmNlIFBhcGVyczwvYT48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPSIvcHVibGljYXRpb25zL2Jvb2siPkJvb2tzPC9hPjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3RvcGljcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9waWNzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV4cGFuZGVyIGZhIGZhLXBsdXMiIGlkPSJtYWluLW1lbnUtdG9waWNzLWV4cGFuZGVyIiBkYXRhLWV4cGFuZGVyLW5hbWU9InRvcGljcyIgZGF0YS1leHBhbmRlZD0iZmFsc2UiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZWxlbWVudC1pbnZpc2libGUiPkV4cGFuZCBvciBDb2xsYXBzZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OiBub25lOyIgY2xhc3M9InN1Yi1tZW51IiBkYXRhLWV4cGFuZGVyLXRyaWdnZXI9InRvcGljcyIgaWQ9Im1haW4tbWVudS10b3BpY3MtZXhwYW5kZWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxhIGhyZWY9Ii9Ub3BpY3MvU2VjdXJpdHktYW5kLVByaXZhY3kiPlNlY3VyaXR5ICYgUHJpdmFjeTwvYT48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPSIvVG9waWNzL0FwcGxpY2F0aW9ucyI+QXBwbGljYXRpb25zPC9hPjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxhIGhyZWY9Ii9Ub3BpY3MvVGVjaG5vbG9naWVzIj5UZWNobm9sb2dpZXM8L2E+PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGEgaHJlZj0iL1RvcGljcy9TZWN0b3JzIj5TZWN0b3JzPC9hPjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxhIGhyZWY9Ii9Ub3BpY3MvTGF3cy1hbmQtUmVndWxhdGlvbnMiPkxhd3MgJiBSZWd1bGF0aW9uczwvYT48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPSIvVG9waWNzL0FjdGl2aXRpZXMtYW5kLVByb2R1Y3RzIj5BY3Rpdml0aWVzICYgUHJvZHVjdHM8L2E+PC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL25ld3MiPk5ld3MgJiBVcGRhdGVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZXZlbnRzIj5FdmVudHM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9nbG9zc2FyeSI+R2xvc3Nhcnk8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Fib3V0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBYm91dCBDU1JDDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV4cGFuZGVyIGZhIGZhLXBsdXMiIGlkPSJtYWluLW1lbnUtYWJvdXQtZXhwYW5kZXIiIGRhdGEtZXhwYW5kZXItbmFtZT0iYWJvdXQiIGRhdGEtZXhwYW5kZWQ9ImZhbHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVsZW1lbnQtaW52aXNpYmxlIj5FeHBhbmQgb3IgQ29sbGFwc2U8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTogbm9uZTsiIGNsYXNzPSJzdWItbWVudSIgZGF0YS1leHBhbmRlci10cmlnZ2VyPSJhYm91dCIgaWQ9Im1haW4tbWVudS1hYm91dC1leHBhbmRlZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvR3JvdXBzL0NvbXB1dGVyLVNlY3VyaXR5LURpdmlzaW9uIj5Db21wdXRlciBTZWN1cml0eSBEaXZpc2lvbjwvYT48L3N0cm9uZz48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvR3JvdXBzL0NvbXB1dGVyLVNlY3VyaXR5LURpdmlzaW9uL0NyeXB0b2dyYXBoaWMtVGVjaG5vbG9neSI+Q3J5cHRvZ3JhcGhpYyBUZWNobm9sb2d5PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvR3JvdXBzL0NvbXB1dGVyLVNlY3VyaXR5LURpdmlzaW9uL1NlY3VyZS1TeXN0ZW1zLWFuZC1BcHBsaWNhdGlvbnMiPlNlY3VyZSBTeXN0ZW1zIGFuZCBBcHBsaWNhdGlvbnM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9Hcm91cHMvQ29tcHV0ZXItU2VjdXJpdHktRGl2aXNpb24vU2VjdXJpdHktQ29tcG9uZW50cy1hbmQtTWVjaGFuaXNtcyI+U2VjdXJpdHkgQ29tcG9uZW50cyBhbmQgTWVjaGFuaXNtczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL0dyb3Vwcy9Db21wdXRlci1TZWN1cml0eS1EaXZpc2lvbi9TZWN1cml0eS1FbmdpbmVlcmluZy1hbmQtUmlzay1NYW5hZ2VtZW50Ij5TZWN1cml0eSBFbmdpbmVlcmluZyBhbmQgUmlzayBNYW5hZ2VtZW50PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvR3JvdXBzL0NvbXB1dGVyLVNlY3VyaXR5LURpdmlzaW9uL1NlY3VyaXR5LVRlc3RpbmctVmFsaWRhdGlvbi1hbmQtTWVhc3VyZW1lbnQiPlNlY3VyaXR5IFRlc3RpbmcsIFZhbGlkYXRpb24sIGFuZCBNZWFzdXJlbWVudDwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPjxhIGhyZWY9Ii9Hcm91cHMvQXBwbGllZC1DeWJlcnNlY3VyaXR5LURpdmlzaW9uIj5BcHBsaWVkIEN5YmVyc2VjdXJpdHkgRGl2aXNpb248L2E+PC9zdHJvbmc+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL0dyb3Vwcy9BcHBsaWVkLUN5YmVyc2VjdXJpdHktRGl2aXNpb24vQ3liZXJzZWN1cml0eS1hbmQtUHJpdmFjeS1BcHBsaWNhdGlvbnMiPkN5YmVyc2VjdXJpdHkgYW5kIFByaXZhY3kgQXBwbGljYXRpb25zPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvR3JvdXBzL0FwcGxpZWQtQ3liZXJzZWN1cml0eS1EaXZpc2lvbi9OYXRpb25hbC1DeWJlcnNlY3VyaXR5LUNlbnRlci1vZi1FeGNlbGxlbmNlIj5OYXRpb25hbCBDeWJlcnNlY3VyaXR5IENlbnRlciBvZiBFeGNlbGxlbmNlIChOQ0NvRSk8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5pc3QuZ292L25pY2UvIj5OYXRpb25hbCBJbml0aWF0aXZlIGZvciBDeWJlcnNlY3VyaXR5IEVkdWNhdGlvbiAoTklDRSk8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9Hcm91cHMvQXBwbGllZC1DeWJlcnNlY3VyaXR5LURpdmlzaW9uL1RydXN0ZWQtSWRlbnRpdGllcy1Hcm91cCI+VHJ1c3RlZCBJZGVudGl0aWVzIEdyb3VwPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb250YWN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdCBVcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9kaXY+PCEtLSAvI21vYmlsZS1uYXYtY29udGFpbmVyIC0tPg0KICAgICAgICA8L2Rpdj4NCg0KICAgIDwvbmF2Pg0KDQogICAgPHNlY3Rpb24gaWQ9Iml0bC1oZWFkZXIiIGNsYXNzPSJoYXMtbWVudSI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBjb2wtbWQtOCI+DQogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iaGlkZGVuLXhzIGhpZGRlbi1zbSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5uaXN0Lmdvdi9pdGwiIHRhcmdldD0iX2JsYW5rIiBpZD0iaXRsLWhlYWRlci1saW5rIj5JbmZvcm1hdGlvbiBUZWNobm9sb2d5IExhYm9yYXRvcnk8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvaDI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0iaGlkZGVuLXhzIGhpZGRlbi1zbSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvIiBpZD0iY3NyYy1oZWFkZXItbGluay1sZyI+Q29tcHV0ZXIgU2VjdXJpdHkgUmVzb3VyY2UgQ2VudGVyPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2gxPg0KICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9ImhpZGRlbi14cyB0ZXh0LWNlbnRlciBoaWRkZW4tbWQgaGlkZGVuLWxnIiBpZD0iY3NyYy1oZWFkZXItbGluay1tZCI+Q29tcHV0ZXIgU2VjdXJpdHkgUmVzb3VyY2UgQ2VudGVyPC9oMT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICA8YSBpZD0ibG9nby1jc3JjIiBocmVmPSIvIiBzdHlsZT0id2lkdGg6IDEwMCU7IHRleHQtYWxpZ246IGNlbnRlcjsgZGlzcGxheTogYmxvY2s7IG1hcmdpbi10b3A6IDFyZW07Ij48aW1nIGlkPSJpbWctbG9nby1jc3JjIiBzcmM9Ii9DU1JDL01lZGlhL2ltYWdlcy9DU1JDLXdoaXRlLTEzNC0zOC5wbmciIGFsdD0iQ1NSQyBMb2dvIiBjbGFzcz0iY3NyYy1oZWFkZXItbG9nbyI+PC9hPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvc2VjdGlvbj4NCg0KICAgIDxkaXYgaWQ9ImJvZHktc2VjdGlvbiIgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgICAgIA0KICAgICAgICANCg0KDQo8ZGl2IGNsYXNzPSJwdWJsaWNhdGlvbnMtY29udGVudCI+DQogICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMgY29sLW1kLTQgaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIj4NCg0KDQogICAgPGRpdiBpZD0icHVibGljYXRpb25zLXF1aWNrbGlua3MtbGciIGNsYXNzPSJicy1jYWxsb3V0IGJzLWNhbGxvdXQtc3VibmF2IGhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgIDxoND5DdXJyZW50IFB1YmxpY2F0aW9ucyA8aSBjbGFzcz0iZmEgZmEtYm9sdCI+PC9pPjwvaDQ+DQogICAgICAgIDx1bD4NCiAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICBOSVNUIFNlcmllcyBQdWJzIDxpIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSIgYXJpYS1oaWRkZW49InRydWUiIGRhdGEtcGxhY2VtZW50PSJyaWdodCIgZGF0YS1odG1sPSJ0cnVlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9vbHRpcC10b2dnbGU9InRvb2x0aXBXaXRoRnVuY3Rpb24iIGRhdGEtdGl0bGUtY29udGFpbmVyPSJuaXN0LXNlcmllcy1wdWJzLXRvb2x0aXAiPjwvaT4NCiAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHVibGljYXRpb25zL2ZpbmFsLXB1YnMiIGlkPSJxdWljay1saW5rLWZpbmFsLWxnIj5GaW5hbCBQdWJzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHVibGljYXRpb25zL2RyYWZ0cy1vcGVuLWZvci1jb21tZW50IiBpZD0icXVpY2stbGlua3MtY29tbWVudHMtbGciPkRyYWZ0cyBPcGVuIGZvciBDb21tZW50PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHVibGljYXRpb25zL2RyYWZ0LXB1YnMiIGlkPSJxdWljay1saW5rLWRyYWZ0LWxnIj5BbGwgUHVibGljIERyYWZ0czwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgQnkgU2VyaWVzIDxpIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSIgYXJpYS1oaWRkZW49InRydWUiIGRhdGEtcGxhY2VtZW50PSJyaWdodCIgZGF0YS1odG1sPSJ0cnVlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9vbHRpcC10b2dnbGU9InRvb2x0aXBXaXRoRnVuY3Rpb24iIGRhdGEtdGl0bGUtY29udGFpbmVyPSJuaXN0LXZpZXctc2VyaWVzLXB1YnMtdG9vbHRpcCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZmlwcyIgaWQ9InF1aWNrLWxpbmstZmlwcy1sZyI+RklQUzwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHVibGljYXRpb25zL3NwODAwIiBpZD0icXVpY2stbGluay1zcC04MDAtbGciPlNQIDgwMCBzZXJpZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9zcCIgaWQ9InF1aWNrLWxpbmstc3AtbGciPkFsbCBTUCBzZXJpZXM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9uaXN0aXIiIGlkPSJxdWljay1saW5rLW5pc3Rpci1sZyI+TklTVElSczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHVibGljYXRpb25zL2l0bC1idWxsZXRpbiIgaWQ9InF1aWNrLWxpbmstaXRsLWJ1bC1sZyI+SVRMIEJ1bGxldGluczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICBPdGhlciBQdWJzIDxpIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSIgYXJpYS1oaWRkZW49InRydWUiIGRhdGEtcGxhY2VtZW50PSJyaWdodCIgZGF0YS1odG1sPSJ0cnVlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9vbHRpcC10b2dnbGU9InRvb2x0aXBXaXRoRnVuY3Rpb24iIGRhdGEtdGl0bGUtY29udGFpbmVyPSJuaXN0LW90aGVyLXB1YnMtdG9vbHRpcCI+PC9pPg0KICAgICAgICAgICAgICAgIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvd2hpdGUtcGFwZXIiIGlkPSJxdWljay1saW5rLXdoaXRlLXBhcGVycy1sZyI+V2hpdGUgUGFwZXJzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHVibGljYXRpb25zL2pvdXJuYWwtYXJ0aWNsZSIgaWQ9InF1aWNrLWxpbmstam91cm5hbC1hcnRpY2xlcy1sZyI+Sm91cm5hbCBBcnRpY2xlczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9jb25mZXJlbmNlLXBhcGVyIiBpZD0icXVpY2stbGluay1jb25mZXJlbmNlLXBhcGVycy1sZyI+Q29uZmVyZW5jZSBQYXBlcnM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvYm9vayIgaWQ9InF1aWNrLWxpbmstYm9va3MtbGciPkJvb2tzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgIDwvbGk+DQogICAgICAgIDwvdWw+DQogICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBub25lOyIgaWQ9Im5pc3Qtc2VyaWVzLXB1YnMtdG9vbHRpcCI+DQogICAgICAgICAgICA8c3Ryb25nPkZpbmFsOjwvc3Ryb25nPiA8ZW0+Q3VycmVudCBsaXN0IG9mIGFsbCBwdWJsaXNoZWQgTklTVCBjeWJlcnNlY3VyaXR5IGRvY3VtZW50cy48L2VtPg0KICAgICAgICAgICAgRG9lcyBub3QgaW5jbHVkZSAiV2l0aGRyYXduIiBkb2N1bWVudHMuIEluY2x1ZGVzIEZJUFMsIFNwZWNpYWwgUHVibGljYXRpb25zLCBOSVNUSVJzLCBJVEwgQnVsbGV0aW5zLCBhbmQgTklTVCBDeWJlcnNlY3VyaXR5IFdoaXRlIFBhcGVycy48YnIgLz4NCiAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgPHN0cm9uZz5QdWJsaWMgRHJhZnRzOjwvc3Ryb25nPiA8ZW0+Q3VycmVudCBsaXN0IG9mIGFsbCBkcmFmdCBOSVNUIGN5YmVyc2VjdXJpdHkgZG9jdW1lbnRzLS10aGV5IGFyZSB0eXBpY2FsbHkgcG9zdGVkIGZvciBwdWJsaWMgY29tbWVudC48L2VtPg0KICAgICAgICAgICAgIkN1cnJlbnQiIHB1YmxpYyBkcmFmdHMgYXJlIHRoZSBsYXRlc3QgZHJhZnQgdmVyc2lvbnMgdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiBwdWJsaXNoZWQgYXMgIkZpbmFsLiINCiAgICAgICAgPC9zcGFuPg0KICAgICAgICA8c3BhbiBzdHlsZT0iZGlzcGxheTogbm9uZTsiIGlkPSJuaXN0LXZpZXctc2VyaWVzLXB1YnMtdG9vbHRpcCI+DQogICAgICAgICAgICA8c3Ryb25nPkZJUFM6PC9zdHJvbmc+IDxlbT5DdXJyZW50IEZlZGVyYWwgSW5mb3JtYXRpb24gUHJvY2Vzc2luZyBTdGFuZGFyZCBQdWJsaWNhdGlvbnMgKEZJUFMpLjwvZW0+IEluY2x1ZGVzIGN1cnJlbnQgKEZpbmFsIGFuZCBEcmFmdCkgRklQUy48YnIgLz4NCiAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgPHN0cm9uZz5TUCA4MDAgU2VyaWVzOjwvc3Ryb25nPiA8ZW0+Q3VycmVudCBOSVNUIFNwZWNpYWwgUHVibGljYXRpb24gKFNQKSA4MDAgc2VyaWVzIHB1YmxpY2F0aW9ucywgd2hpY2ggZm9jdXMgb24gQ29tcHV0ZXIvSW5mb3JtYXRpb24gU2VjdXJpdHkuPC9lbT4NCiAgICAgICAgICAgIEluY2x1ZGVzIGN1cnJlbnQgKEZpbmFsIGFuZCBEcmFmdCkgU1AgODAwIHB1YnMuPGJyIC8+DQogICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgIDxzdHJvbmc+QWxsIFNQIFNlcmllczo8L3N0cm9uZz4gPGVtPg0KICAgICAgICAgICAgICAgIEN1cnJlbnQgTklTVCBTcGVjaWFsIFB1YmxpY2F0aW9ucyAoU1ApLCBpbmNsdWRpbmcgU1AgODAwIChDb21wdXRlci9JbmZvcm1hdGlvbiBTZWN1cml0eSkgYW5kIFNQIDE4MDANCiAgICAgICAgICAgICAgICAoQ3liZXJzZWN1cml0eSBQcmFjdGljZSBHdWlkZXMpIHB1YnMuIEFsc28gaW5jbHVkZXMgU1AgNTAwIChDb21wdXRlciBTeXN0ZW1zIFRlY2hub2xvZ3kpIHB1YnMgcmVsYXRlZCB0byBjeWJlcnNlY3VyaXR5IGFuZCBwcml2YWN5Lg0KICAgICAgICAgICAgPC9lbT4NCiAgICAgICAgICAgIEluY2x1ZGVzIGN1cnJlbnQgKEZpbmFsIGFuZCBEcmFmdCkgTklTVCBTcGVjaWFsIFB1YmxpY2F0aW9ucy48YnIgLz4NCiAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgPHN0cm9uZz5OSVNUSVJzOjwvc3Ryb25nPiA8ZW0+Q3VycmVudCBsaXN0IG9mIE5JU1QgSW50ZXJhZ2VuY3kgb3IgSW50ZXJuYWwgUmVwb3J0cyAoTklTVElSKSByZWxhdGVkIHRvIGN5YmVyc2VjdXJpdHkgYW5kIHByaXZhY3kuPC9lbT4NCiAgICAgICAgICAgIEluY2x1ZGVzIGN1cnJlbnQgKEZpbmFsIGFuZCBEcmFmdCkgTklTVElScy48YnIgLz4NCiAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgPHN0cm9uZz5JVEwgQnVsbGV0aW5zOjwvc3Ryb25nPiBDdXJyZW50IGxpc3Qgb2YgTklTVCBJbmZvcm1hdGlvbiBUZWNobm9sb2d5IExhYm9yYXRvcnkgKElUTCkgQnVsbGV0aW5zLg0KICAgICAgICA8L3NwYW4+DQogICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBub25lOyIgaWQ9Im5pc3Qtb3RoZXItcHVicy10b29sdGlwIj4NCiAgICAgICAgICAgIDxzdHJvbmc+V2hpdGUgUGFwZXJzOjwvc3Ryb25nPiA8ZW0+DQogICAgICAgICAgICAgICAgQ29uc2lzdHMgb2YgTklTVCBDeWJlcnNlY3VyaXR5IFdoaXRlIFBhcGVyczsgTkNDb0UgUHJvamVjdCBEZXNjcmlwdGlvbnMsIEJ1aWxkaW5nIEJsb2NrcyBhbmQgVXNlIENhc2VzOyBhbmQNCiAgICAgICAgICAgICAgICBvdGhlciBOSVNULWF1dGhvcmVkIHBhcGVycyB0aGF0IGFyZSBub3QgcGFydCBvZiBhIGZvcm1hbCBzZXJpZXMuDQogICAgICAgICAgICA8L2VtPiBJbmNsdWRlcyBjdXJyZW50IChGaW5hbCBhbmQgRHJhZnQpIHBhcGVycy48YnIgLz4NCiAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgPHN0cm9uZz5Kb3VybmFsIEFydGljbGVzOjwvc3Ryb25nPiBOSVNULWF1dGhvcmVkIGFydGljbGVzIHB1Ymxpc2hlZCBpbiBleHRlcm5hbCBqb3VybmFscyBhbmQgaW4gdGhlIE5JU1QgSm91cm5hbCBvZiBSZXNlYXJjaCAoSlJFUykuPGJyIC8+DQogICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgIDxzdHJvbmc+Q29uZmVyZW5jZSBQYXBlcnM6PC9zdHJvbmc+IE5JU1QtYXV0aG9yZWQgY29uZmVyZW5jZSBwYXBlcnMgcmVsYXRlZCB0byBjeWJlcnNlY3VyaXR5IGFuZCBwcml2YWN5LjxiciAvPg0KICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICA8c3Ryb25nPkJvb2tzOjwvc3Ryb25nPiBOSVNULWF1dGhvcmVkIGJvb2tzLCBib29rIHNlY3Rpb25zLCBhbmQgZW5jeWNsb3BlZGlhIGVudHJpZXMgcmVsYXRlZCB0byBjeWJlcnNlY3VyaXR5IGFuZCBwcml2YWN5Lg0KICAgICAgICA8L3NwYW4+DQogICAgPC9kaXY+DQoNCjxmb3JtIGFjdGlvbj0iL3B1YmxpY2F0aW9ucy9zZWFyY2giIGNsYXNzPSJicy1jYWxsb3V0IGJzLWNhbGxvdXQtc3VjY2VzcyBjc3JjLXNlYXJjaC1mb3JtIGhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgZGF0YS1jc3JjLWZvcm09InRydWUiIGRhdGEtZGVmYXVsdC1xdWVyeT0ic29ydEJ5LWxnPXJlbGVhc2VkYXRlK0RFU0MmYW1wO3ZpZXdNb2RlLWxnPWJyaWVmJmFtcDtpcHAtbGc9MjUmYW1wO3N0YXR1cy1sZz1GaW5hbCUyQ0RyYWZ0JmFtcDt0b3BpY3NNYXRjaC1sZz1BTlkmYW1wO2NvbnRyb2xzTWF0Y2gtbGc9QU5ZIiBkYXRhLWZvcm0taWdub3JlLWRlZmF1bHQ9InNvcnRCeSIgZGF0YS1mb3JtLW5hbWU9InB1YlNlYXJjaERlc2t0b3AiIGlkPSJwdWJzLXNlYXJjaC1mb3JtLWxnIiBtZXRob2Q9ImdldCI+ICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICA8bGFiZWwgZm9yPSJrZXl3b3Jkcy1sZyI+U2VhcmNoPC9sYWJlbD4NCiAgICAgICAgPGlucHV0IE5hbWU9ImtleXdvcmRzLWxnIiBjbGFzcz0iZm9ybS1jb250cm9sIiBkYXRhLXZhbD0idHJ1ZSIgZGF0YS12YWwtbGVuZ3RoPSJUaGUgZmllbGQgU2VhcmNoIG11c3QgYmUgYSBzdHJpbmcgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDI1NS4iIGRhdGEtdmFsLWxlbmd0aC1tYXg9IjI1NSIgaWQ9ImtleXdvcmRzLWxnIiBuYW1lPSJGb3JtLktleXdvcmRzIiB0eXBlPSJ0ZXh0IiB2YWx1ZT0iU1AgMjIyMiIgLz4NCiAgICAgICAgPGVtIGNsYXNzPSJ0ZXh0LW11dGVkIj5TZWFyY2ggcHVibGljYXRpb24gcmVjb3JkIGRhdGE8YnIgLz4gKG5vdCBhIGZ1bGwgdGV4dCBzZWFyY2gpPC9lbT4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgPGxhYmVsIGZvcj0ic29ydEJ5LWxnIj5Tb3J0IEJ5PC9sYWJlbD4NCiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1pbmxpbmUiPg0KICAgICAgICAgICAgPHNlbGVjdCBOYW1lPSJzb3J0QnktbGciIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJzb3J0QnktbGciIG5hbWU9IkZvcm0uU29ydEJ5Ij48b3B0aW9uIHZhbHVlPSJyZWxldmFuY2UiPlJlbGV2YW5jZSAoYmVzdCBtYXRjaCk8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9InJlbGVhc2VkYXRlIERFU0MiPlJlbGVhc2UgRGF0ZSAgKG5ld2VzdCBmaXJzdCk8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9InJlbGVhc2VkYXRlIEFTQyI+UmVsZWFzZSBEYXRlICAob2xkZXN0IGZpcnN0KTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iU2VyaWVzIEFTQyI+U2VyaWVzIChBLVopPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJTZXJpZXMgREVTQyI+U2VyaWVzIChaLUEpPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJOdW1iZXIgQVNDIj5OdW1iZXIgKGxvd2VzdCB0byBoaWdoZXN0KTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iTnVtYmVyIERFU0MiPk51bWJlciAoaGlnaGVzdCB0byBsb3dlc3QpPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJ0aXRsZSBhc2MiPlRpdGxlIChBLVopPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJ0aXRsZSBkZXNjIj5UaXRsZSAoWi1BKTwvb3B0aW9uPg0KPC9zZWxlY3Q+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICA8bGFiZWwgZm9yPSJ2aWV3TW9kZS1sZyI+UmVzdWx0cyBWaWV3PC9sYWJlbD4NCiAgICAgICAgPHNlbGVjdCBOYW1lPSJ2aWV3TW9kZS1sZyIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InZpZXdNb2RlLWxnIiBuYW1lPSJGb3JtLlJlc3VsdHNWaWV3TW9kZSI+PG9wdGlvbiBzZWxlY3RlZD0ic2VsZWN0ZWQiIHZhbHVlPSJicmllZiI+QnJpZWY8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9InN1bW1hcnkiPlN1bW1hcnk8L29wdGlvbj4NCjwvc2VsZWN0Pg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgZm9ybS1pbmxpbmUiPg0KICAgICAgICA8bGFiZWwgZm9yPSJpcHAtbGciIGNsYXNzPSJmb3JtLWNvbnRyb2wtaGFsZiI+SXRlbXMgUGVyIFBhZ2U8L2xhYmVsPg0KICAgICAgICA8c2VsZWN0IE5hbWU9ImlwcC1sZyIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9ImlwcC1sZyIgbmFtZT0iRm9ybS5JdGVtc1BlclBhZ2UiPjxvcHRpb24gc2VsZWN0ZWQ9InNlbGVjdGVkIiB2YWx1ZT0iMjUiPjI1PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSI1MCI+NTA8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9Ijc1Ij43NTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iMTAwIj4xMDA8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9ImFsbCI+QWxsPC9vcHRpb24+DQo8L3NlbGVjdD4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgPGxhYmVsIGZvcj0iZGF0ZUZyb20tbGciPkRhdGU8L2xhYmVsPg0KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWlubGluZSBmb3JtLWRhdGUtaW5saW5lIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGRhdGUiIGRhdGEtZGF0ZS1waWNrZXI9InRydWUiPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBOYW1lPSJkYXRlRnJvbS1sZyIgY2xhc3M9ImZvcm0tY29udHJvbCIgZGF0YS1jb250cm9sLXR5cGU9ImRhdGUiIGRhdGEtdmFsPSJ0cnVlIiBkYXRhLXZhbC1kYXRlPSJUaGUgZmllbGQgRGF0ZSBtdXN0IGJlIGEgZGF0ZS4iIGRhdGEtdmFsaWRhdGlvbj0idHJ1ZSIgZGF0YS12YWxpZGF0aW9uLWNvbXBhcmUtZmllbGQ9ImRhdGVUby1sZyIgZGF0YS12YWxpZGF0aW9uLW1lc3NhZ2U9IkZyb20gZGF0ZSBtdXN0IGJlIGxlc3MgdGhhbiBUbyBkYXRlIiBkYXRhLXZhbGlkYXRpb24tdHlwZT0ibGVzcy10aGFuLWRhdGUiIGlkPSJkYXRlRnJvbS1sZyIgbmFtZT0iRm9ybS5EYXRlRnJvbSIgcGxhY2Vob2xkZXI9IiAgLyAgLyAgICAiIHR5cGU9InRleHQiIHZhbHVlPSIiIC8+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZhIGZhLWNhbGVuZGFyIj4NCiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgZGF0ZSIgZGF0YS1kYXRlLXBpY2tlcj0idHJ1ZSI+DQogICAgICAgICAgICAgICAgPGlucHV0IE5hbWU9ImRhdGVUby1sZyIgY2xhc3M9ImZvcm0tY29udHJvbCIgZGF0YS1jb250cm9sLXR5cGU9ImRhdGUiIGRhdGEtdmFsPSJ0cnVlIiBkYXRhLXZhbC1kYXRlPSJUaGUgZmllbGQgRGF0ZVRvIG11c3QgYmUgYSBkYXRlLiIgaWQ9ImRhdGVUby1sZyIgbmFtZT0iRm9ybS5EYXRlVG8iIHBsYWNlaG9sZGVyPSIgIC8gIC8gICAgIiB0eXBlPSJ0ZXh0IiB2YWx1ZT0iIiAvPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiI+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmYSBmYS1jYWxlbmRhciI+DQogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgIDxsYWJlbCBmb3I9InN0YXR1cy1hbGwtbGciPg0KICAgICAgICAgICAgU3RhdHVzIDxpIGNsYXNzPSJmYSBmYS1pbmZvLWNpcmNsZSIgYXJpYS1oaWRkZW49InRydWUiIGRhdGEtcGxhY2VtZW50PSJyaWdodCIgZGF0YS1odG1sPSJ0cnVlIg0KICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9vbHRpcC10b2dnbGU9InRvb2x0aXBXaXRoRnVuY3Rpb24iIGRhdGEtdGl0bGUtY29udGFpbmVyPSJwdWJsaWNhdGlvbnMtc3RhdHVzLWluZm8iPjwvaT4NCiAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1pbmxpbmUgc3RhdHVzLXR5cGUiIHN0eWxlPSJtYXJnaW4tbGVmdDogMXJlbTsiPg0KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InN0YXR1cy1maW5hbC1sZyIgbmFtZT0ic3RhdHVzLWxnIiB2YWx1ZT0iRmluYWwiDQogICAgICAgICAgICAgICAgICAgIGRhdGEtZGVmYXVsdC1jaGVja2VkPSJUcnVlIiBjaGVja2VkPSYjMzk7Y2hlY2tlZCYjMzk7IC8+IEZpbmFsPGJyIC8+DQogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic3RhdHVzLWRyYWZ0LWxnIiBuYW1lPSJzdGF0dXMtbGciIHZhbHVlPSJEcmFmdCINCiAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiICAvPiBQdWJsaWMgRHJhZnQ8YnIgLz4NCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzdGF0dXMtd2l0aGRyYXduLWxnIiBuYW1lPSJzdGF0dXMtbGciIHZhbHVlPSJXaXRoZHJhd24iDQogICAgICAgICAgICAgICAgICAgIGRhdGEtZGVmYXVsdC1jaGVja2VkPSJUcnVlIiBjaGVja2VkPSYjMzk7Y2hlY2tlZCYjMzk7IC8+IFdpdGhkcmF3bjxiciAvPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgPGxhYmVsIGZvcj0icHViLXNlYXJjaC1zZXJpZXMiPg0KICAgICAgICAgICAgU2VyaWVzDQogICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9InNlcmllcy1hbGwtbGciIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi1zdWNjZXNzIiBkYXRhLWNoZWNrLWFsbD0ic2VyaWVzLWxnIj5DaGVjayBBbGw8L2J1dHRvbj4NCiAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0ic2VyaWVzLWNsZWFyLWxnIiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4tc3VjY2VzcyIgZGF0YS1jaGVjay1ub25lPSJzZXJpZXMtbGciPkNsZWFyPC9idXR0b24+DQogICAgICAgIDwvbGFiZWw+DQogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0taW5saW5lIHNlcmllcy10eXBlIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDFyZW07Ij4NCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzZXJpZXMtZmlwcy1sZyIgbmFtZT0ic2VyaWVzLWxnIiB2YWx1ZT0iRklQUyIgDQogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGVmYXVsdC1jaGVja2VkPSJUcnVlIiAvPiBGSVBTPGJyLz4NCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzZXJpZXMtc3AtbGciIG5hbWU9InNlcmllcy1sZyIgdmFsdWU9IlNQIiANCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiIC8+IFNQPGJyLz4NCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzZXJpZXMtbmlzdGlyLWxnIiBuYW1lPSJzZXJpZXMtbGciIHZhbHVlPSJOSVNUSVIiIA0KICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRlZmF1bHQtY2hlY2tlZD0iVHJ1ZSIgLz4gTklTVElSPGJyLz4NCiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzZXJpZXMtaXRsLWJ1bC1sZyIgbmFtZT0ic2VyaWVzLWxnIiB2YWx1ZT0iSVRMIEJ1bGxldGluIiANCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiIC8+IElUTCBCdWxsZXRpbjxici8+DQogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic2VyaWVzLXdoaXRlLXBhcGVyLWxnIiBuYW1lPSJzZXJpZXMtbGciIHZhbHVlPSJXaGl0ZSBQYXBlciIgDQogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGVmYXVsdC1jaGVja2VkPSJUcnVlIiAvPiBXaGl0ZSBQYXBlcjxici8+DQogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic2VyaWVzLWJ1aWxkLWJsb2NrLWxnIiBuYW1lPSJzZXJpZXMtbGciIHZhbHVlPSJCdWlsZGluZyBCbG9jayIgDQogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGVmYXVsdC1jaGVja2VkPSJUcnVlIiAvPiBCdWlsZGluZyBCbG9jazxici8+DQogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic2VyaWVzLXVzZS1jYXNlLWxnIiBuYW1lPSJzZXJpZXMtbGciIHZhbHVlPSJVc2UgQ2FzZSIgDQogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGVmYXVsdC1jaGVja2VkPSJUcnVlIiAvPiBVc2UgQ2FzZTxici8+DQogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic2VyaWVzLWpvdXJuYWwtbGciIG5hbWU9InNlcmllcy1sZyIgdmFsdWU9IkpvdXJuYWwgQXJ0aWNsZSIgDQogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGVmYXVsdC1jaGVja2VkPSJUcnVlIiAvPiBKb3VybmFsIEFydGljbGU8YnIvPg0KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InNlcmllcy1jb25mLXBhcGVyLWxnIiBuYW1lPSJzZXJpZXMtbGciIHZhbHVlPSJDb25mZXJlbmNlIFBhcGVyIiANCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiIC8+IENvbmZlcmVuY2UgUGFwZXI8YnIvPg0KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InNlcmllcy1ib29rLWxnIiBuYW1lPSJzZXJpZXMtbGciIHZhbHVlPSJCb29rIiANCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiIC8+IEJvb2s8YnIvPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgPGxhYmVsIGZvcj0icHViLXNlYXJjaC10b3BpY3MtbGciPg0KICAgICAgICAgICAgVG9waWNzDQogICAgICAgIDwvbGFiZWw+DQogICAgICAgIDxpbnB1dCBOYW1lPSJ0b3BpY3MtbGciIGlkPSJ0b3BpY3MtbGciIG5hbWU9IkZvcm0uVG9waWNzIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSIiIC8+DQogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tY29udHJvbCB0b3BpY3Mtc2VsZWN0aW9uIg0KICAgICAgICAgICAgIGlkPSJwdWItc2VhcmNoLXRvcGljcy1sZyINCiAgICAgICAgICAgICBjb250ZW50ZWRpdGFibGU9InRydWUiDQogICAgICAgICAgICAgZGF0YS1kcm9wLXRhcmdldD0icHViLXNlYXJjaC10b3BpY3MtZHJvcC1sZyINCiAgICAgICAgICAgICBkYXRhLWZpZWxkLW5hbWU9InRvcGljcy1sZyINCiAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIg0KICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InRvcGljcy1zZWxlY3Rpb24tZHJvcGRvd24gZGVza3RvcCIgaWQ9InB1Yi1zZWFyY2gtdG9waWNzLWRyb3AtbGciIHN0eWxlPSJkaXNwbGF5OiBub25lOyIgZGF0YS10b3BpY3Mtc2VsZWN0b3I9IiI+PGRpdiBjbGFzcz0iY29sLXNtLTQiPjxzdHJvbmc+U2VjdXJpdHkgYW5kIFByaXZhY3k8L3N0cm9uZz48YnIvPgo8dWw+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcwLTI3NDgxIiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy9zZWN1cml0eS1hbmQtcHJpdmFjeS9jcnlwdG9ncmFwaHkiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0ODEiIGRhdGEtdG9waWMtdGV4dD0iY3J5cHRvZ3JhcGh5Ij5jcnlwdG9ncmFwaHk8L2E+PHVsIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY0NyIgZGF0YS10b3BpYy10ZXh0PSJkaWdpdGFsIHNpZ25hdHVyZXMiPmRpZ2l0YWwgc2lnbmF0dXJlczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NDgiIGRhdGEtdG9waWMtdGV4dD0iZW5jcnlwdGlvbiI+ZW5jcnlwdGlvbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NDkiIGRhdGEtdG9waWMtdGV4dD0ia2V5IG1hbmFnZW1lbnQiPmtleSBtYW5hZ2VtZW50PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY1MCIgZGF0YS10b3BpYy10ZXh0PSJtZXNzYWdlIGF1dGhlbnRpY2F0aW9uIj5tZXNzYWdlIGF1dGhlbnRpY2F0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY1MSIgZGF0YS10b3BpYy10ZXh0PSJwb3N0LXF1YW50dW0gY3J5cHRvZ3JhcGh5Ij5wb3N0LXF1YW50dW0gY3J5cHRvZ3JhcGh5PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY1MiIgZGF0YS10b3BpYy10ZXh0PSJyYW5kb20gbnVtYmVyIGdlbmVyYXRpb24iPnJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NTMiIGRhdGEtdG9waWMtdGV4dD0ic2VjdXJlIGhhc2hpbmciPnNlY3VyZSBoYXNoaW5nPC9hPjwvbGk+PC91bD4KPC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDgyIiBkYXRhLXRvcGljLXRleHQ9ImN5YmVyIHN1cHBseSBjaGFpbiByaXNrIG1hbmFnZW1lbnQiPmN5YmVyIHN1cHBseSBjaGFpbiByaXNrIG1hbmFnZW1lbnQ8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDgzIiBkYXRhLXRvcGljLXRleHQ9ImdlbmVyYWwgc2VjdXJpdHkgJiBwcml2YWN5Ij5nZW5lcmFsIHNlY3VyaXR5ICYgcHJpdmFjeTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNDY3MC0yNzQ4NCIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3Mvc2VjdXJpdHktYW5kLXByaXZhY3kvaWRlbnRpdHktYW5kLWFjY2Vzcy1tYW5hZ2VtZW50Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDg0IiBkYXRhLXRvcGljLXRleHQ9ImlkZW50aXR5ICYgYWNjZXNzIG1hbmFnZW1lbnQiPmlkZW50aXR5ICYgYWNjZXNzIG1hbmFnZW1lbnQ8L2E+PHVsIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY2MyIgZGF0YS10b3BpYy10ZXh0PSJhY2Nlc3MgYXV0aG9yaXphdGlvbiI+YWNjZXNzIGF1dGhvcml6YXRpb248L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjY0IiBkYXRhLXRvcGljLXRleHQ9ImFjY2VzcyBjb250cm9sIj5hY2Nlc3MgY29udHJvbDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NjUiIGRhdGEtdG9waWMtdGV4dD0iYXV0aGVudGljYXRpb24iPmF1dGhlbnRpY2F0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY2NiIgZGF0YS10b3BpYy10ZXh0PSJQZXJzb25hbCBJZGVudGl0eSBWZXJpZmljYXRpb24iPlBlcnNvbmFsIElkZW50aXR5IFZlcmlmaWNhdGlvbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NjciIGRhdGEtdG9waWMtdGV4dD0icHVibGljIGtleSBpbmZyYXN0cnVjdHVyZSI+cHVibGljIGtleSBpbmZyYXN0cnVjdHVyZTwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcwLTI3NDg1IiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy9zZWN1cml0eS1hbmQtcHJpdmFjeS9wcml2YWN5Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDg1IiBkYXRhLXRvcGljLXRleHQ9InByaXZhY3kiPnByaXZhY3k8L2E+PHVsIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY4MCIgZGF0YS10b3BpYy10ZXh0PSJwZXJzb25hbGx5IGlkZW50aWZpYWJsZSBpbmZvcm1hdGlvbiI+cGVyc29uYWxseSBpZGVudGlmaWFibGUgaW5mb3JtYXRpb248L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjgxIiBkYXRhLXRvcGljLXRleHQ9InByaXZhY3kgZW5naW5lZXJpbmciPnByaXZhY3kgZW5naW5lZXJpbmc8L2E+PC9saT48L3VsPgo8L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNDY3MC0yNzQ4NiIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3Mvc2VjdXJpdHktYW5kLXByaXZhY3kvcmlzay1tYW5hZ2VtZW50Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDg2IiBkYXRhLXRvcGljLXRleHQ9InJpc2sgbWFuYWdlbWVudCI+cmlzayBtYW5hZ2VtZW50PC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2ODIiIGRhdGEtdG9waWMtdGV4dD0iY2F0ZWdvcml6YXRpb24iPmNhdGVnb3JpemF0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY4MyIgZGF0YS10b3BpYy10ZXh0PSJjb250aW51b3VzIG1vbml0b3JpbmciPmNvbnRpbnVvdXMgbW9uaXRvcmluZzwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNzQ4Ni0yNzY4NCIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3Mvc2VjdXJpdHktYW5kLXByaXZhY3kvcmlzay1tYW5hZ2VtZW50L2NvbnRyb2xzIj48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njg0IiBkYXRhLXRvcGljLXRleHQ9ImNvbnRyb2xzIj5jb250cm9sczwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzY3IiBkYXRhLXRvcGljLXRleHQ9ImNvbnRyb2xzIGFzc2Vzc21lbnQiPmNvbnRyb2xzIGFzc2Vzc21lbnQ8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzY4IiBkYXRhLXRvcGljLXRleHQ9InByaXZhY3kgY29udHJvbHMiPnByaXZhY3kgY29udHJvbHM8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzY5IiBkYXRhLXRvcGljLXRleHQ9InNlY3VyaXR5IGNvbnRyb2xzIj5zZWN1cml0eSBjb250cm9sczwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY4NSIgZGF0YS10b3BpYy10ZXh0PSJyaXNrIGFzc2Vzc21lbnQiPnJpc2sgYXNzZXNzbWVudDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2ODYiIGRhdGEtdG9waWMtdGV4dD0icm9vdHMgb2YgdHJ1c3QiPnJvb3RzIG9mIHRydXN0PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY4NyIgZGF0YS10b3BpYy10ZXh0PSJzeXN0ZW0gYXV0aG9yaXphdGlvbiI+c3lzdGVtIGF1dGhvcml6YXRpb248L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLXBsdXMgZmEtZnciIGlkPSJ0b3BpY3MtZXhwYW5kZXItMjc0ODYtMjc2ODgiIGRhdGEtZXhwYW5kZXItZm9yPSIvdG9waWNzL3NlY3VyaXR5LWFuZC1wcml2YWN5L3Jpc2stbWFuYWdlbWVudC90aHJlYXRzIj48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njg4IiBkYXRhLXRvcGljLXRleHQ9InRocmVhdHMiPnRocmVhdHM8L2E+PHVsIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzc3MCIgZGF0YS10b3BpYy10ZXh0PSJhZHZhbmNlZCBwZXJzaXN0ZW50IHRocmVhdCI+YWR2YW5jZWQgcGVyc2lzdGVudCB0aHJlYXQ8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzcxIiBkYXRhLXRvcGljLXRleHQ9ImJvdG5ldHMiPmJvdG5ldHM8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzcyIiBkYXRhLXRvcGljLXRleHQ9ImluZm9ybWF0aW9uIHNoYXJpbmciPmluZm9ybWF0aW9uIHNoYXJpbmc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzczIiBkYXRhLXRvcGljLXRleHQ9ImludHJ1c2lvbiBkZXRlY3Rpb24gJiBwcmV2ZW50aW9uIj5pbnRydXNpb24gZGV0ZWN0aW9uICYgcHJldmVudGlvbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3NzQiIGRhdGEtdG9waWMtdGV4dD0ibWFsd2FyZSI+bWFsd2FyZTwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY4OSIgZGF0YS10b3BpYy10ZXh0PSJ2dWxuZXJhYmlsaXR5IG1hbmFnZW1lbnQiPnZ1bG5lcmFiaWxpdHkgbWFuYWdlbWVudDwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcwLTI3NDg3IiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy9zZWN1cml0eS1hbmQtcHJpdmFjeS9zZWN1cml0eS1hbmQtYmVoYXZpb3IiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0ODciIGRhdGEtdG9waWMtdGV4dD0ic2VjdXJpdHkgJiBiZWhhdmlvciI+c2VjdXJpdHkgJiBiZWhhdmlvcjwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzA5IiBkYXRhLXRvcGljLXRleHQ9ImFjY2Vzc2liaWxpdHkiPmFjY2Vzc2liaWxpdHk8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzEwIiBkYXRhLXRvcGljLXRleHQ9ImJlaGF2aW9yIj5iZWhhdmlvcjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MTEiIGRhdGEtdG9waWMtdGV4dD0idXNhYmlsaXR5Ij51c2FiaWxpdHk8L2E+PC9saT48L3VsPgo8L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNDY3MC0yNzQ4OCIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3Mvc2VjdXJpdHktYW5kLXByaXZhY3kvc2VjdXJpdHktbWVhc3VyZW1lbnQiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0ODgiIGRhdGEtdG9waWMtdGV4dD0ic2VjdXJpdHkgbWVhc3VyZW1lbnQiPnNlY3VyaXR5IG1lYXN1cmVtZW50PC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2OTAiIGRhdGEtdG9waWMtdGV4dD0iYW5hbHl0aWNzIj5hbmFseXRpY3M8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjkxIiBkYXRhLXRvcGljLXRleHQ9ImFzc3VyYW5jZSI+YXNzdXJhbmNlPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY5MiIgZGF0YS10b3BpYy10ZXh0PSJtb2RlbGluZyI+bW9kZWxpbmc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjkzIiBkYXRhLXRvcGljLXRleHQ9InRlc3RpbmcgJiB2YWxpZGF0aW9uIj50ZXN0aW5nICYgdmFsaWRhdGlvbjwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcwLTI3NDg5IiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy9zZWN1cml0eS1hbmQtcHJpdmFjeS9zZWN1cml0eS1wcm9ncmFtcy1hbmQtb3BlcmF0aW9ucyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ4OSIgZGF0YS10b3BpYy10ZXh0PSJzZWN1cml0eSBwcm9ncmFtcyAmIG9wZXJhdGlvbnMiPnNlY3VyaXR5IHByb2dyYW1zICYgb3BlcmF0aW9uczwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njk0IiBkYXRhLXRvcGljLXRleHQ9ImFjcXVpc2l0aW9uIj5hY3F1aXNpdGlvbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2OTUiIGRhdGEtdG9waWMtdGV4dD0iYXNzZXQgbWFuYWdlbWVudCI+YXNzZXQgbWFuYWdlbWVudDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2OTYiIGRhdGEtdG9waWMtdGV4dD0iYXVkaXQgJiBhY2NvdW50YWJpbGl0eSI+YXVkaXQgJiBhY2NvdW50YWJpbGl0eTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2OTciIGRhdGEtdG9waWMtdGV4dD0iYXdhcmVuZXNzIHRyYWluaW5nICYgZWR1Y2F0aW9uIj5hd2FyZW5lc3MgdHJhaW5pbmcgJiBlZHVjYXRpb248L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njk4IiBkYXRhLXRvcGljLXRleHQ9ImNvbmZpZ3VyYXRpb24gbWFuYWdlbWVudCI+Y29uZmlndXJhdGlvbiBtYW5hZ2VtZW50PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY5OSIgZGF0YS10b3BpYy10ZXh0PSJjb250aW5nZW5jeSBwbGFubmluZyI+Y29udGluZ2VuY3kgcGxhbm5pbmc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzAwIiBkYXRhLXRvcGljLXRleHQ9ImluY2lkZW50IHJlc3BvbnNlIj5pbmNpZGVudCByZXNwb25zZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MDEiIGRhdGEtdG9waWMtdGV4dD0ibWFpbnRlbmFuY2UiPm1haW50ZW5hbmNlPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcwMiIgZGF0YS10b3BpYy10ZXh0PSJtZWRpYSBwcm90ZWN0aW9uIj5tZWRpYSBwcm90ZWN0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcwMyIgZGF0YS10b3BpYy10ZXh0PSJwYXRjaCBtYW5hZ2VtZW50Ij5wYXRjaCBtYW5hZ2VtZW50PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcwNCIgZGF0YS10b3BpYy10ZXh0PSJwZXJzb25uZWwgc2VjdXJpdHkiPnBlcnNvbm5lbCBzZWN1cml0eTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MDUiIGRhdGEtdG9waWMtdGV4dD0icGh5c2ljYWwgJiBlbnZpcm9ubWVudGFsIHByb3RlY3Rpb24iPnBoeXNpY2FsICYgZW52aXJvbm1lbnRhbCBwcm90ZWN0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcwNiIgZGF0YS10b3BpYy10ZXh0PSJwbGFubmluZyI+cGxhbm5pbmc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzA3IiBkYXRhLXRvcGljLXRleHQ9InByb2dyYW0gbWFuYWdlbWVudCI+cHJvZ3JhbSBtYW5hZ2VtZW50PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcwOCIgZGF0YS10b3BpYy10ZXh0PSJzZWN1cml0eSBhdXRvbWF0aW9uIj5zZWN1cml0eSBhdXRvbWF0aW9uPC9hPjwvbGk+PC91bD4KPC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLXBsdXMgZmEtZnciIGlkPSJ0b3BpY3MtZXhwYW5kZXItMjQ2NzAtMjc0OTAiIGRhdGEtZXhwYW5kZXItZm9yPSIvdG9waWNzL3NlY3VyaXR5LWFuZC1wcml2YWN5L3N5c3RlbXMtc2VjdXJpdHktZW5naW5lZXJpbmciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0OTAiIGRhdGEtdG9waWMtdGV4dD0ic3lzdGVtcyBzZWN1cml0eSBlbmdpbmVlcmluZyI+c3lzdGVtcyBzZWN1cml0eSBlbmdpbmVlcmluZzwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLXBsdXMgZmEtZnciIGlkPSJ0b3BpY3MtZXhwYW5kZXItMjc0OTAtMjc3MTMiIGRhdGEtZXhwYW5kZXItZm9yPSIvdG9waWNzL3NlY3VyaXR5LWFuZC1wcml2YWN5L3N5c3RlbXMtc2VjdXJpdHktZW5naW5lZXJpbmcvdHJ1c3R3b3J0aGluZXNzIj48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzEzIiBkYXRhLXRvcGljLXRleHQ9InRydXN0d29ydGhpbmVzcyI+dHJ1c3R3b3J0aGluZXNzPC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3NzUiIGRhdGEtdG9waWMtdGV4dD0icmVsaWFiaWxpdHkiPnJlbGlhYmlsaXR5PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzc3NiIgZGF0YS10b3BpYy10ZXh0PSJyZXNpbGllbmNlIj5yZXNpbGllbmNlPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzc3NyIgZGF0YS10b3BpYy10ZXh0PSJzYWZldHkiPnNhZmV0eTwvYT48L2xpPjwvdWw+CjwvbGk+PC91bD4KPC9saT48L3VsPjxzdHJvbmc+VGVjaG5vbG9naWVzPC9zdHJvbmc+PGJyLz4KPHVsPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0OTEiIGRhdGEtdG9waWMtdGV4dD0iYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UiPmFydGlmaWNpYWwgaW50ZWxsaWdlbmNlPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ5MiIgZGF0YS10b3BpYy10ZXh0PSJiaWcgZGF0YSI+YmlnIGRhdGE8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDkzIiBkYXRhLXRvcGljLXRleHQ9ImJpb21ldHJpY3MiPmJpb21ldHJpY3M8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDk0IiBkYXRhLXRvcGljLXRleHQ9ImJsb2NrY2hhaW4iPmJsb2NrY2hhaW48L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDk1IiBkYXRhLXRvcGljLXRleHQ9ImNsb3VkICYgdmlydHVhbGl6YXRpb24iPmNsb3VkICYgdmlydHVhbGl6YXRpb248L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDk2IiBkYXRhLXRvcGljLXRleHQ9ImNvbWJpbmF0b3JpYWwgdGVzdGluZyI+Y29tYmluYXRvcmlhbCB0ZXN0aW5nPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ5NyIgZGF0YS10b3BpYy10ZXh0PSJjb21wbGV4aXR5Ij5jb21wbGV4aXR5PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcxLTI3NDk5IiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy90ZWNobm9sb2dpZXMvaGFyZHdhcmUiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0OTkiIGRhdGEtdG9waWMtdGV4dD0iaGFyZHdhcmUiPmhhcmR3YXJlPC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MTQiIGRhdGEtdG9waWMtdGV4dD0iY2lyY3VpdHMiPmNpcmN1aXRzPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcxNSIgZGF0YS10b3BpYy10ZXh0PSJwZXJzb25hbCBjb21wdXRlcnMiPnBlcnNvbmFsIGNvbXB1dGVyczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MTYiIGRhdGEtdG9waWMtdGV4dD0ic2Vuc29ycyI+c2Vuc29yczwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ5OCIgZGF0YS10b3BpYy10ZXh0PSJtb2JpbGUiPm1vYmlsZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNDY3MS0yNzUwMCIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3MvdGVjaG5vbG9naWVzL25ldHdvcmtzIj48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NTAwIiBkYXRhLXRvcGljLXRleHQ9Im5ldHdvcmtzIj5uZXR3b3JrczwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzE3IiBkYXRhLXRvcGljLXRleHQ9ImVtYWlsIj5lbWFpbDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MTgiIGRhdGEtdG9waWMtdGV4dD0iZmlyZXdhbGxzIj5maXJld2FsbHM8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzE5IiBkYXRhLXRvcGljLXRleHQ9ImludGVybmV0Ij5pbnRlcm5ldDwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzUwMSIgZGF0YS10b3BpYy10ZXh0PSJxdWFudHVtIGluZm9ybWF0aW9uIHNjaWVuY2UiPnF1YW50dW0gaW5mb3JtYXRpb24gc2NpZW5jZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc1MDIiIGRhdGEtdG9waWMtdGV4dD0ic2VydmVycyI+c2VydmVyczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc1MDMiIGRhdGEtdG9waWMtdGV4dD0ic21hcnQgY2FyZHMiPnNtYXJ0IGNhcmRzPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcxLTI3NTA0IiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy90ZWNobm9sb2dpZXMvc29mdHdhcmUtZmlybXdhcmUiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc1MDQiIGRhdGEtdG9waWMtdGV4dD0ic29mdHdhcmUgJiBmaXJtd2FyZSI+c29mdHdhcmUgJiBmaXJtd2FyZTwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzIwIiBkYXRhLXRvcGljLXRleHQ9IkJJT1MiPkJJT1M8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzIxIiBkYXRhLXRvcGljLXRleHQ9ImRhdGFiYXNlcyI+ZGF0YWJhc2VzPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcyMiIgZGF0YS10b3BpYy10ZXh0PSJvcGVyYXRpbmcgc3lzdGVtcyI+b3BlcmF0aW5nIHN5c3RlbXM8L2E+PC9saT48L3VsPgo8L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc1MDUiIGRhdGEtdG9waWMtdGV4dD0ic3RvcmFnZSI+c3RvcmFnZTwvYT48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLXNtLTQiPjxzdHJvbmc+QXBwbGljYXRpb25zPC9zdHJvbmc+PGJyLz4KPHVsPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NTYiIGRhdGEtdG9waWMtdGV4dD0iY29tbXVuaWNhdGlvbnMgJiB3aXJlbGVzcyI+Y29tbXVuaWNhdGlvbnMgJiB3aXJlbGVzczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NTciIGRhdGEtdG9waWMtdGV4dD0iY3liZXItcGh5c2ljYWwgc3lzdGVtcyI+Y3liZXItcGh5c2ljYWwgc3lzdGVtczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NTgiIGRhdGEtdG9waWMtdGV4dD0iY3liZXJzZWN1cml0eSBlZHVjYXRpb24iPmN5YmVyc2VjdXJpdHkgZWR1Y2F0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ1OSIgZGF0YS10b3BpYy10ZXh0PSJjeWJlcnNlY3VyaXR5IGZyYW1ld29yayI+Y3liZXJzZWN1cml0eSBmcmFtZXdvcms8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDYwIiBkYXRhLXRvcGljLXRleHQ9ImN5YmVyc2VjdXJpdHkgd29ya2ZvcmNlIj5jeWJlcnNlY3VyaXR5IHdvcmtmb3JjZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NjEiIGRhdGEtdG9waWMtdGV4dD0iZW50ZXJwcmlzZSI+ZW50ZXJwcmlzZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NjIiIGRhdGEtdG9waWMtdGV4dD0iZm9yZW5zaWNzIj5mb3JlbnNpY3M8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDYzIiBkYXRhLXRvcGljLXRleHQ9ImluZHVzdHJpYWwgY29udHJvbCBzeXN0ZW1zIj5pbmR1c3RyaWFsIGNvbnRyb2wgc3lzdGVtczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NjQiIGRhdGEtdG9waWMtdGV4dD0iSW50ZXJuZXQgb2YgVGhpbmdzIj5JbnRlcm5ldCBvZiBUaGluZ3M8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI4OTE0IiBkYXRhLXRvcGljLXRleHQ9InBvc2l0aW9uaW5nIG5hdmlnYXRpb24gJiB0aW1pbmciPnBvc2l0aW9uaW5nIG5hdmlnYXRpb24gJiB0aW1pbmc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDY1IiBkYXRhLXRvcGljLXRleHQ9InNtYWxsICYgbWVkaXVtIGJ1c2luZXNzIj5zbWFsbCAmIG1lZGl1bSBidXNpbmVzczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NjYiIGRhdGEtdG9waWMtdGV4dD0idGVsZXdvcmsiPnRlbGV3b3JrPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ2NyIgZGF0YS10b3BpYy10ZXh0PSJ2b3RpbmciPnZvdGluZzwvYT48L2xpPjwvdWw+PHN0cm9uZz5MYXdzIGFuZCBSZWd1bGF0aW9uczwvc3Ryb25nPjxici8+Cjx1bD48bGk+PGkgY2xhc3M9ImZhIGZhLXBsdXMgZmEtZnciIGlkPSJ0b3BpY3MtZXhwYW5kZXItMjQ2NzMtMjc0NjgiIGRhdGEtZXhwYW5kZXItZm9yPSIvdG9waWNzL2xhd3MtYW5kLXJlZ3VsYXRpb25zL2V4ZWN1dGl2ZS1kb2N1bWVudHMiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NjgiIGRhdGEtdG9waWMtdGV4dD0iZXhlY3V0aXZlIGRvY3VtZW50cyI+ZXhlY3V0aXZlIGRvY3VtZW50czwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjY4IiBkYXRhLXRvcGljLXRleHQ9IkNvbXByZWhlbnNpdmUgTmF0aW9uYWwgQ3liZXJzZWN1cml0eSBJbml0aWF0aXZlIj5Db21wcmVoZW5zaXZlIE5hdGlvbmFsIEN5YmVyc2VjdXJpdHkgSW5pdGlhdGl2ZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NjkiIGRhdGEtdG9waWMtdGV4dD0iQ3liZXJzZWN1cml0eSBTdHJhdGVneSBhbmQgSW1wbGVtZW50YXRpb24gUGxhbiI+Q3liZXJzZWN1cml0eSBTdHJhdGVneSBhbmQgSW1wbGVtZW50YXRpb24gUGxhbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NzAiIGRhdGEtdG9waWMtdGV4dD0iQ3liZXJzcGFjZSBQb2xpY3kgUmV2aWV3Ij5DeWJlcnNwYWNlIFBvbGljeSBSZXZpZXc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjcxIiBkYXRhLXRvcGljLXRleHQ9IkV4ZWN1dGl2ZSBPcmRlciAxMzYzNiI+RXhlY3V0aXZlIE9yZGVyIDEzNjM2PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY3MiIgZGF0YS10b3BpYy10ZXh0PSJFeGVjdXRpdmUgT3JkZXIgMTM3MDIiPkV4ZWN1dGl2ZSBPcmRlciAxMzcwMjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NzMiIGRhdGEtdG9waWMtdGV4dD0iRXhlY3V0aXZlIE9yZGVyIDEzNzE4Ij5FeGVjdXRpdmUgT3JkZXIgMTM3MTg8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njc0IiBkYXRhLXRvcGljLXRleHQ9IkV4ZWN1dGl2ZSBPcmRlciAxMzgwMCI+RXhlY3V0aXZlIE9yZGVyIDEzODAwPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyODkxNSIgZGF0YS10b3BpYy10ZXh0PSJFeGVjdXRpdmUgT3JkZXIgMTM5MDUiPkV4ZWN1dGl2ZSBPcmRlciAxMzkwNTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NzUiIGRhdGEtdG9waWMtdGV4dD0iRmVkZXJhbCBDeWJlcnNlY3VyaXR5IFJlc2VhcmNoIGFuZCBEZXZlbG9wbWVudCBTdHJhdGVnaWMgUGxhbiI+RmVkZXJhbCBDeWJlcnNlY3VyaXR5IFJlc2VhcmNoIGFuZCBEZXZlbG9wbWVudCBTdHJhdGVnaWMgUGxhbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NzYiIGRhdGEtdG9waWMtdGV4dD0iSG9tZWxhbmQgU2VjdXJpdHkgUHJlc2lkZW50aWFsIERpcmVjdGl2ZSA3Ij5Ib21lbGFuZCBTZWN1cml0eSBQcmVzaWRlbnRpYWwgRGlyZWN0aXZlIDc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njc3IiBkYXRhLXRvcGljLXRleHQ9IkhvbWVsYW5kIFNlY3VyaXR5IFByZXNpZGVudGlhbCBEaXJlY3RpdmUgMTIiPkhvbWVsYW5kIFNlY3VyaXR5IFByZXNpZGVudGlhbCBEaXJlY3RpdmUgMTI8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njc4IiBkYXRhLXRvcGljLXRleHQ9Ik9NQiBDaXJjdWxhciBBLTExIj5PTUIgQ2lyY3VsYXIgQS0xMTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NzkiIGRhdGEtdG9waWMtdGV4dD0iT01CIENpcmN1bGFyIEEtMTMwIj5PTUIgQ2lyY3VsYXIgQS0xMzA8L2E+PC9saT48L3VsPgo8L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNDY3My0yNzQ2OSIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3MvbGF3cy1hbmQtcmVndWxhdGlvbnMvbGF3cyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ2OSIgZGF0YS10b3BpYy10ZXh0PSJsYXdzIj5sYXdzPC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NTQiIGRhdGEtdG9waWMtdGV4dD0iQ3liZXIgU2VjdXJpdHkgUiZEIEFjdCI+Q3liZXIgU2VjdXJpdHkgUiZEIEFjdDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NTUiIGRhdGEtdG9waWMtdGV4dD0iQ3liZXJzZWN1cml0eSBFbmhhbmNlbWVudCBBY3QiPkN5YmVyc2VjdXJpdHkgRW5oYW5jZW1lbnQgQWN0PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY1NiIgZGF0YS10b3BpYy10ZXh0PSJFLUdvdmVybm1lbnQgQWN0Ij5FLUdvdmVybm1lbnQgQWN0PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY1NyIgZGF0YS10b3BpYy10ZXh0PSJFbmVyZ3kgSW5kZXBlbmRlbmNlIGFuZCBTZWN1cml0eSBBY3QiPkVuZXJneSBJbmRlcGVuZGVuY2UgYW5kIFNlY3VyaXR5IEFjdDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NTgiIGRhdGEtdG9waWMtdGV4dD0iRmVkZXJhbCBJbmZvcm1hdGlvbiBTZWN1cml0eSBNb2Rlcm5pemF0aW9uIEFjdCI+RmVkZXJhbCBJbmZvcm1hdGlvbiBTZWN1cml0eSBNb2Rlcm5pemF0aW9uIEFjdDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NTkiIGRhdGEtdG9waWMtdGV4dD0iRmlyc3QgUmVzcG9uZGVyIE5ldHdvcmsgQXV0aG9yaXR5Ij5GaXJzdCBSZXNwb25kZXIgTmV0d29yayBBdXRob3JpdHk8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjYwIiBkYXRhLXRvcGljLXRleHQ9IkhlYWx0aCBJbnN1cmFuY2UgUG9ydGFiaWxpdHkgYW5kIEFjY291bnRhYmlsaXR5IEFjdCI+SGVhbHRoIEluc3VyYW5jZSBQb3J0YWJpbGl0eSBhbmQgQWNjb3VudGFiaWxpdHkgQWN0PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY2MSIgZGF0YS10b3BpYy10ZXh0PSJIZWxwIEFtZXJpY2EgVm90ZSBBY3QiPkhlbHAgQW1lcmljYSBWb3RlIEFjdDwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjczLTI3NDcwIiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy9sYXdzLWFuZC1yZWd1bGF0aW9ucy9yZWd1bGF0aW9ucyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ3MCIgZGF0YS10b3BpYy10ZXh0PSJyZWd1bGF0aW9ucyI+cmVndWxhdGlvbnM8L2E+PHVsIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY2MiIgZGF0YS10b3BpYy10ZXh0PSJGZWRlcmFsIEFjcXVpc2l0aW9uIFJlZ3VsYXRpb24iPkZlZGVyYWwgQWNxdWlzaXRpb24gUmVndWxhdGlvbjwvYT48L2xpPjwvdWw+CjwvbGk+PC91bD48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtc20tNCI+PHN0cm9uZz5BY3Rpdml0aWVzIGFuZCBQcm9kdWN0czwvc3Ryb25nPjxici8+Cjx1bD48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDUyIiBkYXRhLXRvcGljLXRleHQ9ImFubnVhbCByZXBvcnRzIj5hbm51YWwgcmVwb3J0czwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NTMiIGRhdGEtdG9waWMtdGV4dD0iY29uZmVyZW5jZXMgJiB3b3Jrc2hvcHMiPmNvbmZlcmVuY2VzICYgd29ya3Nob3BzPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ1NCIgZGF0YS10b3BpYy10ZXh0PSJyZWZlcmVuY2UgbWF0ZXJpYWxzIj5yZWZlcmVuY2UgbWF0ZXJpYWxzPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ1NSIgZGF0YS10b3BpYy10ZXh0PSJzdGFuZGFyZHMgZGV2ZWxvcG1lbnQiPnN0YW5kYXJkcyBkZXZlbG9wbWVudDwvYT48L2xpPjwvdWw+PHN0cm9uZz5TZWN0b3JzPC9zdHJvbmc+PGJyLz4KPHVsPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NzEiIGRhdGEtdG9waWMtdGV4dD0iYWVyb3NwYWNlIj5hZXJvc3BhY2U8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLXBsdXMgZmEtZnciIGlkPSJ0b3BpY3MtZXhwYW5kZXItMjQ2NzUtMjc0NzIiIGRhdGEtZXhwYW5kZXItZm9yPSIvdG9waWNzL3NlY3RvcnMvZW5lcmd5Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDcyIiBkYXRhLXRvcGljLXRleHQ9ImVuZXJneSI+ZW5lcmd5PC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MTIiIGRhdGEtdG9waWMtdGV4dD0ic21hcnQgZ3JpZCI+c21hcnQgZ3JpZDwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ3MyIgZGF0YS10b3BpYy10ZXh0PSJmaW5hbmNpYWwgc2VydmljZXMiPmZpbmFuY2lhbCBzZXJ2aWNlczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NzQiIGRhdGEtdG9waWMtdGV4dD0iaGVhbHRoY2FyZSI+aGVhbHRoY2FyZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NzUiIGRhdGEtdG9waWMtdGV4dD0iaG9zcGl0YWxpdHkiPmhvc3BpdGFsaXR5PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ3NiIgZGF0YS10b3BpYy10ZXh0PSJtYW51ZmFjdHVyaW5nIj5tYW51ZmFjdHVyaW5nPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ3NyIgZGF0YS10b3BpYy10ZXh0PSJwdWJsaWMgc2FmZXR5Ij5wdWJsaWMgc2FmZXR5PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ3OCIgZGF0YS10b3BpYy10ZXh0PSJyZXRhaWwiPnJldGFpbDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NzkiIGRhdGEtdG9waWMtdGV4dD0idGVsZWNvbW11bmljYXRpb25zIj50ZWxlY29tbXVuaWNhdGlvbnM8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDgwIiBkYXRhLXRvcGljLXRleHQ9InRyYW5zcG9ydGF0aW9uIj50cmFuc3BvcnRhdGlvbjwvYT48L2xpPjwvdWw+PC9kaXY+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0taW5saW5lIHRvcGljcy10eXBlIj4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icmFkaW8tbGFiZWwiPk1hdGNoIEFOWTogPGlucHV0IE5hbWU9InRvcGljc01hdGNoLWxnIiBjaGVja2VkPSJjaGVja2VkIiBpZD0idG9waWNzTWF0Y2gtYW55LWxnIiBuYW1lPSJGb3JtLlRvcGljc01hdGNoIiB0eXBlPSJyYWRpbyIgdmFsdWU9IkFOWSIgLz48L2xhYmVsPg0KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyYWRpby1sYWJlbCI+TWF0Y2ggQUxMOiA8aW5wdXQgTmFtZT0idG9waWNzTWF0Y2gtbGciIGlkPSJ0b3BpY3NNYXRjaC1hbGwtbGciIG5hbWU9IkZvcm0uVG9waWNzTWF0Y2giIHR5cGU9InJhZGlvIiB2YWx1ZT0iQUxMIiAvPjwvbGFiZWw+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICA8bGFiZWwgZm9yPSJwdWItc2VhcmNoLWNvbnRyb2xzLWxnIj4NCiAgICAgICAgICAgIENvbnRyb2wgRmFtaWx5ICg4MDAtNTMpDQogICAgICAgIDwvbGFiZWw+DQogICAgICAgIDxpbnB1dCBOYW1lPSJjb250cm9scy1sZyIgaWQ9ImNvbnRyb2xzLWxnIiBuYW1lPSJGb3JtLkNvbnRyb2xzIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSIiIC8+DQogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tY29udHJvbCBjb250cm9scy1zZWxlY3Rpb24iDQogICAgICAgICAgICAgaWQ9InB1Yi1zZWFyY2gtY29udHJvbHMtbGciDQogICAgICAgICAgICAgY29udGVudGVkaXRhYmxlPSJ0cnVlIg0KICAgICAgICAgICAgIGRhdGEtZHJvcC10YXJnZXQ9InB1Yi1zZWFyY2gtY29udHJvbHMtZHJvcC1sZyINCiAgICAgICAgICAgICBkYXRhLWZpZWxkLW5hbWU9ImNvbnRyb2xzLWxnIg0KICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9InRydWUiDQogICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbHMtc2VsZWN0aW9uLWRyb3Bkb3duIGRlc2t0b3AiIGlkPSJwdWItc2VhcmNoLWNvbnRyb2xzLWRyb3AtbGciIHN0eWxlPSJkaXNwbGF5OiBub25lOyIgZGF0YS1jb250cm9scy1zZWxlY3Rvcj0iIj4NCiAgICAgICAgICAgIDxzdHJvbmc+Q29udHJvbCBGYW1pbGllczwvc3Ryb25nPg0KICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSI2M2Q1NGFlNC1jNmNmLTRhZTQtYTM5OC1mMTkyOThjNzQ5MDMiPkFDIC0gQWNjZXNzIENvbnRyb2w8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iMzZmYjBiMTAtZjZhZS00ZTBlLTgwM2MtYmVjZTljOTQ3ZmQ4Ij5BVCAtIEF3YXJlbmVzcyBhbmQgVHJhaW5pbmc8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iNDI0M2Q1MmMtZmY1ZS00MTdiLThlMWItODM0NGZmODExNTcwIj5BVSAtIEF1ZGl0IGFuZCBBY2NvdW50YWJpbGl0eTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSIwZDkzYmYyOS00NTUxLTRiN2QtOTY3Ny0yM2QwZWIwNTI0ZTAiPkNBIC0gQXNzZXNzbWVudCwgQXV0aG9yaXphdGlvbiBhbmQgTW9uaXRvcmluZzwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSI4MDliNzU2My1mMDUwLTRiYmYtYTBlNC03YWQyNTQxMTczNGQiPkNNIC0gQ29uZmlndXJhdGlvbiBNYW5hZ2VtZW50PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9ImRhNTFiZTVjLWI4NmQtNGUzMi05NDg0LWY5NGNmNzViODIxNyI+Q1AgLSBDb250aW5nZW5jeSBQbGFubmluZzwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSJlZDg3YTEyYS1iNzVhLTQ1NTUtODYyYy01MmYwNzFiN2RkYjAiPklBIC0gSWRlbnRpZmljYXRpb24gYW5kIEF1dGhlbnRpY2F0aW9uPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9IjQ4MDE3NTZhLWE0ZWQtNGI2NC04ODkwLTQxNjlkOWI2YTljZSI+SVIgLSBJbmNpZGVudCBSZXNwb25zZTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSI4ODA4OWQxZC1jMTE1LTQxZjctOTJhZC1hODRhYmU2MTAxZmMiPk1BIC0gTWFpbnRlbmFuY2U8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iM2ZiOWRlNzctY2IzNy00M2ZkLWI4YTUtZTMzNTc2YjhjYWExIj5NUCAtIE1lZGlhIFByb3RlY3Rpb248L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iZjNiOTFlN2UtMjQ5OC00OWNlLWJkMGYtNWI5Y2UzYmJkOWUwIj5QRSAtIFBoeXNpY2FsIGFuZCBFbnZpcm9ubWVudGFsIFByb3RlY3Rpb248L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iNjQxNDkyZDEtZDJkYS00MGU2LWE1MjMtZjkzZmRiNTM1OGU5Ij5QTCAtIFBsYW5uaW5nPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9IjlkMmE0NmI2LTI1MzAtNDI2Ni1hZTc1LWRhYjNlYTc4ZDdhMCI+UE0gLSBQcm9ncmFtIE1hbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iMjA1ZTdjZmYtMjNhNS00YjU5LTg1YmMtMTY4YWU2ZTdkOTVmIj5QUyAtIFBlcnNvbm5lbCBTZWN1cml0eTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSIwOTM4NWRhNS1jM2NkLTRkY2YtOTFlOS1mZDQ1NWIwZWY3MDQiPlBUIC0gUElJIFByb2Nlc3NpbmcgYW5kIFRyYW5zcGFyZW5jeTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSJlMDhmNzgzNS1lYTZiLTRiN2MtOWRiMy0zM2EzNjYyYTM4ZDEiPlJBIC0gUmlzayBBc3Nlc3NtZW50PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9IjhlMmVhNTNkLWM1M2QtNDgwZS1iMzc0LWViNWFiMDU1YTk0YiI+U0EgLSBTeXN0ZW0gYW5kIFNlcnZpY2VzIEFjcXVpc2l0aW9uPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9ImYzNTY0NmIxLWQ3MDEtNDk0MS1iMWM1LThlODcyZjZiYjgxMiI+U0MgLSBTeXN0ZW0gYW5kIENvbW11bmljYXRpb25zIFByb3RlY3Rpb248L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iNjYwZDljZTAtOWNmZS00ZjVlLTg5MGEtNDE2NzBkMDEwODQ2Ij5TSSAtIFN5c3RlbSBhbmQgSW5mb3JtYXRpb24gSW50ZWdyaXR5PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9IjYwNWQ0NGRmLTUwMjctNGMzMi1hMjI4LWMwMDBiYmNhYzE3MyI+U1IgLSBTdXBwbHkgQ2hhaW4gUmlzayBNYW5hZ2VtZW50PC9hPjwvbGk+DQogICAgICAgICAgICA8L3VsPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1pbmxpbmUgY29udHJvbHMtdHlwZSI+DQogICAgICAgICAgICA8bGFiZWwgY2xhc3M9InJhZGlvLWxhYmVsIj5NYXRjaCBBTlk6IDxpbnB1dCBOYW1lPSJjb250cm9sc01hdGNoLWxnIiBjaGVja2VkPSJjaGVja2VkIiBpZD0iY29udHJvbHNNYXRjaC1hbnktbGciIG5hbWU9IkZvcm0uQ29udHJvbHNNYXRjaCIgdHlwZT0icmFkaW8iIHZhbHVlPSJBTlkiIC8+PC9sYWJlbD4NCiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icmFkaW8tbGFiZWwiPk1hdGNoIEFMTDogPGlucHV0IE5hbWU9ImNvbnRyb2xzTWF0Y2gtbGciIGlkPSJjb250cm9sc01hdGNoLWFsbC1sZyIgbmFtZT0iRm9ybS5Db250cm9sc01hdGNoIiB0eXBlPSJyYWRpbyIgdmFsdWU9IkFMTCIgLz48L2xhYmVsPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OiBub25lOyIgZGF0YS1mb3JtLWVycm9yLXBhbmU9InRydWUiIGNsYXNzPSJ0ZXh0LWRhbmdlciI+DQogICAgICAgIDxzdHJvbmcgY2xhc3M9InRleHQtZGFuZ2VyIj5QbGVhc2UgZml4IHRoZSBmb2xsb3dpbmc6PC9zdHJvbmc+DQogICAgICAgIDx1bCBkYXRhLWZvcm0tZXJyb3ItbGlzdD0idHJ1ZSI+DQogICAgICAgIDwvdWw+DQogICAgICAgIDxkaXYgY2xhc3M9InZhbGlkYXRpb24tc3VtbWFyeS12YWxpZCIgZGF0YS12YWxtc2ctc3VtbWFyeT0idHJ1ZSI+PHVsPjxsaSBzdHlsZT0iZGlzcGxheTpub25lIj48L2xpPg0KPC91bD48L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJwdWJzLXNlYXJjaC1zdWJtaXQtbGciIG5hbWU9InN1Ym1pdC1idG4iIGRhdGEtZm9ybS1idXR0b249InN1Ym1pdCIgY2xhc3M9ImJ0biI+U2VhcmNoPC9idXR0b24+DQogICAgICAgIDxidXR0b24gdHlwZT0icmVzZXQiIGlkPSJwdWJzLXNlYXJjaC1yZXNldC1sZyIgbmFtZT0icmVzZXQtYnRuIiBkYXRhLWZvcm0tYnV0dG9uPSJyZXNldCIgY2xhc3M9ImJ0biI+UmVzZXQ8L2J1dHRvbj4NCiAgICA8L2Rpdj4NCiAgICA8c3BhbiBzdHlsZT0iZGlzcGxheTogbm9uZTsiIGlkPSJwdWJsaWNhdGlvbnMtc3RhdHVzLWluZm8iPg0KICAgICAgICA8cD48c3Ryb25nPkZpbmFsOjwvc3Ryb25nPiBQdWJsaXNoZWQgZG9jdW1lbnRzLjwvcD4NCg0KICAgICAgICA8cD48c3Ryb25nPlB1YmxpYyBEcmFmdDo8L3N0cm9uZz4gIERvY3VtZW50cyBoYXZlIGJlZW4gcG9zdGVkIGFzIFB1YmxpYyBEcmFmdHMsIHR5cGljYWxseSB3aXRoIGEgcHVibGljIGNvbW1lbnQgcGVyaW9kLjwvcD4NCg0KICAgICAgICA8cD4NCiAgICAgICAgICAgIDxzdHJvbmc+V2l0aGRyYXduOjwvc3Ryb25nPiBEb2N1bWVudHMgdGhhdCBoYXZlIGJlZW4gd2l0aGRyYXduLCBhbmQgYXJlIG5vIGxvbmdlciBjdXJyZW50LiBUaGlzIGluY2x1ZGVzOjxici8+DQogICAgICAgICAgICAtIEZpbmFsIHB1YmxpY2F0aW9ucyB0aGF0IGhhdmUgYmVlbiB3aXRoZHJhd247PGJyLz4NCiAgICAgICAgICAgIC0gUHVibGljIGRyYWZ0cyB0aGF0IGhhdmUgYmVlbiBvYnNvbGV0ZWQgYnkgYSBzdWJzZXF1ZW50IGRyYWZ0IG9yIGZpbmFsIHB1YmxpY2F0aW9uOzxici8+DQogICAgICAgICAgICAtIFB1YmxpYyBkcmFmdHMgdGhhdCBoYXZlIGJlZW4gcmV0aXJlZOKAlGZ1cnRoZXIgZGV2ZWxvcG1lbnQgd2FzIGRpc2NvbnRpbnVlZC4NCiAgICAgICAgPC9wPg0KICAgIDwvc3Bhbj4NCjwvZm9ybT4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy05IGNvbC1tZC04IGNvbC1zbS0xMiBjb2wteHMtMTIgY29sLXh4cy0xMiI+DQoNCiAgICAgICAgICAgIDxoND5TZWFyY2ggUmVzdWx0czwvaDQ+DQoNCg0KPGZvcm0gYWN0aW9uPSIvcHVibGljYXRpb25zL3NlYXJjaCIgY2xhc3M9ImJzLWNhbGxvdXQgYnMtY2FsbG91dC1zdWNjZXNzIGNzcmMtc2VhcmNoLWZvcm0gaGlkZGVuLWxnIGhpZGRlbi1tZCBtb2JpbGUtZm9ybSIgZGF0YS1jc3JjLWZvcm09InRydWUiIGRhdGEtZGVmYXVsdC1xdWVyeT0ic29ydEJ5LWxnPXJlbGVhc2VkYXRlK0RFU0MmYW1wO3ZpZXdNb2RlLWxnPWJyaWVmJmFtcDtpcHAtbGc9MjUmYW1wO3N0YXR1cy1sZz1GaW5hbCUyQ0RyYWZ0JmFtcDt0b3BpY3NNYXRjaC1sZz1BTlkmYW1wO2NvbnRyb2xzTWF0Y2gtbGc9QU5ZIiBkYXRhLWZvcm0taWdub3JlLWRlZmF1bHQ9InNvcnRCeSIgZGF0YS1mb3JtLW5hbWU9InB1YlNlYXJjaE1vYmlsZSIgaWQ9InB1YnMtc2VhcmNoLWZvcm0tc20iIG1ldGhvZD0iZ2V0Ij4gICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgIDxsYWJlbCBmb3I9ImtleXdvcmRzLXNtIj5TZWFyY2g8L2xhYmVsPg0KICAgICAgICA8aW5wdXQgTmFtZT0ia2V5d29yZHMtc20iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGRhdGEtdmFsPSJ0cnVlIiBkYXRhLXZhbC1sZW5ndGg9IlRoZSBmaWVsZCBTZWFyY2ggbXVzdCBiZSBhIHN0cmluZyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgMjU1LiIgZGF0YS12YWwtbGVuZ3RoLW1heD0iMjU1IiBpZD0ia2V5d29yZHMtc20iIG5hbWU9IkZvcm0uS2V5d29yZHMiIHR5cGU9InRleHQiIHZhbHVlPSJTUCAyMjIyIiAvPg0KICAgICAgICA8ZW0gY2xhc3M9InRleHQtbXV0ZWQiPlNlYXJjaCBwdWJsaWNhdGlvbiByZWNvcmQgZGF0YTxiciAvPiAobm90IGEgZnVsbCB0ZXh0IHNlYXJjaCk8L2VtPg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICA8bGFiZWwgZm9yPSJzb3J0Qnktc20iPlNvcnQgQnk8L2xhYmVsPg0KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWlubGluZSI+DQogICAgICAgICAgICA8c2VsZWN0IE5hbWU9InNvcnRCeS1zbSIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InNvcnRCeS1zbSIgbmFtZT0iRm9ybS5Tb3J0QnkiPjxvcHRpb24gdmFsdWU9InJlbGV2YW5jZSI+UmVsZXZhbmNlIChiZXN0IG1hdGNoKTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0icmVsZWFzZWRhdGUgREVTQyI+UmVsZWFzZSBEYXRlICAobmV3ZXN0IGZpcnN0KTwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0icmVsZWFzZWRhdGUgQVNDIj5SZWxlYXNlIERhdGUgIChvbGRlc3QgZmlyc3QpPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJTZXJpZXMgQVNDIj5TZXJpZXMgKEEtWik8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IlNlcmllcyBERVNDIj5TZXJpZXMgKFotQSk8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9Ik51bWJlciBBU0MiPk51bWJlciAobG93ZXN0IHRvIGhpZ2hlc3QpPC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSJOdW1iZXIgREVTQyI+TnVtYmVyIChoaWdoZXN0IHRvIGxvd2VzdCk8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9InRpdGxlIGFzYyI+VGl0bGUgKEEtWik8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9InRpdGxlIGRlc2MiPlRpdGxlIChaLUEpPC9vcHRpb24+DQo8L3NlbGVjdD4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgIDxsYWJlbCBmb3I9InZpZXdNb2RlLXNtIj5SZXN1bHRzIFZpZXc8L2xhYmVsPg0KICAgICAgICA8c2VsZWN0IE5hbWU9InZpZXdNb2RlLXNtIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0idmlld01vZGUtc20iIG5hbWU9IkZvcm0uUmVzdWx0c1ZpZXdNb2RlIj48b3B0aW9uIHNlbGVjdGVkPSJzZWxlY3RlZCIgdmFsdWU9ImJyaWVmIj5CcmllZjwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0ic3VtbWFyeSI+U3VtbWFyeTwvb3B0aW9uPg0KPC9zZWxlY3Q+DQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBmb3JtLWlubGluZSI+DQogICAgICAgIDxsYWJlbCBmb3I9ImlwcC1zbSIgY2xhc3M9ImZvcm0tY29udHJvbC1oYWxmIj5JdGVtcyBQZXIgUGFnZTwvbGFiZWw+DQogICAgICAgIDxzZWxlY3QgTmFtZT0iaXBwLXNtIiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iaXBwLXNtIiBuYW1lPSJGb3JtLkl0ZW1zUGVyUGFnZSI+PG9wdGlvbiBzZWxlY3RlZD0ic2VsZWN0ZWQiIHZhbHVlPSIyNSI+MjU8L29wdGlvbj4NCjxvcHRpb24gdmFsdWU9IjUwIj41MDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iNzUiPjc1PC9vcHRpb24+DQo8b3B0aW9uIHZhbHVlPSIxMDAiPjEwMDwvb3B0aW9uPg0KPG9wdGlvbiB2YWx1ZT0iYWxsIj5BbGw8L29wdGlvbj4NCjwvc2VsZWN0Pg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICA8cCBjbGFzcz0idGV4dC1jZW50ZXIiPg0KICAgICAgICAgICAgPGEgaHJlZj0iIyIgZGF0YS1mb3JtLXNob3ctbmFtZT0iYWR2YW5jZWRTZWFyY2giIGlkPSJhZHZhbmNlZC1zZWFyY2gtbGluayI+DQogICAgICAgICAgICAgICAgQWR2YW5jZWQgU2VhcmNoDQogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNhcmV0LWRvd24iIGFyaWEtaGlkZGVuPSJ0cnVlIiBkYXRhLWZvcm0tc2hvdy1leHBhbmRlZD0idHJ1ZSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2k+DQogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNhcmV0LXVwIiBhcmlhLWhpZGRlbj0idHJ1ZSIgZGF0YS1mb3JtLXNob3ctZXhwYW5kZWQ9ImZhbHNlIj48L2k+DQogICAgICAgICAgICA8L2E+DQogICAgICAgIDwvcD4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OiBub25lOyIgZGF0YS1mb3JtLXNob3ctdHJpZ2dlcj0iYWR2YW5jZWRTZWFyY2giIGRhdGEtZm9ybS1zaG93PSJmYWxzZSI+DQogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGF0ZUZyb20tc20iPkRhdGU8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1pbmxpbmUgZm9ybS1kYXRlLWlubGluZSI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgZGF0ZSIgZGF0YS1kYXRlLXBpY2tlcj0idHJ1ZSI+DQogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBOYW1lPSJkYXRlRnJvbS1zbSIgY2xhc3M9ImZvcm0tY29udHJvbCIgZGF0YS1jb250cm9sLXR5cGU9ImRhdGUiIGRhdGEtdmFsPSJ0cnVlIiBkYXRhLXZhbC1kYXRlPSJUaGUgZmllbGQgRGF0ZSBtdXN0IGJlIGEgZGF0ZS4iIGRhdGEtdmFsaWRhdGlvbj0idHJ1ZSIgZGF0YS12YWxpZGF0aW9uLWNvbXBhcmUtZmllbGQ9ImRhdGVUby1zbSIgZGF0YS12YWxpZGF0aW9uLW1lc3NhZ2U9IkZyb20gZGF0ZSBtdXN0IGJlIGxlc3MgdGhhbiBUbyBkYXRlIiBkYXRhLXZhbGlkYXRpb24tdHlwZT0ibGVzcy10aGFuLWRhdGUiIGlkPSJkYXRlRnJvbS1zbSIgbmFtZT0iRm9ybS5EYXRlRnJvbSIgcGxhY2Vob2xkZXI9IiAgLyAgLyAgICAiIHR5cGU9InRleHQiIHZhbHVlPSIiIC8+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmEgZmEtY2FsZW5kYXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgZGF0ZSIgZGF0YS1kYXRlLXBpY2tlcj0idHJ1ZSI+DQogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBOYW1lPSJkYXRlVG8tc20iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGRhdGEtY29udHJvbC10eXBlPSJkYXRlIiBkYXRhLXZhbD0idHJ1ZSIgZGF0YS12YWwtZGF0ZT0iVGhlIGZpZWxkIERhdGVUbyBtdXN0IGJlIGEgZGF0ZS4iIGlkPSJkYXRlVG8tc20iIG5hbWU9IkZvcm0uRGF0ZVRvIiBwbGFjZWhvbGRlcj0iICAvICAvICAgICIgdHlwZT0idGV4dCIgdmFsdWU9IiIgLz4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImlucHV0LWdyb3VwLWFkZG9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmYSBmYS1jYWxlbmRhciI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQogICAgICAgICAgICA8bGFiZWwgZm9yPSJzdGF0dXMtYWxsLXNtIj4NCiAgICAgICAgICAgICAgICBTdGF0dXMgPGkgY2xhc3M9ImZhIGZhLWluZm8tY2lyY2xlIiBhcmlhLWhpZGRlbj0idHJ1ZSIgZGF0YS1wbGFjZW1lbnQ9InJpZ2h0IiBkYXRhLWh0bWw9InRydWUiDQogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9vbHRpcC10b2dnbGU9InRvb2x0aXBXaXRoRnVuY3Rpb24iIGRhdGEtdGl0bGUtY29udGFpbmVyPSJwdWJsaWNhdGlvbnMtc3RhdHVzLWluZm8iPjwvaT4NCiAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWlubGluZSBzdGF0dXMtdHlwZSIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxcmVtOyI+DQogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InN0YXR1cy1maW5hbC1zbSIgbmFtZT0ic3RhdHVzLXNtIiB2YWx1ZT0iRmluYWwiDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRlZmF1bHQtY2hlY2tlZD0iVHJ1ZSIgY2hlY2tlZD0mIzM5O2NoZWNrZWQmIzM5OyAvPiBGaW5hbDxiciAvPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzdGF0dXMtZHJhZnQtc20iIG5hbWU9InN0YXR1cy1zbSIgdmFsdWU9IkRyYWZ0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiICAvPiBQdWJsaWMgRHJhZnQ8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic3RhdHVzLXdpdGhkcmF3bi1zbSIgbmFtZT0ic3RhdHVzLXNtIiB2YWx1ZT0iV2l0aGRyYXduIg0KICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiIGNoZWNrZWQ9JiMzOTtjaGVja2VkJiMzOTsgLz4gV2l0aGRyYXduPGJyIC8+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgPGxhYmVsIGZvcj0icHViLXNlYXJjaC1zZXJpZXMiPg0KICAgICAgICAgICAgICAgIFNlcmllcw0KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0ic2VyaWVzLWFsbC1zbSIgY2xhc3M9ImJ0biBidG4tc20gYnRuLXN1Y2Nlc3MiIGRhdGEtY2hlY2stYWxsPSJzZXJpZXMtc20iPkNoZWNrIEFsbDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0ic2VyaWVzLWNsZWFyLXNtIiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4tc3VjY2VzcyIgZGF0YS1jaGVjay1ub25lPSJzZXJpZXMtc20iPkNsZWFyPC9idXR0b24+DQogICAgICAgICAgICA8L2xhYmVsPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1pbmxpbmUgc2VyaWVzLXR5cGUiIHN0eWxlPSJtYXJnaW4tbGVmdDogMXJlbTsiPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzZXJpZXMtZmlwcy1zbSIgbmFtZT0ic2VyaWVzLXNtIiB2YWx1ZT0iRklQUyINCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiIC8+IEZJUFM8YnIvPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzZXJpZXMtc3Atc20iIG5hbWU9InNlcmllcy1zbSIgdmFsdWU9IlNQIg0KICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRlZmF1bHQtY2hlY2tlZD0iVHJ1ZSIgLz4gU1A8YnIvPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzZXJpZXMtbmlzdGlyLXNtIiBuYW1lPSJzZXJpZXMtc20iIHZhbHVlPSJOSVNUSVIiDQogICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZGVmYXVsdC1jaGVja2VkPSJUcnVlIiAvPiBOSVNUSVI8YnIvPg0KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzZXJpZXMtaXRsLWJ1bC1zbSIgbmFtZT0ic2VyaWVzLXNtIiB2YWx1ZT0iSVRMIEJ1bGxldGluIg0KICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRlZmF1bHQtY2hlY2tlZD0iVHJ1ZSIgLz4gSVRMIEJ1bGxldGluPGJyLz4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic2VyaWVzLXdoaXRlLXBhcGVyLXNtIiBuYW1lPSJzZXJpZXMtc20iIHZhbHVlPSJXaGl0ZSBQYXBlciINCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiIC8+IFdoaXRlIFBhcGVyPGJyLz4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic2VyaWVzLWJ1aWxkLWJsb2NrLXNtIiBuYW1lPSJzZXJpZXMtc20iIHZhbHVlPSJCdWlsZGluZyBCbG9jayINCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiIC8+IEJ1aWxkaW5nIEJsb2NrPGJyLz4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic2VyaWVzLXVzZS1jYXNlLXNtIiBuYW1lPSJzZXJpZXMtc20iIHZhbHVlPSJVc2UgQ2FzZSINCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiIC8+IFVzZSBDYXNlPGJyLz4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic2VyaWVzLWpvdXJuYWwtc20iIG5hbWU9InNlcmllcy1zbSIgdmFsdWU9IkpvdXJuYWwgQXJ0aWNsZSINCiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kZWZhdWx0LWNoZWNrZWQ9IlRydWUiIC8+IEpvdXJuYWwgQXJ0aWNsZTxici8+DQogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InNlcmllcy1jb25mLXBhcGVyLXNtIiBuYW1lPSJzZXJpZXMtc20iIHZhbHVlPSJDb25mZXJlbmNlIFBhcGVyIg0KICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRlZmF1bHQtY2hlY2tlZD0iVHJ1ZSIgLz4gQ29uZmVyZW5jZSBQYXBlcjxici8+DQogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InNlcmllcy1ib29rLXNtIiBuYW1lPSJzZXJpZXMtc20iIHZhbHVlPSJCb29rIg0KICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRlZmF1bHQtY2hlY2tlZD0iVHJ1ZSIgLz4gQm9vazxici8+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgPGxhYmVsIGZvcj0icHViLXNlYXJjaC10b3BpY3Mtc20iPg0KICAgICAgICAgICAgICAgIFRvcGljcw0KICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgIDxpbnB1dCBOYW1lPSJ0b3BpY3Mtc20iIGlkPSJ0b3BpY3Mtc20iIG5hbWU9IkZvcm0uVG9waWNzIiB0eXBlPSJoaWRkZW4iIHZhbHVlPSIiIC8+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWNvbnRyb2wgdG9waWNzLXNlbGVjdGlvbiINCiAgICAgICAgICAgICAgICAgaWQ9InB1Yi1zZWFyY2gtdG9waWNzLXNtIg0KICAgICAgICAgICAgICAgICBjb250ZW50ZWRpdGFibGU9InRydWUiDQogICAgICAgICAgICAgICAgIGRhdGEtZHJvcC10YXJnZXQ9InB1Yi1zZWFyY2gtdG9waWNzLWRyb3Atc20iDQogICAgICAgICAgICAgICAgIGRhdGEtZmllbGQtbmFtZT0idG9waWNzLXNtIg0KICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIg0KICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRvcGljcy1zZWxlY3Rpb24tZHJvcGRvd24gZGVza3RvcCIgaWQ9InB1Yi1zZWFyY2gtdG9waWNzLWRyb3Atc20iIHN0eWxlPSJkaXNwbGF5OiBub25lOyIgZGF0YS10b3BpY3Mtc2VsZWN0b3I9IiI+PGRpdiBjbGFzcz0iY29sLXNtLTQiPjxzdHJvbmc+U2VjdXJpdHkgYW5kIFByaXZhY3k8L3N0cm9uZz48YnIvPgo8dWw+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcwLTI3NDgxIiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy9zZWN1cml0eS1hbmQtcHJpdmFjeS9jcnlwdG9ncmFwaHkiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0ODEiIGRhdGEtdG9waWMtdGV4dD0iY3J5cHRvZ3JhcGh5Ij5jcnlwdG9ncmFwaHk8L2E+PHVsIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY0NyIgZGF0YS10b3BpYy10ZXh0PSJkaWdpdGFsIHNpZ25hdHVyZXMiPmRpZ2l0YWwgc2lnbmF0dXJlczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NDgiIGRhdGEtdG9waWMtdGV4dD0iZW5jcnlwdGlvbiI+ZW5jcnlwdGlvbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NDkiIGRhdGEtdG9waWMtdGV4dD0ia2V5IG1hbmFnZW1lbnQiPmtleSBtYW5hZ2VtZW50PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY1MCIgZGF0YS10b3BpYy10ZXh0PSJtZXNzYWdlIGF1dGhlbnRpY2F0aW9uIj5tZXNzYWdlIGF1dGhlbnRpY2F0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY1MSIgZGF0YS10b3BpYy10ZXh0PSJwb3N0LXF1YW50dW0gY3J5cHRvZ3JhcGh5Ij5wb3N0LXF1YW50dW0gY3J5cHRvZ3JhcGh5PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY1MiIgZGF0YS10b3BpYy10ZXh0PSJyYW5kb20gbnVtYmVyIGdlbmVyYXRpb24iPnJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NTMiIGRhdGEtdG9waWMtdGV4dD0ic2VjdXJlIGhhc2hpbmciPnNlY3VyZSBoYXNoaW5nPC9hPjwvbGk+PC91bD4KPC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDgyIiBkYXRhLXRvcGljLXRleHQ9ImN5YmVyIHN1cHBseSBjaGFpbiByaXNrIG1hbmFnZW1lbnQiPmN5YmVyIHN1cHBseSBjaGFpbiByaXNrIG1hbmFnZW1lbnQ8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDgzIiBkYXRhLXRvcGljLXRleHQ9ImdlbmVyYWwgc2VjdXJpdHkgJiBwcml2YWN5Ij5nZW5lcmFsIHNlY3VyaXR5ICYgcHJpdmFjeTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNDY3MC0yNzQ4NCIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3Mvc2VjdXJpdHktYW5kLXByaXZhY3kvaWRlbnRpdHktYW5kLWFjY2Vzcy1tYW5hZ2VtZW50Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDg0IiBkYXRhLXRvcGljLXRleHQ9ImlkZW50aXR5ICYgYWNjZXNzIG1hbmFnZW1lbnQiPmlkZW50aXR5ICYgYWNjZXNzIG1hbmFnZW1lbnQ8L2E+PHVsIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY2MyIgZGF0YS10b3BpYy10ZXh0PSJhY2Nlc3MgYXV0aG9yaXphdGlvbiI+YWNjZXNzIGF1dGhvcml6YXRpb248L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjY0IiBkYXRhLXRvcGljLXRleHQ9ImFjY2VzcyBjb250cm9sIj5hY2Nlc3MgY29udHJvbDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NjUiIGRhdGEtdG9waWMtdGV4dD0iYXV0aGVudGljYXRpb24iPmF1dGhlbnRpY2F0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY2NiIgZGF0YS10b3BpYy10ZXh0PSJQZXJzb25hbCBJZGVudGl0eSBWZXJpZmljYXRpb24iPlBlcnNvbmFsIElkZW50aXR5IFZlcmlmaWNhdGlvbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NjciIGRhdGEtdG9waWMtdGV4dD0icHVibGljIGtleSBpbmZyYXN0cnVjdHVyZSI+cHVibGljIGtleSBpbmZyYXN0cnVjdHVyZTwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcwLTI3NDg1IiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy9zZWN1cml0eS1hbmQtcHJpdmFjeS9wcml2YWN5Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDg1IiBkYXRhLXRvcGljLXRleHQ9InByaXZhY3kiPnByaXZhY3k8L2E+PHVsIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY4MCIgZGF0YS10b3BpYy10ZXh0PSJwZXJzb25hbGx5IGlkZW50aWZpYWJsZSBpbmZvcm1hdGlvbiI+cGVyc29uYWxseSBpZGVudGlmaWFibGUgaW5mb3JtYXRpb248L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjgxIiBkYXRhLXRvcGljLXRleHQ9InByaXZhY3kgZW5naW5lZXJpbmciPnByaXZhY3kgZW5naW5lZXJpbmc8L2E+PC9saT48L3VsPgo8L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNDY3MC0yNzQ4NiIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3Mvc2VjdXJpdHktYW5kLXByaXZhY3kvcmlzay1tYW5hZ2VtZW50Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDg2IiBkYXRhLXRvcGljLXRleHQ9InJpc2sgbWFuYWdlbWVudCI+cmlzayBtYW5hZ2VtZW50PC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2ODIiIGRhdGEtdG9waWMtdGV4dD0iY2F0ZWdvcml6YXRpb24iPmNhdGVnb3JpemF0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY4MyIgZGF0YS10b3BpYy10ZXh0PSJjb250aW51b3VzIG1vbml0b3JpbmciPmNvbnRpbnVvdXMgbW9uaXRvcmluZzwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNzQ4Ni0yNzY4NCIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3Mvc2VjdXJpdHktYW5kLXByaXZhY3kvcmlzay1tYW5hZ2VtZW50L2NvbnRyb2xzIj48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njg0IiBkYXRhLXRvcGljLXRleHQ9ImNvbnRyb2xzIj5jb250cm9sczwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzY3IiBkYXRhLXRvcGljLXRleHQ9ImNvbnRyb2xzIGFzc2Vzc21lbnQiPmNvbnRyb2xzIGFzc2Vzc21lbnQ8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzY4IiBkYXRhLXRvcGljLXRleHQ9InByaXZhY3kgY29udHJvbHMiPnByaXZhY3kgY29udHJvbHM8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzY5IiBkYXRhLXRvcGljLXRleHQ9InNlY3VyaXR5IGNvbnRyb2xzIj5zZWN1cml0eSBjb250cm9sczwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY4NSIgZGF0YS10b3BpYy10ZXh0PSJyaXNrIGFzc2Vzc21lbnQiPnJpc2sgYXNzZXNzbWVudDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2ODYiIGRhdGEtdG9waWMtdGV4dD0icm9vdHMgb2YgdHJ1c3QiPnJvb3RzIG9mIHRydXN0PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY4NyIgZGF0YS10b3BpYy10ZXh0PSJzeXN0ZW0gYXV0aG9yaXphdGlvbiI+c3lzdGVtIGF1dGhvcml6YXRpb248L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLXBsdXMgZmEtZnciIGlkPSJ0b3BpY3MtZXhwYW5kZXItMjc0ODYtMjc2ODgiIGRhdGEtZXhwYW5kZXItZm9yPSIvdG9waWNzL3NlY3VyaXR5LWFuZC1wcml2YWN5L3Jpc2stbWFuYWdlbWVudC90aHJlYXRzIj48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njg4IiBkYXRhLXRvcGljLXRleHQ9InRocmVhdHMiPnRocmVhdHM8L2E+PHVsIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzc3MCIgZGF0YS10b3BpYy10ZXh0PSJhZHZhbmNlZCBwZXJzaXN0ZW50IHRocmVhdCI+YWR2YW5jZWQgcGVyc2lzdGVudCB0aHJlYXQ8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzcxIiBkYXRhLXRvcGljLXRleHQ9ImJvdG5ldHMiPmJvdG5ldHM8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzcyIiBkYXRhLXRvcGljLXRleHQ9ImluZm9ybWF0aW9uIHNoYXJpbmciPmluZm9ybWF0aW9uIHNoYXJpbmc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzczIiBkYXRhLXRvcGljLXRleHQ9ImludHJ1c2lvbiBkZXRlY3Rpb24gJiBwcmV2ZW50aW9uIj5pbnRydXNpb24gZGV0ZWN0aW9uICYgcHJldmVudGlvbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3NzQiIGRhdGEtdG9waWMtdGV4dD0ibWFsd2FyZSI+bWFsd2FyZTwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY4OSIgZGF0YS10b3BpYy10ZXh0PSJ2dWxuZXJhYmlsaXR5IG1hbmFnZW1lbnQiPnZ1bG5lcmFiaWxpdHkgbWFuYWdlbWVudDwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcwLTI3NDg3IiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy9zZWN1cml0eS1hbmQtcHJpdmFjeS9zZWN1cml0eS1hbmQtYmVoYXZpb3IiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0ODciIGRhdGEtdG9waWMtdGV4dD0ic2VjdXJpdHkgJiBiZWhhdmlvciI+c2VjdXJpdHkgJiBiZWhhdmlvcjwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzA5IiBkYXRhLXRvcGljLXRleHQ9ImFjY2Vzc2liaWxpdHkiPmFjY2Vzc2liaWxpdHk8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzEwIiBkYXRhLXRvcGljLXRleHQ9ImJlaGF2aW9yIj5iZWhhdmlvcjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MTEiIGRhdGEtdG9waWMtdGV4dD0idXNhYmlsaXR5Ij51c2FiaWxpdHk8L2E+PC9saT48L3VsPgo8L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNDY3MC0yNzQ4OCIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3Mvc2VjdXJpdHktYW5kLXByaXZhY3kvc2VjdXJpdHktbWVhc3VyZW1lbnQiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0ODgiIGRhdGEtdG9waWMtdGV4dD0ic2VjdXJpdHkgbWVhc3VyZW1lbnQiPnNlY3VyaXR5IG1lYXN1cmVtZW50PC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2OTAiIGRhdGEtdG9waWMtdGV4dD0iYW5hbHl0aWNzIj5hbmFseXRpY3M8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjkxIiBkYXRhLXRvcGljLXRleHQ9ImFzc3VyYW5jZSI+YXNzdXJhbmNlPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY5MiIgZGF0YS10b3BpYy10ZXh0PSJtb2RlbGluZyI+bW9kZWxpbmc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjkzIiBkYXRhLXRvcGljLXRleHQ9InRlc3RpbmcgJiB2YWxpZGF0aW9uIj50ZXN0aW5nICYgdmFsaWRhdGlvbjwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcwLTI3NDg5IiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy9zZWN1cml0eS1hbmQtcHJpdmFjeS9zZWN1cml0eS1wcm9ncmFtcy1hbmQtb3BlcmF0aW9ucyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ4OSIgZGF0YS10b3BpYy10ZXh0PSJzZWN1cml0eSBwcm9ncmFtcyAmIG9wZXJhdGlvbnMiPnNlY3VyaXR5IHByb2dyYW1zICYgb3BlcmF0aW9uczwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njk0IiBkYXRhLXRvcGljLXRleHQ9ImFjcXVpc2l0aW9uIj5hY3F1aXNpdGlvbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2OTUiIGRhdGEtdG9waWMtdGV4dD0iYXNzZXQgbWFuYWdlbWVudCI+YXNzZXQgbWFuYWdlbWVudDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2OTYiIGRhdGEtdG9waWMtdGV4dD0iYXVkaXQgJiBhY2NvdW50YWJpbGl0eSI+YXVkaXQgJiBhY2NvdW50YWJpbGl0eTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2OTciIGRhdGEtdG9waWMtdGV4dD0iYXdhcmVuZXNzIHRyYWluaW5nICYgZWR1Y2F0aW9uIj5hd2FyZW5lc3MgdHJhaW5pbmcgJiBlZHVjYXRpb248L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njk4IiBkYXRhLXRvcGljLXRleHQ9ImNvbmZpZ3VyYXRpb24gbWFuYWdlbWVudCI+Y29uZmlndXJhdGlvbiBtYW5hZ2VtZW50PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY5OSIgZGF0YS10b3BpYy10ZXh0PSJjb250aW5nZW5jeSBwbGFubmluZyI+Y29udGluZ2VuY3kgcGxhbm5pbmc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzAwIiBkYXRhLXRvcGljLXRleHQ9ImluY2lkZW50IHJlc3BvbnNlIj5pbmNpZGVudCByZXNwb25zZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MDEiIGRhdGEtdG9waWMtdGV4dD0ibWFpbnRlbmFuY2UiPm1haW50ZW5hbmNlPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcwMiIgZGF0YS10b3BpYy10ZXh0PSJtZWRpYSBwcm90ZWN0aW9uIj5tZWRpYSBwcm90ZWN0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcwMyIgZGF0YS10b3BpYy10ZXh0PSJwYXRjaCBtYW5hZ2VtZW50Ij5wYXRjaCBtYW5hZ2VtZW50PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcwNCIgZGF0YS10b3BpYy10ZXh0PSJwZXJzb25uZWwgc2VjdXJpdHkiPnBlcnNvbm5lbCBzZWN1cml0eTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MDUiIGRhdGEtdG9waWMtdGV4dD0icGh5c2ljYWwgJiBlbnZpcm9ubWVudGFsIHByb3RlY3Rpb24iPnBoeXNpY2FsICYgZW52aXJvbm1lbnRhbCBwcm90ZWN0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcwNiIgZGF0YS10b3BpYy10ZXh0PSJwbGFubmluZyI+cGxhbm5pbmc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzA3IiBkYXRhLXRvcGljLXRleHQ9InByb2dyYW0gbWFuYWdlbWVudCI+cHJvZ3JhbSBtYW5hZ2VtZW50PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcwOCIgZGF0YS10b3BpYy10ZXh0PSJzZWN1cml0eSBhdXRvbWF0aW9uIj5zZWN1cml0eSBhdXRvbWF0aW9uPC9hPjwvbGk+PC91bD4KPC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLXBsdXMgZmEtZnciIGlkPSJ0b3BpY3MtZXhwYW5kZXItMjQ2NzAtMjc0OTAiIGRhdGEtZXhwYW5kZXItZm9yPSIvdG9waWNzL3NlY3VyaXR5LWFuZC1wcml2YWN5L3N5c3RlbXMtc2VjdXJpdHktZW5naW5lZXJpbmciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0OTAiIGRhdGEtdG9waWMtdGV4dD0ic3lzdGVtcyBzZWN1cml0eSBlbmdpbmVlcmluZyI+c3lzdGVtcyBzZWN1cml0eSBlbmdpbmVlcmluZzwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLXBsdXMgZmEtZnciIGlkPSJ0b3BpY3MtZXhwYW5kZXItMjc0OTAtMjc3MTMiIGRhdGEtZXhwYW5kZXItZm9yPSIvdG9waWNzL3NlY3VyaXR5LWFuZC1wcml2YWN5L3N5c3RlbXMtc2VjdXJpdHktZW5naW5lZXJpbmcvdHJ1c3R3b3J0aGluZXNzIj48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzEzIiBkYXRhLXRvcGljLXRleHQ9InRydXN0d29ydGhpbmVzcyI+dHJ1c3R3b3J0aGluZXNzPC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3NzUiIGRhdGEtdG9waWMtdGV4dD0icmVsaWFiaWxpdHkiPnJlbGlhYmlsaXR5PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzc3NiIgZGF0YS10b3BpYy10ZXh0PSJyZXNpbGllbmNlIj5yZXNpbGllbmNlPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzc3NyIgZGF0YS10b3BpYy10ZXh0PSJzYWZldHkiPnNhZmV0eTwvYT48L2xpPjwvdWw+CjwvbGk+PC91bD4KPC9saT48L3VsPjxzdHJvbmc+VGVjaG5vbG9naWVzPC9zdHJvbmc+PGJyLz4KPHVsPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0OTEiIGRhdGEtdG9waWMtdGV4dD0iYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UiPmFydGlmaWNpYWwgaW50ZWxsaWdlbmNlPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ5MiIgZGF0YS10b3BpYy10ZXh0PSJiaWcgZGF0YSI+YmlnIGRhdGE8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDkzIiBkYXRhLXRvcGljLXRleHQ9ImJpb21ldHJpY3MiPmJpb21ldHJpY3M8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDk0IiBkYXRhLXRvcGljLXRleHQ9ImJsb2NrY2hhaW4iPmJsb2NrY2hhaW48L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDk1IiBkYXRhLXRvcGljLXRleHQ9ImNsb3VkICYgdmlydHVhbGl6YXRpb24iPmNsb3VkICYgdmlydHVhbGl6YXRpb248L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDk2IiBkYXRhLXRvcGljLXRleHQ9ImNvbWJpbmF0b3JpYWwgdGVzdGluZyI+Y29tYmluYXRvcmlhbCB0ZXN0aW5nPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ5NyIgZGF0YS10b3BpYy10ZXh0PSJjb21wbGV4aXR5Ij5jb21wbGV4aXR5PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcxLTI3NDk5IiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy90ZWNobm9sb2dpZXMvaGFyZHdhcmUiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0OTkiIGRhdGEtdG9waWMtdGV4dD0iaGFyZHdhcmUiPmhhcmR3YXJlPC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MTQiIGRhdGEtdG9waWMtdGV4dD0iY2lyY3VpdHMiPmNpcmN1aXRzPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcxNSIgZGF0YS10b3BpYy10ZXh0PSJwZXJzb25hbCBjb21wdXRlcnMiPnBlcnNvbmFsIGNvbXB1dGVyczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MTYiIGRhdGEtdG9waWMtdGV4dD0ic2Vuc29ycyI+c2Vuc29yczwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ5OCIgZGF0YS10b3BpYy10ZXh0PSJtb2JpbGUiPm1vYmlsZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNDY3MS0yNzUwMCIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3MvdGVjaG5vbG9naWVzL25ldHdvcmtzIj48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NTAwIiBkYXRhLXRvcGljLXRleHQ9Im5ldHdvcmtzIj5uZXR3b3JrczwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzE3IiBkYXRhLXRvcGljLXRleHQ9ImVtYWlsIj5lbWFpbDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MTgiIGRhdGEtdG9waWMtdGV4dD0iZmlyZXdhbGxzIj5maXJld2FsbHM8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzE5IiBkYXRhLXRvcGljLXRleHQ9ImludGVybmV0Ij5pbnRlcm5ldDwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzUwMSIgZGF0YS10b3BpYy10ZXh0PSJxdWFudHVtIGluZm9ybWF0aW9uIHNjaWVuY2UiPnF1YW50dW0gaW5mb3JtYXRpb24gc2NpZW5jZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc1MDIiIGRhdGEtdG9waWMtdGV4dD0ic2VydmVycyI+c2VydmVyczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc1MDMiIGRhdGEtdG9waWMtdGV4dD0ic21hcnQgY2FyZHMiPnNtYXJ0IGNhcmRzPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjcxLTI3NTA0IiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy90ZWNobm9sb2dpZXMvc29mdHdhcmUtZmlybXdhcmUiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc1MDQiIGRhdGEtdG9waWMtdGV4dD0ic29mdHdhcmUgJiBmaXJtd2FyZSI+c29mdHdhcmUgJiBmaXJtd2FyZTwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzIwIiBkYXRhLXRvcGljLXRleHQ9IkJJT1MiPkJJT1M8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NzIxIiBkYXRhLXRvcGljLXRleHQ9ImRhdGFiYXNlcyI+ZGF0YWJhc2VzPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzcyMiIgZGF0YS10b3BpYy10ZXh0PSJvcGVyYXRpbmcgc3lzdGVtcyI+b3BlcmF0aW5nIHN5c3RlbXM8L2E+PC9saT48L3VsPgo8L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc1MDUiIGRhdGEtdG9waWMtdGV4dD0ic3RvcmFnZSI+c3RvcmFnZTwvYT48L2xpPjwvdWw+PC9kaXY+PGRpdiBjbGFzcz0iY29sLXNtLTQiPjxzdHJvbmc+QXBwbGljYXRpb25zPC9zdHJvbmc+PGJyLz4KPHVsPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NTYiIGRhdGEtdG9waWMtdGV4dD0iY29tbXVuaWNhdGlvbnMgJiB3aXJlbGVzcyI+Y29tbXVuaWNhdGlvbnMgJiB3aXJlbGVzczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NTciIGRhdGEtdG9waWMtdGV4dD0iY3liZXItcGh5c2ljYWwgc3lzdGVtcyI+Y3liZXItcGh5c2ljYWwgc3lzdGVtczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NTgiIGRhdGEtdG9waWMtdGV4dD0iY3liZXJzZWN1cml0eSBlZHVjYXRpb24iPmN5YmVyc2VjdXJpdHkgZWR1Y2F0aW9uPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ1OSIgZGF0YS10b3BpYy10ZXh0PSJjeWJlcnNlY3VyaXR5IGZyYW1ld29yayI+Y3liZXJzZWN1cml0eSBmcmFtZXdvcms8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDYwIiBkYXRhLXRvcGljLXRleHQ9ImN5YmVyc2VjdXJpdHkgd29ya2ZvcmNlIj5jeWJlcnNlY3VyaXR5IHdvcmtmb3JjZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NjEiIGRhdGEtdG9waWMtdGV4dD0iZW50ZXJwcmlzZSI+ZW50ZXJwcmlzZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NjIiIGRhdGEtdG9waWMtdGV4dD0iZm9yZW5zaWNzIj5mb3JlbnNpY3M8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDYzIiBkYXRhLXRvcGljLXRleHQ9ImluZHVzdHJpYWwgY29udHJvbCBzeXN0ZW1zIj5pbmR1c3RyaWFsIGNvbnRyb2wgc3lzdGVtczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NjQiIGRhdGEtdG9waWMtdGV4dD0iSW50ZXJuZXQgb2YgVGhpbmdzIj5JbnRlcm5ldCBvZiBUaGluZ3M8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI4OTE0IiBkYXRhLXRvcGljLXRleHQ9InBvc2l0aW9uaW5nIG5hdmlnYXRpb24gJiB0aW1pbmciPnBvc2l0aW9uaW5nIG5hdmlnYXRpb24gJiB0aW1pbmc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDY1IiBkYXRhLXRvcGljLXRleHQ9InNtYWxsICYgbWVkaXVtIGJ1c2luZXNzIj5zbWFsbCAmIG1lZGl1bSBidXNpbmVzczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NjYiIGRhdGEtdG9waWMtdGV4dD0idGVsZXdvcmsiPnRlbGV3b3JrPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ2NyIgZGF0YS10b3BpYy10ZXh0PSJ2b3RpbmciPnZvdGluZzwvYT48L2xpPjwvdWw+PHN0cm9uZz5MYXdzIGFuZCBSZWd1bGF0aW9uczwvc3Ryb25nPjxici8+Cjx1bD48bGk+PGkgY2xhc3M9ImZhIGZhLXBsdXMgZmEtZnciIGlkPSJ0b3BpY3MtZXhwYW5kZXItMjQ2NzMtMjc0NjgiIGRhdGEtZXhwYW5kZXItZm9yPSIvdG9waWNzL2xhd3MtYW5kLXJlZ3VsYXRpb25zL2V4ZWN1dGl2ZS1kb2N1bWVudHMiPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NjgiIGRhdGEtdG9waWMtdGV4dD0iZXhlY3V0aXZlIGRvY3VtZW50cyI+ZXhlY3V0aXZlIGRvY3VtZW50czwvYT48dWwgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjY4IiBkYXRhLXRvcGljLXRleHQ9IkNvbXByZWhlbnNpdmUgTmF0aW9uYWwgQ3liZXJzZWN1cml0eSBJbml0aWF0aXZlIj5Db21wcmVoZW5zaXZlIE5hdGlvbmFsIEN5YmVyc2VjdXJpdHkgSW5pdGlhdGl2ZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NjkiIGRhdGEtdG9waWMtdGV4dD0iQ3liZXJzZWN1cml0eSBTdHJhdGVneSBhbmQgSW1wbGVtZW50YXRpb24gUGxhbiI+Q3liZXJzZWN1cml0eSBTdHJhdGVneSBhbmQgSW1wbGVtZW50YXRpb24gUGxhbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NzAiIGRhdGEtdG9waWMtdGV4dD0iQ3liZXJzcGFjZSBQb2xpY3kgUmV2aWV3Ij5DeWJlcnNwYWNlIFBvbGljeSBSZXZpZXc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjcxIiBkYXRhLXRvcGljLXRleHQ9IkV4ZWN1dGl2ZSBPcmRlciAxMzYzNiI+RXhlY3V0aXZlIE9yZGVyIDEzNjM2PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY3MiIgZGF0YS10b3BpYy10ZXh0PSJFeGVjdXRpdmUgT3JkZXIgMTM3MDIiPkV4ZWN1dGl2ZSBPcmRlciAxMzcwMjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NzMiIGRhdGEtdG9waWMtdGV4dD0iRXhlY3V0aXZlIE9yZGVyIDEzNzE4Ij5FeGVjdXRpdmUgT3JkZXIgMTM3MTg8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njc0IiBkYXRhLXRvcGljLXRleHQ9IkV4ZWN1dGl2ZSBPcmRlciAxMzgwMCI+RXhlY3V0aXZlIE9yZGVyIDEzODAwPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyODkxNSIgZGF0YS10b3BpYy10ZXh0PSJFeGVjdXRpdmUgT3JkZXIgMTM5MDUiPkV4ZWN1dGl2ZSBPcmRlciAxMzkwNTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NzUiIGRhdGEtdG9waWMtdGV4dD0iRmVkZXJhbCBDeWJlcnNlY3VyaXR5IFJlc2VhcmNoIGFuZCBEZXZlbG9wbWVudCBTdHJhdGVnaWMgUGxhbiI+RmVkZXJhbCBDeWJlcnNlY3VyaXR5IFJlc2VhcmNoIGFuZCBEZXZlbG9wbWVudCBTdHJhdGVnaWMgUGxhbjwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NzYiIGRhdGEtdG9waWMtdGV4dD0iSG9tZWxhbmQgU2VjdXJpdHkgUHJlc2lkZW50aWFsIERpcmVjdGl2ZSA3Ij5Ib21lbGFuZCBTZWN1cml0eSBQcmVzaWRlbnRpYWwgRGlyZWN0aXZlIDc8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njc3IiBkYXRhLXRvcGljLXRleHQ9IkhvbWVsYW5kIFNlY3VyaXR5IFByZXNpZGVudGlhbCBEaXJlY3RpdmUgMTIiPkhvbWVsYW5kIFNlY3VyaXR5IFByZXNpZGVudGlhbCBEaXJlY3RpdmUgMTI8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3Njc4IiBkYXRhLXRvcGljLXRleHQ9Ik9NQiBDaXJjdWxhciBBLTExIj5PTUIgQ2lyY3VsYXIgQS0xMTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NzkiIGRhdGEtdG9waWMtdGV4dD0iT01CIENpcmN1bGFyIEEtMTMwIj5PTUIgQ2lyY3VsYXIgQS0xMzA8L2E+PC9saT48L3VsPgo8L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtcGx1cyBmYS1mdyIgaWQ9InRvcGljcy1leHBhbmRlci0yNDY3My0yNzQ2OSIgZGF0YS1leHBhbmRlci1mb3I9Ii90b3BpY3MvbGF3cy1hbmQtcmVndWxhdGlvbnMvbGF3cyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ2OSIgZGF0YS10b3BpYy10ZXh0PSJsYXdzIj5sYXdzPC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NTQiIGRhdGEtdG9waWMtdGV4dD0iQ3liZXIgU2VjdXJpdHkgUiZEIEFjdCI+Q3liZXIgU2VjdXJpdHkgUiZEIEFjdDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NTUiIGRhdGEtdG9waWMtdGV4dD0iQ3liZXJzZWN1cml0eSBFbmhhbmNlbWVudCBBY3QiPkN5YmVyc2VjdXJpdHkgRW5oYW5jZW1lbnQgQWN0PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY1NiIgZGF0YS10b3BpYy10ZXh0PSJFLUdvdmVybm1lbnQgQWN0Ij5FLUdvdmVybm1lbnQgQWN0PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY1NyIgZGF0YS10b3BpYy10ZXh0PSJFbmVyZ3kgSW5kZXBlbmRlbmNlIGFuZCBTZWN1cml0eSBBY3QiPkVuZXJneSBJbmRlcGVuZGVuY2UgYW5kIFNlY3VyaXR5IEFjdDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NTgiIGRhdGEtdG9waWMtdGV4dD0iRmVkZXJhbCBJbmZvcm1hdGlvbiBTZWN1cml0eSBNb2Rlcm5pemF0aW9uIEFjdCI+RmVkZXJhbCBJbmZvcm1hdGlvbiBTZWN1cml0eSBNb2Rlcm5pemF0aW9uIEFjdDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc2NTkiIGRhdGEtdG9waWMtdGV4dD0iRmlyc3QgUmVzcG9uZGVyIE5ldHdvcmsgQXV0aG9yaXR5Ij5GaXJzdCBSZXNwb25kZXIgTmV0d29yayBBdXRob3JpdHk8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NjYwIiBkYXRhLXRvcGljLXRleHQ9IkhlYWx0aCBJbnN1cmFuY2UgUG9ydGFiaWxpdHkgYW5kIEFjY291bnRhYmlsaXR5IEFjdCI+SGVhbHRoIEluc3VyYW5jZSBQb3J0YWJpbGl0eSBhbmQgQWNjb3VudGFiaWxpdHkgQWN0PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY2MSIgZGF0YS10b3BpYy10ZXh0PSJIZWxwIEFtZXJpY2EgVm90ZSBBY3QiPkhlbHAgQW1lcmljYSBWb3RlIEFjdDwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1wbHVzIGZhLWZ3IiBpZD0idG9waWNzLWV4cGFuZGVyLTI0NjczLTI3NDcwIiBkYXRhLWV4cGFuZGVyLWZvcj0iL3RvcGljcy9sYXdzLWFuZC1yZWd1bGF0aW9ucy9yZWd1bGF0aW9ucyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ3MCIgZGF0YS10b3BpYy10ZXh0PSJyZWd1bGF0aW9ucyI+cmVndWxhdGlvbnM8L2E+PHVsIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzY2MiIgZGF0YS10b3BpYy10ZXh0PSJGZWRlcmFsIEFjcXVpc2l0aW9uIFJlZ3VsYXRpb24iPkZlZGVyYWwgQWNxdWlzaXRpb24gUmVndWxhdGlvbjwvYT48L2xpPjwvdWw+CjwvbGk+PC91bD48L2Rpdj48ZGl2IGNsYXNzPSJjb2wtc20tNCI+PHN0cm9uZz5BY3Rpdml0aWVzIGFuZCBQcm9kdWN0czwvc3Ryb25nPjxici8+Cjx1bD48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDUyIiBkYXRhLXRvcGljLXRleHQ9ImFubnVhbCByZXBvcnRzIj5hbm51YWwgcmVwb3J0czwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NTMiIGRhdGEtdG9waWMtdGV4dD0iY29uZmVyZW5jZXMgJiB3b3Jrc2hvcHMiPmNvbmZlcmVuY2VzICYgd29ya3Nob3BzPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ1NCIgZGF0YS10b3BpYy10ZXh0PSJyZWZlcmVuY2UgbWF0ZXJpYWxzIj5yZWZlcmVuY2UgbWF0ZXJpYWxzPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ1NSIgZGF0YS10b3BpYy10ZXh0PSJzdGFuZGFyZHMgZGV2ZWxvcG1lbnQiPnN0YW5kYXJkcyBkZXZlbG9wbWVudDwvYT48L2xpPjwvdWw+PHN0cm9uZz5TZWN0b3JzPC9zdHJvbmc+PGJyLz4KPHVsPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NzEiIGRhdGEtdG9waWMtdGV4dD0iYWVyb3NwYWNlIj5hZXJvc3BhY2U8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLXBsdXMgZmEtZnciIGlkPSJ0b3BpY3MtZXhwYW5kZXItMjQ2NzUtMjc0NzIiIGRhdGEtZXhwYW5kZXItZm9yPSIvdG9waWNzL3NlY3RvcnMvZW5lcmd5Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDcyIiBkYXRhLXRvcGljLXRleHQ9ImVuZXJneSI+ZW5lcmd5PC9hPjx1bCBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc3MTIiIGRhdGEtdG9waWMtdGV4dD0ic21hcnQgZ3JpZCI+c21hcnQgZ3JpZDwvYT48L2xpPjwvdWw+CjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ3MyIgZGF0YS10b3BpYy10ZXh0PSJmaW5hbmNpYWwgc2VydmljZXMiPmZpbmFuY2lhbCBzZXJ2aWNlczwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NzQiIGRhdGEtdG9waWMtdGV4dD0iaGVhbHRoY2FyZSI+aGVhbHRoY2FyZTwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NzUiIGRhdGEtdG9waWMtdGV4dD0iaG9zcGl0YWxpdHkiPmhvc3BpdGFsaXR5PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ3NiIgZGF0YS10b3BpYy10ZXh0PSJtYW51ZmFjdHVyaW5nIj5tYW51ZmFjdHVyaW5nPC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ3NyIgZGF0YS10b3BpYy10ZXh0PSJwdWJsaWMgc2FmZXR5Ij5wdWJsaWMgc2FmZXR5PC9hPjwvbGk+PGxpPjxpIGNsYXNzPSJmYSBmYS1mdyI+PC9pPiA8YSBkYXRhLXRvcGljLWlkPSIyNzQ3OCIgZGF0YS10b3BpYy10ZXh0PSJyZXRhaWwiPnJldGFpbDwvYT48L2xpPjxsaT48aSBjbGFzcz0iZmEgZmEtZnciPjwvaT4gPGEgZGF0YS10b3BpYy1pZD0iMjc0NzkiIGRhdGEtdG9waWMtdGV4dD0idGVsZWNvbW11bmljYXRpb25zIj50ZWxlY29tbXVuaWNhdGlvbnM8L2E+PC9saT48bGk+PGkgY2xhc3M9ImZhIGZhLWZ3Ij48L2k+IDxhIGRhdGEtdG9waWMtaWQ9IjI3NDgwIiBkYXRhLXRvcGljLXRleHQ9InRyYW5zcG9ydGF0aW9uIj50cmFuc3BvcnRhdGlvbjwvYT48L2xpPjwvdWw+PC9kaXY+PC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWlubGluZSB0b3BpY3MtdHlwZSI+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyYWRpby1sYWJlbCI+TWF0Y2ggQU5ZOiA8aW5wdXQgTmFtZT0idG9waWNzTWF0Y2gtc20iIGNoZWNrZWQ9ImNoZWNrZWQiIGlkPSJ0b3BpY3NNYXRjaC1hbnktc20iIG5hbWU9IkZvcm0uVG9waWNzTWF0Y2giIHR5cGU9InJhZGlvIiB2YWx1ZT0iQU5ZIiAvPjwvbGFiZWw+DQogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyYWRpby1sYWJlbCI+TWF0Y2ggQUxMOiA8aW5wdXQgTmFtZT0idG9waWNzTWF0Y2gtc20iIGlkPSJ0b3BpY3NNYXRjaC1hbGwtc20iIG5hbWU9IkZvcm0uVG9waWNzTWF0Y2giIHR5cGU9InJhZGlvIiB2YWx1ZT0iQUxMIiAvPjwvbGFiZWw+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPg0KICAgICAgICAgICAgPGxhYmVsIGZvcj0icHViLXNlYXJjaC1jb250cm9scy1zbSI+DQogICAgICAgICAgICAgICAgQ29udHJvbCBGYW1pbHkgKDgwMC01MykNCiAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICA8aW5wdXQgTmFtZT0iY29udHJvbHMtc20iIGlkPSJjb250cm9scy1zbSIgbmFtZT0iRm9ybS5Db250cm9scyIgdHlwZT0iaGlkZGVuIiB2YWx1ZT0iIiAvPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1jb250cm9sIGNvbnRyb2xzLXNlbGVjdGlvbiINCiAgICAgICAgICAgICAgICAgaWQ9InB1Yi1zZWFyY2gtY29udHJvbHMtc20iDQogICAgICAgICAgICAgICAgIGNvbnRlbnRlZGl0YWJsZT0idHJ1ZSINCiAgICAgICAgICAgICAgICAgZGF0YS1kcm9wLXRhcmdldD0icHViLXNlYXJjaC1jb250cm9scy1kcm9wLXNtIg0KICAgICAgICAgICAgICAgICBkYXRhLWZpZWxkLW5hbWU9ImNvbnRyb2xzLXNtIg0KICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPSJ0cnVlIg0KICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRyb2xzLXNlbGVjdGlvbi1kcm9wZG93biBkZXNrdG9wIiBpZD0icHViLXNlYXJjaC1jb250cm9scy1kcm9wLXNtIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiIGRhdGEtY29udHJvbHMtc2VsZWN0b3I9IiI+DQogICAgICAgICAgICAgICAgPHN0cm9uZz5Db250cm9sIEZhbWlsaWVzPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iNjNkNTRhZTQtYzZjZi00YWU0LWEzOTgtZjE5Mjk4Yzc0OTAzIj5BQyAtIEFjY2VzcyBDb250cm9sPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSIzNmZiMGIxMC1mNmFlLTRlMGUtODAzYy1iZWNlOWM5NDdmZDgiPkFUIC0gQXdhcmVuZXNzIGFuZCBUcmFpbmluZzwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iNDI0M2Q1MmMtZmY1ZS00MTdiLThlMWItODM0NGZmODExNTcwIj5BVSAtIEF1ZGl0IGFuZCBBY2NvdW50YWJpbGl0eTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iMGQ5M2JmMjktNDU1MS00YjdkLTk2NzctMjNkMGViMDUyNGUwIj5DQSAtIEFzc2Vzc21lbnQsIEF1dGhvcml6YXRpb24gYW5kIE1vbml0b3Jpbmc8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9IjgwOWI3NTYzLWYwNTAtNGJiZi1hMGU0LTdhZDI1NDExNzM0ZCI+Q00gLSBDb25maWd1cmF0aW9uIE1hbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9ImRhNTFiZTVjLWI4NmQtNGUzMi05NDg0LWY5NGNmNzViODIxNyI+Q1AgLSBDb250aW5nZW5jeSBQbGFubmluZzwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iZWQ4N2ExMmEtYjc1YS00NTU1LTg2MmMtNTJmMDcxYjdkZGIwIj5JQSAtIElkZW50aWZpY2F0aW9uIGFuZCBBdXRoZW50aWNhdGlvbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iNDgwMTc1NmEtYTRlZC00YjY0LTg4OTAtNDE2OWQ5YjZhOWNlIj5JUiAtIEluY2lkZW50IFJlc3BvbnNlPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSI4ODA4OWQxZC1jMTE1LTQxZjctOTJhZC1hODRhYmU2MTAxZmMiPk1BIC0gTWFpbnRlbmFuY2U8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9IjNmYjlkZTc3LWNiMzctNDNmZC1iOGE1LWUzMzU3NmI4Y2FhMSI+TVAgLSBNZWRpYSBQcm90ZWN0aW9uPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSJmM2I5MWU3ZS0yNDk4LTQ5Y2UtYmQwZi01YjljZTNiYmQ5ZTAiPlBFIC0gUGh5c2ljYWwgYW5kIEVudmlyb25tZW50YWwgUHJvdGVjdGlvbjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iNjQxNDkyZDEtZDJkYS00MGU2LWE1MjMtZjkzZmRiNTM1OGU5Ij5QTCAtIFBsYW5uaW5nPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSI5ZDJhNDZiNi0yNTMwLTQyNjYtYWU3NS1kYWIzZWE3OGQ3YTAiPlBNIC0gUHJvZ3JhbSBNYW5hZ2VtZW50PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSIyMDVlN2NmZi0yM2E1LTRiNTktODViYy0xNjhhZTZlN2Q5NWYiPlBTIC0gUGVyc29ubmVsIFNlY3VyaXR5PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgZGF0YS1jb250cm9sLWlkPSIwOTM4NWRhNS1jM2NkLTRkY2YtOTFlOS1mZDQ1NWIwZWY3MDQiPlBUIC0gUElJIFByb2Nlc3NpbmcgYW5kIFRyYW5zcGFyZW5jeTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iZTA4Zjc4MzUtZWE2Yi00YjdjLTlkYjMtMzNhMzY2MmEzOGQxIj5SQSAtIFJpc2sgQXNzZXNzbWVudDwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iOGUyZWE1M2QtYzUzZC00ODBlLWIzNzQtZWI1YWIwNTVhOTRiIj5TQSAtIFN5c3RlbSBhbmQgU2VydmljZXMgQWNxdWlzaXRpb248L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9ImYzNTY0NmIxLWQ3MDEtNDk0MS1iMWM1LThlODcyZjZiYjgxMiI+U0MgLSBTeXN0ZW0gYW5kIENvbW11bmljYXRpb25zIFByb3RlY3Rpb248L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBkYXRhLWNvbnRyb2wtaWQ9IjY2MGQ5Y2UwLTljZmUtNGY1ZS04OTBhLTQxNjcwZDAxMDg0NiI+U0kgLSBTeXN0ZW0gYW5kIEluZm9ybWF0aW9uIEludGVncml0eTwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGRhdGEtY29udHJvbC1pZD0iNjA1ZDQ0ZGYtNTAyNy00YzMyLWEyMjgtYzAwMGJiY2FjMTczIj5TUiAtIFN1cHBseSBDaGFpbiBSaXNrIE1hbmFnZW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWlubGluZSBjb250cm9scy10eXBlIj4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InJhZGlvLWxhYmVsIj5NYXRjaCBBTlk6IDxpbnB1dCBOYW1lPSJjb250cm9sc01hdGNoLXNtIiBjaGVja2VkPSJjaGVja2VkIiBpZD0iY29udHJvbHNNYXRjaC1hbnktc20iIG5hbWU9IkZvcm0uQ29udHJvbHNNYXRjaCIgdHlwZT0icmFkaW8iIHZhbHVlPSJBTlkiIC8+PC9sYWJlbD4NCiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InJhZGlvLWxhYmVsIj5NYXRjaCBBTEw6IDxpbnB1dCBOYW1lPSJjb250cm9sc01hdGNoLXNtIiBpZD0iY29udHJvbHNNYXRjaC1hbGwtc20iIG5hbWU9IkZvcm0uQ29udHJvbHNNYXRjaCIgdHlwZT0icmFkaW8iIHZhbHVlPSJBTEwiIC8+PC9sYWJlbD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OiBub25lOyIgZGF0YS1mb3JtLWVycm9yLXBhbmU9InRydWUiIGNsYXNzPSJ0ZXh0LWRhbmdlciI+DQogICAgICAgIDxzdHJvbmcgY2xhc3M9InRleHQtZGFuZ2VyIj5QbGVhc2UgZml4IHRoZSBmb2xsb3dpbmc6PC9zdHJvbmc+DQogICAgICAgIDx1bCBkYXRhLWZvcm0tZXJyb3ItbGlzdD0idHJ1ZSI+DQogICAgICAgIDwvdWw+DQogICAgICAgIDxkaXYgY2xhc3M9InZhbGlkYXRpb24tc3VtbWFyeS12YWxpZCIgZGF0YS12YWxtc2ctc3VtbWFyeT0idHJ1ZSI+PHVsPjxsaSBzdHlsZT0iZGlzcGxheTpub25lIj48L2xpPg0KPC91bD48L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCiAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJwdWJzLXNlYXJjaC1zdWJtaXQtc20iIG5hbWU9InN1Ym1pdC1idG4iIGRhdGEtZm9ybS1idXR0b249InN1Ym1pdCIgY2xhc3M9ImJ0biI+U2VhcmNoPC9idXR0b24+DQogICAgICAgIDxidXR0b24gdHlwZT0icmVzZXQiIGlkPSJwdWJzLXNlYXJjaC1yZXNldC1zbSIgbmFtZT0icmVzZXQtYnRuIiBkYXRhLWZvcm0tYnV0dG9uPSJyZXNldCIgY2xhc3M9ImJ0biI+UmVzZXQ8L2J1dHRvbj4NCiAgICA8L2Rpdj4NCiAgICA8c3BhbiBzdHlsZT0iZGlzcGxheTogbm9uZTsiIGlkPSJwdWJsaWNhdGlvbnMtc3RhdHVzLWluZm8iPg0KICAgICAgICA8cD48c3Ryb25nPkZpbmFsOjwvc3Ryb25nPiBQdWJsaXNoZWQgZG9jdW1lbnRzLjwvcD4NCg0KICAgICAgICA8cD48c3Ryb25nPlB1YmxpYyBEcmFmdDo8L3N0cm9uZz4gIERvY3VtZW50cyBoYXZlIGJlZW4gcG9zdGVkIGFzIFB1YmxpYyBEcmFmdHMsIHR5cGljYWxseSB3aXRoIGEgcHVibGljIGNvbW1lbnQgcGVyaW9kLjwvcD4NCg0KICAgICAgICA8cD4NCiAgICAgICAgICAgIDxzdHJvbmc+V2l0aGRyYXduOjwvc3Ryb25nPiBEb2N1bWVudHMgdGhhdCBoYXZlIGJlZW4gd2l0aGRyYXduLCBhbmQgYXJlIG5vIGxvbmdlciBjdXJyZW50LiBUaGlzIGluY2x1ZGVzOjxiciAvPg0KICAgICAgICAgICAgLSBGaW5hbCBwdWJsaWNhdGlvbnMgdGhhdCBoYXZlIGJlZW4gd2l0aGRyYXduOzxiciAvPg0KICAgICAgICAgICAgLSBQdWJsaWMgZHJhZnRzIHRoYXQgaGF2ZSBiZWVuIG9ic29sZXRlZCBieSBhIHN1YnNlcXVlbnQgZHJhZnQgb3IgZmluYWwgcHVibGljYXRpb247PGJyIC8+DQogICAgICAgICAgICAtIFB1YmxpYyBkcmFmdHMgdGhhdCBoYXZlIGJlZW4gcmV0aXJlZOKAlGZ1cnRoZXIgZGV2ZWxvcG1lbnQgd2FzIGRpc2NvbnRpbnVlZC4NCiAgICAgICAgPC9wPg0KICAgIDwvc3Bhbj4NCjwvZm9ybT4NCg0KICAgIDxkaXYgaWQ9InNlYXJjaC1jcml0ZXJpYS1jb250YWluZXIiIGRhdGEtdGFyZ2V0LWZvcm09InB1YlNlYXJjaERlc2t0b3AiPjwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgdG9wLXBhZ2luYXRpb24tYXJlYSI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wtc20tMTIiPg0KICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdzaG93aW5nLXJlc3VsdHMtdGV4dCcgZGF0YS10b3RhbC1wYWdlcz0nNDYnIGRhdGEtZmlyc3QtcmVjb3JkPScxJyBkYXRhLWxhc3QtcmVjb3JkPScyNScgZGF0YS1jdXJyZW50LXBhZ2U9JzEnIGRhdGEtaXRlbXMtcGVyLXBhZ2U9JzI1JyBkYXRhLXRvdGFsLXJlc3VsdHM9JzExNDMnPlNob3dpbmcgPHN0cm9uZyBpZD0nc2hvd2luZy1yZXN1bHRzLWZpcnN0Jz4xPC9zdHJvbmc+IHRocm91Z2ggPHN0cm9uZyBpZD0nc2hvd2luZy1yZXN1bHRzLWxhc3QnPjI1PC9zdHJvbmc+IG9mIDxzdHJvbmcgaWQ9J3Nob3dpbmctcmVzdWx0cy10b3RhbCc+MTE0Mzwvc3Ryb25nPiBtYXRjaGluZyByZWNvcmRzLjwvc3Bhbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgY29sLXNtLTEyIj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVsbC1yaWdodCBoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ncGFnaW5hdGlvbi1saW5rcycgaWQ9J3RvcC1wYWdpbmF0aW9uLWNvbnRhaW5lcicgZGF0YS10b3RhbC1wYWdlcz0nNDYnIGRhdGEtbWluLXBhZ2U9JzEnIGRhdGEtbWF4LXBhZ2U9JzEwJyBkYXRhLWN1cnJlbnQtcGFnZT0nMScgZGF0YS1zaG93LWZpcnN0PSdGYWxzZScgZGF0YS1zaG93LWxhc3Q9J1RydWUnPjxzdHJvbmcgYXJpYS1sYWJlbD0iUGFnZSAxIiBpZD0idG9wLXBhZ2UtMSI+MTwvc3Ryb25nPiB8ICA8YSBocmVmPSIvcHVibGljYXRpb25zL3NlYXJjaD9rZXl3b3Jkcy1sZz1TUCsyMjIyJnNvcnRCeS1sZz1yZWxldmVuY2Umc3RhdHVzLWxnPUZpbmFsJTJjV2l0aGRyYXduJnBhZ2U9MiIgYXJpYS1sYWJlbD0iUGFnZSAyIiBpZD0idG9wLXBhZ2UtMiI+MjwvYT4gfCAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9zZWFyY2g/a2V5d29yZHMtbGc9U1ArMjIyMiZzb3J0QnktbGc9cmVsZXZlbmNlJnN0YXR1cy1sZz1GaW5hbCUyY1dpdGhkcmF3biZwYWdlPTMiIGFyaWEtbGFiZWw9IlBhZ2UgMyIgaWQ9InRvcC1wYWdlLTMiPjM8L2E+IHwgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT00IiBhcmlhLWxhYmVsPSJQYWdlIDQiIGlkPSJ0b3AtcGFnZS00Ij40PC9hPiB8ICA8YSBocmVmPSIvcHVibGljYXRpb25zL3NlYXJjaD9rZXl3b3Jkcy1sZz1TUCsyMjIyJnNvcnRCeS1sZz1yZWxldmVuY2Umc3RhdHVzLWxnPUZpbmFsJTJjV2l0aGRyYXduJnBhZ2U9NSIgYXJpYS1sYWJlbD0iUGFnZSA1IiBpZD0idG9wLXBhZ2UtNSI+NTwvYT4gfCAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9zZWFyY2g/a2V5d29yZHMtbGc9U1ArMjIyMiZzb3J0QnktbGc9cmVsZXZlbmNlJnN0YXR1cy1sZz1GaW5hbCUyY1dpdGhkcmF3biZwYWdlPTYiIGFyaWEtbGFiZWw9IlBhZ2UgNiIgaWQ9InRvcC1wYWdlLTYiPjY8L2E+IHwgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT03IiBhcmlhLWxhYmVsPSJQYWdlIDciIGlkPSJ0b3AtcGFnZS03Ij43PC9hPiB8ICA8YSBocmVmPSIvcHVibGljYXRpb25zL3NlYXJjaD9rZXl3b3Jkcy1sZz1TUCsyMjIyJnNvcnRCeS1sZz1yZWxldmVuY2Umc3RhdHVzLWxnPUZpbmFsJTJjV2l0aGRyYXduJnBhZ2U9OCIgYXJpYS1sYWJlbD0iUGFnZSA4IiBpZD0idG9wLXBhZ2UtOCI+ODwvYT4gfCAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9zZWFyY2g/a2V5d29yZHMtbGc9U1ArMjIyMiZzb3J0QnktbGc9cmVsZXZlbmNlJnN0YXR1cy1sZz1GaW5hbCUyY1dpdGhkcmF3biZwYWdlPTkiIGFyaWEtbGFiZWw9IlBhZ2UgOSIgaWQ9InRvcC1wYWdlLTkiPjk8L2E+IHwgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT0xMCIgYXJpYS1sYWJlbD0iUGFnZSAxMCIgaWQ9InRvcC1wYWdlLTEwIj4xMDwvYT4mbmJzcDsmbmJzcDs8YSBocmVmPSIvcHVibGljYXRpb25zL3NlYXJjaD9rZXl3b3Jkcy1sZz1TUCsyMjIyJnNvcnRCeS1sZz1yZWxldmVuY2Umc3RhdHVzLWxnPUZpbmFsJTJjV2l0aGRyYXduJnBhZ2U9MiIgYXJpYS1sYWJlbD0iTmV4dCBQYWdlIiBpZD0idG9wLXBhZ2UtbmV4dCI+Jmd0OzwvYT4mbmJzcDsmbmJzcDs8YSBocmVmPSIvcHVibGljYXRpb25zL3NlYXJjaD9rZXl3b3Jkcy1sZz1TUCsyMjIyJnNvcnRCeS1sZz1yZWxldmVuY2Umc3RhdHVzLWxnPUZpbmFsJTJjV2l0aGRyYXduJnBhZ2U9NDYiIGFyaWEtbGFiZWw9Ikxhc3QgUGFnZSIgaWQ9InRvcC1wYWdlLWxhc3QiIGRhdGEtbGFzdC1wYWdlLW51bWJlcj0iNDYiPiZndDsmZ3Q7PC9hPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtY2VudGVyIGhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ncGFnaW5hdGlvbi1saW5rcycgaWQ9J21vYmlsZS10b3AtcGFnaW5hdGlvbi1jb250YWluZXInIGRhdGEtdG90YWwtcGFnZXM9JzQ2JyBkYXRhLW1pbi1wYWdlPScxJyBkYXRhLW1heC1wYWdlPScxMCcgZGF0YS1jdXJyZW50LXBhZ2U9JzEnIGRhdGEtc2hvdy1maXJzdD0nRmFsc2UnIGRhdGEtc2hvdy1sYXN0PSdUcnVlJz48c3Ryb25nIGFyaWEtbGFiZWw9IlBhZ2UgMSIgaWQ9Im1vYmlsZS10b3AtcGFnZS0xIj4xPC9zdHJvbmc+IHwgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT0yIiBhcmlhLWxhYmVsPSJQYWdlIDIiIGlkPSJtb2JpbGUtdG9wLXBhZ2UtMiI+MjwvYT4gfCAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9zZWFyY2g/a2V5d29yZHMtbGc9U1ArMjIyMiZzb3J0QnktbGc9cmVsZXZlbmNlJnN0YXR1cy1sZz1GaW5hbCUyY1dpdGhkcmF3biZwYWdlPTMiIGFyaWEtbGFiZWw9IlBhZ2UgMyIgaWQ9Im1vYmlsZS10b3AtcGFnZS0zIj4zPC9hPiB8ICA8YSBocmVmPSIvcHVibGljYXRpb25zL3NlYXJjaD9rZXl3b3Jkcy1sZz1TUCsyMjIyJnNvcnRCeS1sZz1yZWxldmVuY2Umc3RhdHVzLWxnPUZpbmFsJTJjV2l0aGRyYXduJnBhZ2U9NCIgYXJpYS1sYWJlbD0iUGFnZSA0IiBpZD0ibW9iaWxlLXRvcC1wYWdlLTQiPjQ8L2E+IHwgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT01IiBhcmlhLWxhYmVsPSJQYWdlIDUiIGlkPSJtb2JpbGUtdG9wLXBhZ2UtNSI+NTwvYT4gfCAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9zZWFyY2g/a2V5d29yZHMtbGc9U1ArMjIyMiZzb3J0QnktbGc9cmVsZXZlbmNlJnN0YXR1cy1sZz1GaW5hbCUyY1dpdGhkcmF3biZwYWdlPTYiIGFyaWEtbGFiZWw9IlBhZ2UgNiIgaWQ9Im1vYmlsZS10b3AtcGFnZS02Ij42PC9hPiB8ICA8YSBocmVmPSIvcHVibGljYXRpb25zL3NlYXJjaD9rZXl3b3Jkcy1sZz1TUCsyMjIyJnNvcnRCeS1sZz1yZWxldmVuY2Umc3RhdHVzLWxnPUZpbmFsJTJjV2l0aGRyYXduJnBhZ2U9NyIgYXJpYS1sYWJlbD0iUGFnZSA3IiBpZD0ibW9iaWxlLXRvcC1wYWdlLTciPjc8L2E+IHwgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT04IiBhcmlhLWxhYmVsPSJQYWdlIDgiIGlkPSJtb2JpbGUtdG9wLXBhZ2UtOCI+ODwvYT4gfCAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9zZWFyY2g/a2V5d29yZHMtbGc9U1ArMjIyMiZzb3J0QnktbGc9cmVsZXZlbmNlJnN0YXR1cy1sZz1GaW5hbCUyY1dpdGhkcmF3biZwYWdlPTkiIGFyaWEtbGFiZWw9IlBhZ2UgOSIgaWQ9Im1vYmlsZS10b3AtcGFnZS05Ij45PC9hPiB8ICA8YSBocmVmPSIvcHVibGljYXRpb25zL3NlYXJjaD9rZXl3b3Jkcy1sZz1TUCsyMjIyJnNvcnRCeS1sZz1yZWxldmVuY2Umc3RhdHVzLWxnPUZpbmFsJTJjV2l0aGRyYXduJnBhZ2U9MTAiIGFyaWEtbGFiZWw9IlBhZ2UgMTAiIGlkPSJtb2JpbGUtdG9wLXBhZ2UtMTAiPjEwPC9hPiZuYnNwOyZuYnNwOzxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT0yIiBhcmlhLWxhYmVsPSJOZXh0IFBhZ2UiIGlkPSJtb2JpbGUtdG9wLXBhZ2UtbmV4dCI+Jmd0OzwvYT4mbmJzcDsmbmJzcDs8YSBocmVmPSIvcHVibGljYXRpb25zL3NlYXJjaD9rZXl3b3Jkcy1sZz1TUCsyMjIyJnNvcnRCeS1sZz1yZWxldmVuY2Umc3RhdHVzLWxnPUZpbmFsJTJjV2l0aGRyYXduJnBhZ2U9NDYiIGFyaWEtbGFiZWw9Ikxhc3QgUGFnZSIgaWQ9Im1vYmlsZS10b3AtcGFnZS1sYXN0IiBkYXRhLWxhc3QtcGFnZS1udW1iZXI9IjQ2Ij4mZ3Q7Jmd0OzwvYT48L3NwYW4+DQogICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc3RyaXBlZCB0YWJsZS1jb25kZW5zZWQgcHVibGljYXRpb25zLXRhYmxlIHRhYmxlLWJvcmRlcmVkIg0KICAgICAgICAgICBpZD0icHVibGljYXRpb25zLXJlc3VsdHMtdGFibGUiDQogICAgICAgICAgIGRhdGEtdG90YWwtcmVjb3Jkcz0iMTE0MyINCiAgICAgICAgICAgZGF0YS1wYWdlPSIxIiBkYXRhLWZpcnN0LXJlY29yZD0iMSINCiAgICAgICAgICAgZGF0YS1sYXN0LXJlY29yZD0iMjUiIGRhdGEtaXBwPSIyNSI+DQogICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiPlNlcmllczwvdGg+DQogICAgICAgICAgICAgICAgPHRoIG5vd3JhcCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIj5OdW1iZXI8L3RoPg0KICAgICAgICAgICAgICAgIDx0aCBub3dyYXA+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiPlRpdGxlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+UHVibGljYXRpb25zPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvdGg+DQogICAgICAgICAgICAgICAgPHRoIG5vd3JhcCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIj5TdGF0dXM8L3RoPg0KICAgICAgICAgICAgICAgIDx0aCBub3dyYXAgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+UmVsZWFzZSBEYXRlPC90aD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgIDwvdGhlYWQ+DQogICAgICAgIDx0Ym9keT4NCiAgICAgICAgICAgICAgICA8dHIgaWQ9InJlc3VsdC0xIj4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc2VyaWVzLTEiPlNQPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItbnVtYmVyLTEiPiAxODAwLTEyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvMTgwMC0xMi9hcmNoaXZlLzIwMTgtMDgtMDIiIGlkPSJwdWItdGl0bGUtbGluay0xIj5EZXJpdmVkIFBlcnNvbmFsIElkZW50aXR5IFZlcmlmaWNhdGlvbiAoUElWKSBDcmVkZW50aWFscyAoMm5kIERyYWZ0KTwvYT48L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHViLWZ1bGwtZGlzcGxheS1zbS0xIj5TUCAxODAwLTEyIChEcmFmdCk8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzE4MDAtMTIvYXJjaGl2ZS8yMDE4LTA4LTAyIiBjbGFzcz0ibW9iaWxlLXB1Yi10aXRsZSIgaWQ9InB1Yi10aXRsZS1saW5rLXNtLTEiPkRlcml2ZWQgUGVyc29uYWwgSWRlbnRpdHkgVmVyaWZpY2F0aW9uIChQSVYpIENyZWRlbnRpYWxzICgybmQgRHJhZnQpPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmcgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtc20tMSI+OC8wMi8yMDE4PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzOiA8c3BhbiBpZD0icHViLXN0YXR1cy1zbS0xIj5EcmFmdCAoT2Jzb2xldGUpPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRyb2wtdmFsdWUtbm8tYmxvY2siPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImRvd25sb2FkLXZhbHVlcy0xIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTEtMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL25jY29lLm5pc3QuZ292L3Byb2plY3RzL2J1aWxkaW5nLWJsb2Nrcy9waXYtY3JlZGVudGlhbHMiPkRyYWZ0IFNQIDE4MDAtMTIgdm9sdW1lcyBhbmQgUHJvamVjdCBIb21lcGFnZTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0xLTEnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmNjb2UubmlzdC5nb3Yvd2ViZm9ybS9jb21tZW50cy1zZWNvbmQtZHJhZnQtc3AtMTgwMC0xMi1kZXJpdmVkLXBpdi1jcmVkZW50aWFscyI+U3VibWl0IENvbW1lbnRzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zdGF0dXMtMSI+DQogICAgICAgICAgICAgICAgICAgICAgICBEcmFmdCAoT2Jzb2xldGUpDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXJlbGVhc2UtZGF0ZS0xIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDgvMDIvMjAxOA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyIGlkPSJyZXN1bHQtMiI+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXNlcmllcy0yIj5TUDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLW51bWJlci0yIj4gMTgwMC0xMzwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzE4MDAtMTMvYXJjaGl2ZS8yMDE4LTA0LTE2IiBpZD0icHViLXRpdGxlLWxpbmstMiI+TW9iaWxlIEFwcGxpY2F0aW9uIFNpbmdsZSBTaWduLU9uOiBJbXByb3ZpbmcgQXV0aGVudGljYXRpb24gZm9yIFB1YmxpYyBTYWZldHkgYW5kIEZpcnN0IFJlc3BvbmRlcnM8L2E+PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InB1Yi1mdWxsLWRpc3BsYXktc20tMiI+U1AgMTgwMC0xMyAoRHJhZnQpPC9zcGFuPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC8xODAwLTEzL2FyY2hpdmUvMjAxOC0wNC0xNiIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS0yIj5Nb2JpbGUgQXBwbGljYXRpb24gU2luZ2xlIFNpZ24tT246IEltcHJvdmluZyBBdXRoZW50aWNhdGlvbiBmb3IgUHVibGljIFNhZmV0eSBhbmQgRmlyc3QgUmVzcG9uZGVyczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGlkPSJwdWItcmVsZWFzZS1kYXRlLXNtLTIiPjQvMTYvMjAxODwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tMiI+RHJhZnQgKE9ic29sZXRlKTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLXZhbHVlLW5vLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJkb3dubG9hZC12YWx1ZXMtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0yLTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmNjb2UubmlzdC5nb3YvcHJvamVjdHMvdXNlLWNhc2VzL21vYmlsZS1zc28iPkRyYWZ0IFNQIDE4MDAtMTMgdm9sdW1lcyBhbmQgUHJvamVjdCBIb21lcGFnZTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0yLTEnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmNjb2UubmlzdC5nb3Yvd2ViZm9ybS9jb21tZW50cy1zcC0xODAwLTEzLW1vYmlsZS1hcHBsaWNhdGlvbi1zaW5nbGUtc2lnbiI+U3VibWl0IENvbW1lbnRzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zdGF0dXMtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICBEcmFmdCAoT2Jzb2xldGUpDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXJlbGVhc2UtZGF0ZS0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDQvMTYvMjAxOA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyIGlkPSJyZXN1bHQtMyI+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXNlcmllcy0zIj5TUDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLW51bWJlci0zIj4gMTgwMC0xMjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzE4MDAtMTIvYXJjaGl2ZS8yMDE3LTA5LTI5IiBpZD0icHViLXRpdGxlLWxpbmstMyI+RGVyaXZlZCBQZXJzb25hbCBJZGVudGl0eSBWZXJpZmljYXRpb24gKFBJVikgQ3JlZGVudGlhbHM8L2E+PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InB1Yi1mdWxsLWRpc3BsYXktc20tMyI+U1AgMTgwMC0xMiAoRHJhZnQpPC9zcGFuPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC8xODAwLTEyL2FyY2hpdmUvMjAxNy0wOS0yOSIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS0zIj5EZXJpdmVkIFBlcnNvbmFsIElkZW50aXR5IFZlcmlmaWNhdGlvbiAoUElWKSBDcmVkZW50aWFsczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGlkPSJwdWItcmVsZWFzZS1kYXRlLXNtLTMiPjkvMjkvMjAxNzwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tMyI+RHJhZnQgKE9ic29sZXRlKTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLXZhbHVlLW5vLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJkb3dubG9hZC12YWx1ZXMtMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0zLTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9uY2NvZS5uaXN0Lmdvdi9wcm9qZWN0cy9idWlsZGluZy1ibG9ja3MvcGl2LWNyZWRlbnRpYWxzIj5EcmFmdCBTUCAxODAwLTEyIHZvbHVtZXMgYW5kIFByb2plY3QgSG9tZXBhZ2U8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMy0xJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbmNjb2UubmlzdC5nb3Yvd2ViZm9ybS9jb21tZW50cy1zcC0xODAwLTEyLWRlcml2ZWQtcGl2LWNyZWRlbnRpYWxzIj5TdWJtaXQgQ29tbWVudHM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXN0YXR1cy0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIERyYWZ0IChPYnNvbGV0ZSkNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItcmVsZWFzZS1kYXRlLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgOS8yOS8yMDE3DQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHIgaWQ9InJlc3VsdC00Ij4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc2VyaWVzLTQiPlNQPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItbnVtYmVyLTQiPiAxODAwLTIxPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvMTgwMC0yMS9hcmNoaXZlLzIwMTktMDctMjIiIGlkPSJwdWItdGl0bGUtbGluay00Ij5Nb2JpbGUgRGV2aWNlIFNlY3VyaXR5OiBDb3Jwb3JhdGUtT3duZWQgUGVyc29uYWxseS1FbmFibGVkIChDT1BFKTwvYT48L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHViLWZ1bGwtZGlzcGxheS1zbS00Ij5TUCAxODAwLTIxIChEcmFmdCk8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzE4MDAtMjEvYXJjaGl2ZS8yMDE5LTA3LTIyIiBjbGFzcz0ibW9iaWxlLXB1Yi10aXRsZSIgaWQ9InB1Yi10aXRsZS1saW5rLXNtLTQiPk1vYmlsZSBEZXZpY2UgU2VjdXJpdHk6IENvcnBvcmF0ZS1Pd25lZCBQZXJzb25hbGx5LUVuYWJsZWQgKENPUEUpPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmcgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtc20tNCI+Ny8yMi8yMDE5PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzOiA8c3BhbiBpZD0icHViLXN0YXR1cy1zbS00Ij5EcmFmdCAoT2Jzb2xldGUpPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRyb2wtdmFsdWUtbm8tYmxvY2siPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImRvd25sb2FkLXZhbHVlcy00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTQtMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5uY2NvZS5uaXN0Lmdvdi9zaXRlcy9kZWZhdWx0L2ZpbGVzL2xpYnJhcnkvc3AxODAwL21kc2UtbmlzdC1zcDE4MDAtMjEtZHJhZnQucGRmIj5EcmFmdCAxODAwLTIxPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTQtMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5uY2NvZS5uaXN0Lmdvdi9wcm9qZWN0cy9idWlsZGluZy1ibG9ja3MvbW9iaWxlLWRldmljZS1zZWN1cml0eS9jb3Jwb3JhdGUtb3duZWQtcGVyc29uYWxseS1lbmFibGVkIj5Qcm9qZWN0IEhvbWVwYWdlPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTQtMic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5uY2NvZS5uaXN0Lmdvdi93ZWJmb3JtL2NvbW1lbnRzLXNwLTE4MDAtMjEtbW9iaWxlLWRldmljZS1zZWN1cml0eS1jb3Jwb3JhdGUtb3duZWQtcGVyc29uYWxseS1lbmFibGVkLWNvcGUiPlN1Ym1pdCBDb21tZW50czwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc3RhdHVzLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgRHJhZnQgKE9ic29sZXRlKQ0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICA3LzIyLzIwMTkNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0ciBpZD0icmVzdWx0LTUiPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zZXJpZXMtNSI+U1A8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1udW1iZXItNSI+IDE4MDAtMjE8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC8xODAwLTIxL2ZpbmFsIiBpZD0icHViLXRpdGxlLWxpbmstNSI+TW9iaWxlIERldmljZSBTZWN1cml0eTogQ29ycG9yYXRlLU93bmVkIFBlcnNvbmFsbHktRW5hYmxlZCAoQ09QRSk8L2E+PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InB1Yi1mdWxsLWRpc3BsYXktc20tNSI+U1AgMTgwMC0yMTwvc3Bhbj48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvMTgwMC0yMS9maW5hbCIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS01Ij5Nb2JpbGUgRGV2aWNlIFNlY3VyaXR5OiBDb3Jwb3JhdGUtT3duZWQgUGVyc29uYWxseS1FbmFibGVkIChDT1BFKTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGlkPSJwdWItcmVsZWFzZS1kYXRlLXNtLTUiPjkvMTUvMjAyMDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tNSI+RmluYWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZG93bmxvYWQtdmFsdWVzLTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtNS0wJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC42MDI4L05JU1QuU1AuMTgwMC0yMSI+U1AgMTgwMC0yMSAoRE9JKTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS01LTEnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9udmxwdWJzLm5pc3QuZ292L25pc3RwdWJzL1NwZWNpYWxQdWJsaWNhdGlvbnMvTklTVC5TUC4xODAwLTIxLnBkZiI+TG9jYWwgRG93bmxvYWQ8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtNS0yJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5jY29lLm5pc3QuZ292L3Byb2plY3RzL2J1aWxkaW5nLWJsb2Nrcy9tb2JpbGUtZGV2aWNlLXNlY3VyaXR5L2NvcnBvcmF0ZS1vd25lZC1wZXJzb25hbGx5LWVuYWJsZWQiPlNQIDE4MDAtMjEgdm9sdW1lcyBhbmQgUHJvamVjdCBIb21lcGFnZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc3RhdHVzLTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgRmluYWwNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItcmVsZWFzZS1kYXRlLTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgOS8xNS8yMDIwDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHIgaWQ9InJlc3VsdC02Ij4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc2VyaWVzLTYiPlNQPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItbnVtYmVyLTYiPiAxODAwLTQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC8xODAwLTQvZmluYWwiIGlkPSJwdWItdGl0bGUtbGluay02Ij5Nb2JpbGUgRGV2aWNlIFNlY3VyaXR5OiBDbG91ZCBhbmQgSHlicmlkIEJ1aWxkczwvYT48L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHViLWZ1bGwtZGlzcGxheS1zbS02Ij5TUCAxODAwLTQ8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzE4MDAtNC9maW5hbCIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS02Ij5Nb2JpbGUgRGV2aWNlIFNlY3VyaXR5OiBDbG91ZCBhbmQgSHlicmlkIEJ1aWxkczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGlkPSJwdWItcmVsZWFzZS1kYXRlLXNtLTYiPjIvMjEvMjAxOTwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tNiI+RmluYWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZG93bmxvYWQtdmFsdWVzLTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtNi0wJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC42MDI4L05JU1QuU1AuMTgwMC00Ij5TUCAxODAwLTQgKERPSSk8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtNi0xJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9TcGVjaWFsUHVibGljYXRpb25zL05JU1QuU1AuMTgwMC00LnBkZiI+TG9jYWwgRG93bmxvYWQ8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtNi0yJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5jY29lLm5pc3QuZ292L3B1YmxpY2F0aW9uLzE4MDAtNC8iPldlYiB2ZXJzaW9uPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTYtMyc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL25jY29lLm5pc3QuZ292L3Byb2plY3RzL2J1aWxkaW5nX2Jsb2Nrcy9tb2JpbGVfZGV2aWNlX3NlY3VyaXR5Ij5Qcm9qZWN0IEhvbWVwYWdlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zdGF0dXMtNiI+DQogICAgICAgICAgICAgICAgICAgICAgICBGaW5hbA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAyLzIxLzIwMTkNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0ciBpZD0icmVzdWx0LTciPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zZXJpZXMtNyI+U1A8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1udW1iZXItNyI+IDE4MDAtMTI8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC8xODAwLTEyL2ZpbmFsIiBpZD0icHViLXRpdGxlLWxpbmstNyI+RGVyaXZlZCBQZXJzb25hbCBJZGVudGl0eSBWZXJpZmljYXRpb24gKFBJVikgQ3JlZGVudGlhbHM8L2E+PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InB1Yi1mdWxsLWRpc3BsYXktc20tNyI+U1AgMTgwMC0xMjwvc3Bhbj48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvMTgwMC0xMi9maW5hbCIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS03Ij5EZXJpdmVkIFBlcnNvbmFsIElkZW50aXR5IFZlcmlmaWNhdGlvbiAoUElWKSBDcmVkZW50aWFsczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGlkPSJwdWItcmVsZWFzZS1kYXRlLXNtLTciPjgvMjcvMjAxOTwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tNyI+RmluYWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZG93bmxvYWQtdmFsdWVzLTciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtNy0wJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC42MDI4L05JU1QuU1AuMTgwMC0xMiI+U1AgMTgwMC0xMiAoRE9JKTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS03LTEnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9udmxwdWJzLm5pc3QuZ292L25pc3RwdWJzL1NwZWNpYWxQdWJsaWNhdGlvbnMvTklTVC5TUC4xODAwLTEyLnBkZiI+TG9jYWwgRG93bmxvYWQ8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtNy0yJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5jY29lLm5pc3QuZ292L3B1YmxpY2F0aW9uLzE4MDAtMTIvIj5XZWIgdmVyc2lvbjwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS03LTMnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9uY2NvZS5uaXN0Lmdvdi9wcm9qZWN0cy9idWlsZGluZy1ibG9ja3MvcGl2LWNyZWRlbnRpYWxzIj5Qcm9qZWN0IEhvbWVwYWdlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zdGF0dXMtNyI+DQogICAgICAgICAgICAgICAgICAgICAgICBGaW5hbA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtNyI+DQogICAgICAgICAgICAgICAgICAgICAgICA4LzI3LzIwMTkNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0ciBpZD0icmVzdWx0LTgiPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zZXJpZXMtOCI+U1A8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1udW1iZXItOCI+IDgwMC01M0I8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtNTNiL2FyY2hpdmUvMjAyMC0xMC0yOSIgaWQ9InB1Yi10aXRsZS1saW5rLTgiPkNvbnRyb2wgQmFzZWxpbmVzIGZvciBJbmZvcm1hdGlvbiBTeXN0ZW1zIGFuZCBPcmdhbml6YXRpb25zPC9hPjwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJwdWItZnVsbC1kaXNwbGF5LXNtLTgiPlNQIDgwMC01M0IgKFdpdGhkcmF3bik8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzgwMC01M2IvYXJjaGl2ZS8yMDIwLTEwLTI5IiBjbGFzcz0ibW9iaWxlLXB1Yi10aXRsZSIgaWQ9InB1Yi10aXRsZS1saW5rLXNtLTgiPkNvbnRyb2wgQmFzZWxpbmVzIGZvciBJbmZvcm1hdGlvbiBTeXN0ZW1zIGFuZCBPcmdhbml6YXRpb25zPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmcgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtc20tOCI+MTAvMjkvMjAyMDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tOCI+V2l0aGRyYXduPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRyb2wtdmFsdWUtbm8tYmxvY2siPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDogPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlcy04Jz5Ob25lIGF2YWlsYWJsZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zdGF0dXMtOCI+DQogICAgICAgICAgICAgICAgICAgICAgICBXaXRoZHJhd24NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItcmVsZWFzZS1kYXRlLTgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgMTAvMjkvMjAyMA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyIGlkPSJyZXN1bHQtOSI+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXNlcmllcy05Ij5TUDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLW51bWJlci05Ij4gODAwLTUzQjwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzgwMC01M2IvYXJjaGl2ZS8yMDIwLTA3LTMxIiBpZD0icHViLXRpdGxlLWxpbmstOSI+Q29udHJvbCBCYXNlbGluZXMgZm9yIEluZm9ybWF0aW9uIFN5c3RlbXMgYW5kIE9yZ2FuaXphdGlvbnM8L2E+PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InB1Yi1mdWxsLWRpc3BsYXktc20tOSI+U1AgODAwLTUzQiAoRHJhZnQpPC9zcGFuPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtNTNiL2FyY2hpdmUvMjAyMC0wNy0zMSIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS05Ij5Db250cm9sIEJhc2VsaW5lcyBmb3IgSW5mb3JtYXRpb24gU3lzdGVtcyBhbmQgT3JnYW5pemF0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGlkPSJwdWItcmVsZWFzZS1kYXRlLXNtLTkiPjcvMzEvMjAyMDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tOSI+RHJhZnQgKE9ic29sZXRlKTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLXZhbHVlLW5vLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJkb3dubG9hZC12YWx1ZXMtOSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS05LTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjYwMjgvTklTVC5TUC44MDAtNTNCLWRyYWZ0Ij5TUCA4MDAtNTNCIChEcmFmdCkgKERPSSk8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtOS0xJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9TcGVjaWFsUHVibGljYXRpb25zL05JU1QuU1AuODAwLTUzQi1kcmFmdC5wZGYiPkxvY2FsIERvd25sb2FkPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTktMic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvQ1NSQy9tZWRpYS9QdWJsaWNhdGlvbnMvc3AvODAwLTUzYi9kcmFmdC9kb2N1bWVudHMvc3A4MDAtNTNCLWRyYWZ0LWNvbW1lbnQtdGVtcGxhdGUueGxzeCI+Q29tbWVudCB0ZW1wbGF0ZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc3RhdHVzLTkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgRHJhZnQgKE9ic29sZXRlKQ0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtOSI+DQogICAgICAgICAgICAgICAgICAgICAgICA3LzMxLzIwMjANCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0ciBpZD0icmVzdWx0LTEwIj4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc2VyaWVzLTEwIj5TUDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLW51bWJlci0xMCI+IDgwMC0yMDk8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMjA5L2FyY2hpdmUvMjAyMC0wNy0yMSIgaWQ9InB1Yi10aXRsZS1saW5rLTEwIj5TZWN1cml0eSBHdWlkZWxpbmVzIGZvciBTdG9yYWdlIEluZnJhc3RydWN0dXJlPC9hPjwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJwdWItZnVsbC1kaXNwbGF5LXNtLTEwIj5TUCA4MDAtMjA5IChEcmFmdCk8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzgwMC0yMDkvYXJjaGl2ZS8yMDIwLTA3LTIxIiBjbGFzcz0ibW9iaWxlLXB1Yi10aXRsZSIgaWQ9InB1Yi10aXRsZS1saW5rLXNtLTEwIj5TZWN1cml0eSBHdWlkZWxpbmVzIGZvciBTdG9yYWdlIEluZnJhc3RydWN0dXJlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmcgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtc20tMTAiPjcvMjEvMjAyMDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tMTAiPkRyYWZ0IChPYnNvbGV0ZSk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZG93bmxvYWQtdmFsdWVzLTEwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTEwLTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjYwMjgvTklTVC5TUC44MDAtMjA5LWRyYWZ0Ij5TUCA4MDAtMjA5IChEcmFmdCkgKERPSSk8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTAtMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL252bHB1YnMubmlzdC5nb3YvbmlzdHB1YnMvU3BlY2lhbFB1YmxpY2F0aW9ucy9OSVNULlNQLjgwMC0yMDktZHJhZnQucGRmIj5Mb2NhbCBEb3dubG9hZDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc3RhdHVzLTEwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIERyYWZ0IChPYnNvbGV0ZSkNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItcmVsZWFzZS1kYXRlLTEwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDcvMjEvMjAyMA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyIGlkPSJyZXN1bHQtMTEiPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zZXJpZXMtMTEiPlNQPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItbnVtYmVyLTExIj4gODAwLTE4MSBSZXYuIDE8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMTgxL3Jldi0xL2FyY2hpdmUvMjAyMC0wNy0xNSIgaWQ9InB1Yi10aXRsZS1saW5rLTExIj5Xb3JrZm9yY2UgRnJhbWV3b3JrIGZvciBDeWJlcnNlY3VyaXR5IChOSUNFIEZyYW1ld29yayk8L2E+PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InB1Yi1mdWxsLWRpc3BsYXktc20tMTEiPlNQIDgwMC0xODEgUmV2LiAxIChEcmFmdCk8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzgwMC0xODEvcmV2LTEvYXJjaGl2ZS8yMDIwLTA3LTE1IiBjbGFzcz0ibW9iaWxlLXB1Yi10aXRsZSIgaWQ9InB1Yi10aXRsZS1saW5rLXNtLTExIj5Xb3JrZm9yY2UgRnJhbWV3b3JrIGZvciBDeWJlcnNlY3VyaXR5IChOSUNFIEZyYW1ld29yayk8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBpZD0icHViLXJlbGVhc2UtZGF0ZS1zbS0xMSI+Ny8xNS8yMDIwPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzOiA8c3BhbiBpZD0icHViLXN0YXR1cy1zbS0xMSI+RHJhZnQgKE9ic29sZXRlKTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLXZhbHVlLW5vLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJkb3dubG9hZC12YWx1ZXMtMTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTEtMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RvaS5vcmcvMTAuNjAyOC9OSVNULlNQLjgwMC0xODFyMS1kcmFmdCI+U1AgODAwLTE4MSBSZXYuIDEgKERyYWZ0KSAoRE9JKTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0xMS0xJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9TcGVjaWFsUHVibGljYXRpb25zL05JU1QuU1AuODAwLTE4MXIxLWRyYWZ0LnBkZiI+TG9jYWwgRG93bmxvYWQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXN0YXR1cy0xMSI+DQogICAgICAgICAgICAgICAgICAgICAgICBEcmFmdCAoT2Jzb2xldGUpDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXJlbGVhc2UtZGF0ZS0xMSI+DQogICAgICAgICAgICAgICAgICAgICAgICA3LzE1LzIwMjANCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0ciBpZD0icmVzdWx0LTEyIj4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc2VyaWVzLTEyIj5TUDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLW51bWJlci0xMiI+IDgwMC0xNzI8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMTcyL2FyY2hpdmUvMjAyMC0wNy0wNiIgaWQ9InB1Yi10aXRsZS1saW5rLTEyIj5FbmhhbmNlZCBTZWN1cml0eSBSZXF1aXJlbWVudHMgZm9yIFByb3RlY3RpbmcgQ29udHJvbGxlZCBVbmNsYXNzaWZpZWQgSW5mb3JtYXRpb246IEEgU3VwcGxlbWVudCB0byBOSVNUIFNwZWNpYWwgUHVibGljYXRpb24gODAwLTE3MSAoRmluYWwgUHVibGljIERyYWZ0KTwvYT48L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHViLWZ1bGwtZGlzcGxheS1zbS0xMiI+U1AgODAwLTE3MiAoRHJhZnQpPC9zcGFuPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMTcyL2FyY2hpdmUvMjAyMC0wNy0wNiIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS0xMiI+RW5oYW5jZWQgU2VjdXJpdHkgUmVxdWlyZW1lbnRzIGZvciBQcm90ZWN0aW5nIENvbnRyb2xsZWQgVW5jbGFzc2lmaWVkIEluZm9ybWF0aW9uOiBBIFN1cHBsZW1lbnQgdG8gTklTVCBTcGVjaWFsIFB1YmxpY2F0aW9uIDgwMC0xNzEgKEZpbmFsIFB1YmxpYyBEcmFmdCk8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBpZD0icHViLXJlbGVhc2UtZGF0ZS1zbS0xMiI+Ny8wNi8yMDIwPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzOiA8c3BhbiBpZD0icHViLXN0YXR1cy1zbS0xMiI+RHJhZnQgKE9ic29sZXRlKTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLXZhbHVlLW5vLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJkb3dubG9hZC12YWx1ZXMtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTItMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RvaS5vcmcvMTAuNjAyOC9OSVNULlNQLjgwMC0xNzItZHJhZnQiPlNQIDgwMC0xNzIgKERyYWZ0KSAoRE9JKTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0xMi0xJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9TcGVjaWFsUHVibGljYXRpb25zL05JU1QuU1AuODAwLTE3Mi1kcmFmdC5wZGYiPkxvY2FsIERvd25sb2FkPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTEyLTInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL0NTUkMvbWVkaWEvUHVibGljYXRpb25zL3NwLzgwMC0xNzIvZHJhZnQvZG9jdW1lbnRzL3NwODAwLTE3Mi1kcmFmdC1mcGQtY29tbWVudC10ZW1wbGF0ZS54bHN4Ij5Db21tZW50IHRlbXBsYXRlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zdGF0dXMtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgRHJhZnQgKE9ic29sZXRlKQ0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgNy8wNi8yMDIwDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHIgaWQ9InJlc3VsdC0xMyI+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXNlcmllcy0xMyI+U1A8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1udW1iZXItMTMiPiA4MDAtMjEwPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvODAwLTIxMC9hcmNoaXZlLzIwMjAtMDQtMDEiIGlkPSJwdWItdGl0bGUtbGluay0xMyI+R2VuZXJhbCBBY2Nlc3MgQ29udHJvbCBHdWlkYW5jZSBmb3IgQ2xvdWQgU3lzdGVtczwvYT48L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHViLWZ1bGwtZGlzcGxheS1zbS0xMyI+U1AgODAwLTIxMCAoRHJhZnQpPC9zcGFuPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMjEwL2FyY2hpdmUvMjAyMC0wNC0wMSIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS0xMyI+R2VuZXJhbCBBY2Nlc3MgQ29udHJvbCBHdWlkYW5jZSBmb3IgQ2xvdWQgU3lzdGVtczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGlkPSJwdWItcmVsZWFzZS1kYXRlLXNtLTEzIj40LzAxLzIwMjA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0dXM6IDxzcGFuIGlkPSJwdWItc3RhdHVzLXNtLTEzIj5EcmFmdCAoT2Jzb2xldGUpPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRyb2wtdmFsdWUtbm8tYmxvY2siPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImRvd25sb2FkLXZhbHVlcy0xMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0xMy0wJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZG9pLm9yZy8xMC42MDI4L05JU1QuU1AuODAwLTIxMC1kcmFmdCI+U1AgODAwLTIxMCAoRHJhZnQpIChET0kpPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTEzLTEnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9udmxwdWJzLm5pc3QuZ292L25pc3RwdWJzL1NwZWNpYWxQdWJsaWNhdGlvbnMvTklTVC5TUC44MDAtMjEwLWRyYWZ0LnBkZiI+TG9jYWwgRG93bmxvYWQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXN0YXR1cy0xMyI+DQogICAgICAgICAgICAgICAgICAgICAgICBEcmFmdCAoT2Jzb2xldGUpDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXJlbGVhc2UtZGF0ZS0xMyI+DQogICAgICAgICAgICAgICAgICAgICAgICA0LzAxLzIwMjANCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0ciBpZD0icmVzdWx0LTE0Ij4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc2VyaWVzLTE0Ij5TUDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLW51bWJlci0xNCI+IDgwMC01NkMgUmV2LiAyPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvODAwLTU2Yy9yZXYtMi9hcmNoaXZlLzIwMjAtMDMtMjQiIGlkPSJwdWItdGl0bGUtbGluay0xNCI+UmVjb21tZW5kYXRpb24gZm9yIEtleS1EZXJpdmF0aW9uIE1ldGhvZHMgaW4gS2V5LUVzdGFibGlzaG1lbnQgU2NoZW1lczwvYT48L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHViLWZ1bGwtZGlzcGxheS1zbS0xNCI+U1AgODAwLTU2QyBSZXYuIDIgKERyYWZ0KTwvc3Bhbj48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvODAwLTU2Yy9yZXYtMi9hcmNoaXZlLzIwMjAtMDMtMjQiIGNsYXNzPSJtb2JpbGUtcHViLXRpdGxlIiBpZD0icHViLXRpdGxlLWxpbmstc20tMTQiPlJlY29tbWVuZGF0aW9uIGZvciBLZXktRGVyaXZhdGlvbiBNZXRob2RzIGluIEtleS1Fc3RhYmxpc2htZW50IFNjaGVtZXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBpZD0icHViLXJlbGVhc2UtZGF0ZS1zbS0xNCI+My8yNC8yMDIwPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzOiA8c3BhbiBpZD0icHViLXN0YXR1cy1zbS0xNCI+RHJhZnQgKE9ic29sZXRlKTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLXZhbHVlLW5vLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJkb3dubG9hZC12YWx1ZXMtMTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTQtMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RvaS5vcmcvMTAuNjAyOC9OSVNULlNQLjgwMC01NkNyMi1kcmFmdCI+U1AgODAwLTU2QyBSZXYuIDIgKERyYWZ0KSAoRE9JKTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0xNC0xJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9TcGVjaWFsUHVibGljYXRpb25zL05JU1QuU1AuODAwLTU2Q3IyLWRyYWZ0LnBkZiI+TG9jYWwgRG93bmxvYWQ8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTQtMic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvQ1NSQy9tZWRpYS9QdWJsaWNhdGlvbnMvc3AvODAwLTU2Yy9yZXYtMi9kcmFmdC9kb2N1bWVudHMvc3A4MDAtNTZDcjItZHJhZnQtY29tbWVudHMtcmVjZWl2ZWQucGRmIj5Db21tZW50cyByZWNlaXZlZCBvbiBEcmFmdCBTUCA4MDAtNTZDIFJldi4gMjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc3RhdHVzLTE0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIERyYWZ0IChPYnNvbGV0ZSkNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItcmVsZWFzZS1kYXRlLTE0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDMvMjQvMjAyMA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyIGlkPSJyZXN1bHQtMTUiPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zZXJpZXMtMTUiPlNQPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItbnVtYmVyLTE1Ij4gODAwLTUzIFJldi4gNTwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzgwMC01My9yZXYtNS9hcmNoaXZlLzIwMjAtMDMtMTYiIGlkPSJwdWItdGl0bGUtbGluay0xNSI+U2VjdXJpdHkgYW5kIFByaXZhY3kgQ29udHJvbHMgZm9yIEluZm9ybWF0aW9uIFN5c3RlbXMgYW5kIE9yZ2FuaXphdGlvbnMgKEZpbmFsIFB1YmxpYyBEcmFmdCk8L2E+PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InB1Yi1mdWxsLWRpc3BsYXktc20tMTUiPlNQIDgwMC01MyBSZXYuIDUgKERyYWZ0KTwvc3Bhbj48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvODAwLTUzL3Jldi01L2FyY2hpdmUvMjAyMC0wMy0xNiIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS0xNSI+U2VjdXJpdHkgYW5kIFByaXZhY3kgQ29udHJvbHMgZm9yIEluZm9ybWF0aW9uIFN5c3RlbXMgYW5kIE9yZ2FuaXphdGlvbnMgKEZpbmFsIFB1YmxpYyBEcmFmdCk8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBpZD0icHViLXJlbGVhc2UtZGF0ZS1zbS0xNSI+My8xNi8yMDIwPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzOiA8c3BhbiBpZD0icHViLXN0YXR1cy1zbS0xNSI+RHJhZnQgKE9ic29sZXRlKTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLXZhbHVlLW5vLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJkb3dubG9hZC12YWx1ZXMtMTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTUtMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RvaS5vcmcvMTAuNjAyOC9OSVNULlNQLjgwMC01M3I1LWRyYWZ0Ij5TUCA4MDAtNTMgUmV2LiA1IChEcmFmdCkgKERPSSk8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTUtMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL252bHB1YnMubmlzdC5nb3YvbmlzdHB1YnMvU3BlY2lhbFB1YmxpY2F0aW9ucy9OSVNULlNQLjgwMC01M3I1LWRyYWZ0LnBkZiI+TG9jYWwgRG93bmxvYWQ8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTUtMic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvQ1NSQy9tZWRpYS9QdWJsaWNhdGlvbnMvc3AvODAwLTUzL3Jldi01L2RyYWZ0L2RvY3VtZW50cy9zcDgwMC01M3I1LWRyYWZ0LWZwZC1jb21tZW50LXRlbXBsYXRlLnhsc3giPkNvbW1lbnQgdGVtcGxhdGU8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTUtMyc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvQ1NSQy9tZWRpYS9QdWJsaWNhdGlvbnMvc3AvODAwLTUzL3Jldi01L2RyYWZ0L2RvY3VtZW50cy9zcDgwMC01M3I1LWRyYWZ0LWZwZC1zdW1tYXJ5LW9mLXNpZ25pZmljYW50LWNoYW5nZXMucGRmIj5TdW1tYXJ5OiBTaWduaWZpY2FudCBDaGFuZ2VzIGZyb20gUmV2LiA0PC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTE1LTQnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL0NTUkMvbWVkaWEvUHVibGljYXRpb25zL3NwLzgwMC01My9yZXYtNS9kcmFmdC9kb2N1bWVudHMvc3A4MDAtNTNyNS1kcmFmdC1mcGQtY29tcGFyaXNvbi13aXRoLXJldjQueGxzeCI+Q29tcGFyaXNvbiBvZiBSZXZzLiA0IGFuZCA1LCBhdXRob3JlZCBieSBNSVRSRSBDb3JwLiBmb3IgT0ROSTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0xNS01Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS91c25pc3Rnb3YvT1NDQUwvdHJlZS9tYXN0ZXIvY29udGVudC9uaXN0Lmdvdi9TUDgwMC01MyI+T1NDQUwgdmVyc2lvbiBvZiA4MDAtNTMgRlBEIGNvbnRyb2xzPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTE1LTYnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL0NTUkMvbWVkaWEvUHVibGljYXRpb25zL3NwLzgwMC01My9yZXYtNS9kcmFmdC9kb2N1bWVudHMvc3A4MDAtNTNyNS1mcGQtY29udHJvbHMueGxzeCI+U3ByZWFkc2hlZXQgdmVyc2lvbiBvZiA4MDAtNTMgRlBEIGNvbnRyb2xzPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTE1LTcnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmlzdC5nb3YvbmV3cy1ldmVudHMvbmV3cy8yMDIwLzAzL25pc3QtdXBkYXRlcy1hbmQtZXhwYW5kcy1pdHMtZmxhZ3NoaXAtY2F0YWxvZy1pbmZvcm1hdGlvbi1zeXN0ZW0tc2FmZWd1YXJkcyI+TklTVCBuZXdzIGFydGljbGU8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTUtOCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvQ1NSQy9tZWRpYS9QdWJsaWNhdGlvbnMvc3AvODAwLTUzL3Jldi01L2RyYWZ0L2RvY3VtZW50cy9zcDgwMC01M3I1LWRyYWZ0LWZwZC1mYXEucGRmIj5GcmVxdWVudGx5IEFza2VkIFF1ZXN0aW9uczwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0xNS05Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vY3NyYy5uaXN0Lmdvdi9Qcm9qZWN0cy9yaXNrLW1hbmFnZW1lbnQvZmFxcyNGMXFmIj5GcmVxdWVudGx5IEFza2VkIFF1ZXN0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc3RhdHVzLTE1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIERyYWZ0IChPYnNvbGV0ZSkNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItcmVsZWFzZS1kYXRlLTE1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDMvMTYvMjAyMA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyIGlkPSJyZXN1bHQtMTYiPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zZXJpZXMtMTYiPlNQPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItbnVtYmVyLTE2Ij4gODAwLTEzMyBSZXYuIDI8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMTMzL3Jldi0yL2FyY2hpdmUvMjAyMC0wMy0wNSIgaWQ9InB1Yi10aXRsZS1saW5rLTE2Ij5SZWNvbW1lbmRhdGlvbiBmb3IgQ3J5cHRvZ3JhcGhpYyBLZXkgR2VuZXJhdGlvbjwvYT48L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHViLWZ1bGwtZGlzcGxheS1zbS0xNiI+U1AgODAwLTEzMyBSZXYuIDIgKERyYWZ0KTwvc3Bhbj48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvODAwLTEzMy9yZXYtMi9hcmNoaXZlLzIwMjAtMDMtMDUiIGNsYXNzPSJtb2JpbGUtcHViLXRpdGxlIiBpZD0icHViLXRpdGxlLWxpbmstc20tMTYiPlJlY29tbWVuZGF0aW9uIGZvciBDcnlwdG9ncmFwaGljIEtleSBHZW5lcmF0aW9uPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmcgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtc20tMTYiPjMvMDUvMjAyMDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tMTYiPkRyYWZ0IChPYnNvbGV0ZSk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZG93bmxvYWQtdmFsdWVzLTE2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTE2LTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjYwMjgvTklTVC5TUC44MDAtMTMzcjItZHJhZnQiPlNQIDgwMC0xMzMgUmV2LiAyIChEcmFmdCkgKERPSSk8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTYtMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL252bHB1YnMubmlzdC5nb3YvbmlzdHB1YnMvU3BlY2lhbFB1YmxpY2F0aW9ucy9OSVNULlNQLjgwMC0xMzNyMi1kcmFmdC5wZGYiPkxvY2FsIERvd25sb2FkPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTE2LTInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL0NTUkMvbWVkaWEvUHVibGljYXRpb25zL3NwLzgwMC0xMzMvcmV2LTIvZHJhZnQvc3A4MDAtMTMzcjItZHJhZnQtY29tbWVudHMtcmVjZWl2ZWQucGRmIj5Db21tZW50cyByZWNlaXZlZDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc3RhdHVzLTE2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIERyYWZ0IChPYnNvbGV0ZSkNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItcmVsZWFzZS1kYXRlLTE2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDMvMDUvMjAyMA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyIGlkPSJyZXN1bHQtMTciPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zZXJpZXMtMTciPlNQPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItbnVtYmVyLTE3Ij4gODAwLTE3MSBSZXYuIDI8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMTcxL3Jldi0yL2FyY2hpdmUvMjAyMC0wMi0yMSIgaWQ9InB1Yi10aXRsZS1saW5rLTE3Ij5Qcm90ZWN0aW5nIENvbnRyb2xsZWQgVW5jbGFzc2lmaWVkIEluZm9ybWF0aW9uIGluIE5vbmZlZGVyYWwgU3lzdGVtcyBhbmQgT3JnYW5pemF0aW9uczwvYT48L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHViLWZ1bGwtZGlzcGxheS1zbS0xNyI+U1AgODAwLTE3MSBSZXYuIDIgKFdpdGhkcmF3bik8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzgwMC0xNzEvcmV2LTIvYXJjaGl2ZS8yMDIwLTAyLTIxIiBjbGFzcz0ibW9iaWxlLXB1Yi10aXRsZSIgaWQ9InB1Yi10aXRsZS1saW5rLXNtLTE3Ij5Qcm90ZWN0aW5nIENvbnRyb2xsZWQgVW5jbGFzc2lmaWVkIEluZm9ybWF0aW9uIGluIE5vbmZlZGVyYWwgU3lzdGVtcyBhbmQgT3JnYW5pemF0aW9uczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGlkPSJwdWItcmVsZWFzZS1kYXRlLXNtLTE3Ij4yLzIxLzIwMjA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0dXM6IDxzcGFuIGlkPSJwdWItc3RhdHVzLXNtLTE3Ij5XaXRoZHJhd248L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkOiA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWVzLTE3Jz5Ob25lIGF2YWlsYWJsZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zdGF0dXMtMTciPg0KICAgICAgICAgICAgICAgICAgICAgICAgV2l0aGRyYXduDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXJlbGVhc2UtZGF0ZS0xNyI+DQogICAgICAgICAgICAgICAgICAgICAgICAyLzIxLzIwMjANCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0ciBpZD0icmVzdWx0LTE4Ij4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc2VyaWVzLTE4Ij5TUDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLW51bWJlci0xOCI+IDgwMC0yMDc8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMjA3L2FyY2hpdmUvMjAyMC0wMi0xMyIgaWQ9InB1Yi10aXRsZS1saW5rLTE4Ij5aZXJvIFRydXN0IEFyY2hpdGVjdHVyZSAoMm5kIERyYWZ0KTwvYT48L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHViLWZ1bGwtZGlzcGxheS1zbS0xOCI+U1AgODAwLTIwNyAoRHJhZnQpPC9zcGFuPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMjA3L2FyY2hpdmUvMjAyMC0wMi0xMyIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS0xOCI+WmVybyBUcnVzdCBBcmNoaXRlY3R1cmUgKDJuZCBEcmFmdCk8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBpZD0icHViLXJlbGVhc2UtZGF0ZS1zbS0xOCI+Mi8xMy8yMDIwPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzOiA8c3BhbiBpZD0icHViLXN0YXR1cy1zbS0xOCI+RHJhZnQgKE9ic29sZXRlKTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLXZhbHVlLW5vLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJkb3dubG9hZC12YWx1ZXMtMTgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTgtMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RvaS5vcmcvMTAuNjAyOC9OSVNULlNQLjgwMC0yMDctZHJhZnQyIj5TUCA4MDAtMjA3IChEcmFmdCkgKERPSSk8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTgtMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL252bHB1YnMubmlzdC5nb3YvbmlzdHB1YnMvU3BlY2lhbFB1YmxpY2F0aW9ucy9OSVNULlNQLjgwMC0yMDctZHJhZnQyLnBkZiI+TG9jYWwgRG93bmxvYWQ8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMTgtMic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvQ1NSQy9tZWRpYS9QdWJsaWNhdGlvbnMvc3AvODAwLTIwNy9kcmFmdC9kb2N1bWVudHMvc3A4MDAtMjA3LWRyYWZ0Mi1jb21tZW50LXRlbXBsYXRlLnhsc3giPkNvbW1lbnQgdGVtcGxhdGU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXN0YXR1cy0xOCI+DQogICAgICAgICAgICAgICAgICAgICAgICBEcmFmdCAoT2Jzb2xldGUpDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXJlbGVhc2UtZGF0ZS0xOCI+DQogICAgICAgICAgICAgICAgICAgICAgICAyLzEzLzIwMjANCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0ciBpZD0icmVzdWx0LTE5Ij4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc2VyaWVzLTE5Ij5TUDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLW51bWJlci0xOSI+IDE4MDAtMjU8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC8xODAwLTI1L2FyY2hpdmUvMjAyMC0wMS0yNyIgaWQ9InB1Yi10aXRsZS1saW5rLTE5Ij5EYXRhIEludGVncml0eTogSWRlbnRpZnlpbmcgYW5kIFByb3RlY3RpbmcgQXNzZXRzIEFnYWluc3QgUmFuc29td2FyZSBhbmQgT3RoZXIgRGVzdHJ1Y3RpdmUgRXZlbnRzPC9hPjwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJwdWItZnVsbC1kaXNwbGF5LXNtLTE5Ij5TUCAxODAwLTI1IChEcmFmdCk8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzE4MDAtMjUvYXJjaGl2ZS8yMDIwLTAxLTI3IiBjbGFzcz0ibW9iaWxlLXB1Yi10aXRsZSIgaWQ9InB1Yi10aXRsZS1saW5rLXNtLTE5Ij5EYXRhIEludGVncml0eTogSWRlbnRpZnlpbmcgYW5kIFByb3RlY3RpbmcgQXNzZXRzIEFnYWluc3QgUmFuc29td2FyZSBhbmQgT3RoZXIgRGVzdHJ1Y3RpdmUgRXZlbnRzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmcgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtc20tMTkiPjEvMjcvMjAyMDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tMTkiPkRyYWZ0IChPYnNvbGV0ZSk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZG93bmxvYWQtdmFsdWVzLTE5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTE5LTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmNjb2UubmlzdC5nb3Yvc2l0ZXMvZGVmYXVsdC9maWxlcy9saWJyYXJ5L3NwMTgwMC9kaS1pZGVudGl0eS1wcm90ZWN0LW5pc3Qtc3AxODAwLTI1LWRyYWZ0LnBkZiI+RHJhZnQgU1AgMTgwMC0yNTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0xOS0xJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5jY29lLm5pc3QuZ292L3Byb2plY3RzL2J1aWxkaW5nLWJsb2Nrcy9kYXRhLWludGVncml0eS9pZGVudGlmeS1wcm90ZWN0Ij5Qcm9qZWN0IEhvbWVwYWdlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zdGF0dXMtMTkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgRHJhZnQgKE9ic29sZXRlKQ0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtMTkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgMS8yNy8yMDIwDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHIgaWQ9InJlc3VsdC0yMCI+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXNlcmllcy0yMCI+U1A8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1udW1iZXItMjAiPiAxODAwLTI2PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvMTgwMC0yNi9hcmNoaXZlLzIwMjAtMDEtMjciIGlkPSJwdWItdGl0bGUtbGluay0yMCI+RGF0YSBJbnRlZ3JpdHk6IERldGVjdGluZyBhbmQgUmVzcG9uZGluZyB0byBSYW5zb213YXJlIGFuZCBPdGhlciBEZXN0cnVjdGl2ZSBFdmVudHM8L2E+PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InB1Yi1mdWxsLWRpc3BsYXktc20tMjAiPlNQIDE4MDAtMjYgKERyYWZ0KTwvc3Bhbj48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvMTgwMC0yNi9hcmNoaXZlLzIwMjAtMDEtMjciIGNsYXNzPSJtb2JpbGUtcHViLXRpdGxlIiBpZD0icHViLXRpdGxlLWxpbmstc20tMjAiPkRhdGEgSW50ZWdyaXR5OiBEZXRlY3RpbmcgYW5kIFJlc3BvbmRpbmcgdG8gUmFuc29td2FyZSBhbmQgT3RoZXIgRGVzdHJ1Y3RpdmUgRXZlbnRzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmcgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtc20tMjAiPjEvMjcvMjAyMDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tMjAiPkRyYWZ0IChPYnNvbGV0ZSk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZG93bmxvYWQtdmFsdWVzLTIwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTIwLTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmNjb2UubmlzdC5nb3Yvc2l0ZXMvZGVmYXVsdC9maWxlcy9saWJyYXJ5L3NwMTgwMC9kaS1kZXRlY3QtcmVzcG9uZC1uaXN0LXNwMTgwMC0yNi1kcmFmdC5wZGYiPkRyYWZ0IFNQIDE4MDAtMjY8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMjAtMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5uY2NvZS5uaXN0Lmdvdi9wcm9qZWN0cy9idWlsZGluZy1ibG9ja3MvZGF0YS1pbnRlZ3JpdHkvZGV0ZWN0LXJlc3BvbmQiPlByb2plY3QgSG9tZXBhZ2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXN0YXR1cy0yMCI+DQogICAgICAgICAgICAgICAgICAgICAgICBEcmFmdCAoT2Jzb2xldGUpDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXJlbGVhc2UtZGF0ZS0yMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAxLzI3LzIwMjANCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgIDx0ciBpZD0icmVzdWx0LTIxIj4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc2VyaWVzLTIxIj5TUDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLW51bWJlci0yMSI+IDgwMC0yMDRBPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvODAwLTIwNGEvYXJjaGl2ZS8yMDIwLTAxLTE3IiBpZD0icHViLXRpdGxlLWxpbmstMjEiPkJ1aWxkaW5nIFNlY3VyZSBNaWNyb3NlcnZpY2VzLWJhc2VkIEFwcGxpY2F0aW9ucyBVc2luZyBTZXJ2aWNlLU1lc2ggQXJjaGl0ZWN0dXJlPC9hPjwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJwdWItZnVsbC1kaXNwbGF5LXNtLTIxIj5TUCA4MDAtMjA0QSAoRHJhZnQpPC9zcGFuPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMjA0YS9hcmNoaXZlLzIwMjAtMDEtMTciIGNsYXNzPSJtb2JpbGUtcHViLXRpdGxlIiBpZD0icHViLXRpdGxlLWxpbmstc20tMjEiPkJ1aWxkaW5nIFNlY3VyZSBNaWNyb3NlcnZpY2VzLWJhc2VkIEFwcGxpY2F0aW9ucyBVc2luZyBTZXJ2aWNlLU1lc2ggQXJjaGl0ZWN0dXJlPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmcgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtc20tMjEiPjEvMTcvMjAyMDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tMjEiPkRyYWZ0IChPYnNvbGV0ZSk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZG93bmxvYWQtdmFsdWVzLTIxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTIxLTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjYwMjgvTklTVC5TUC44MDAtMjA0QS1kcmFmdCI+U1AgODAwLTIwNEEgKERyYWZ0KSAoRE9JKTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0yMS0xJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9TcGVjaWFsUHVibGljYXRpb25zL05JU1QuU1AuODAwLTIwNEEtZHJhZnQucGRmIj5Mb2NhbCBEb3dubG9hZDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc3RhdHVzLTIxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIERyYWZ0IChPYnNvbGV0ZSkNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItcmVsZWFzZS1kYXRlLTIxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDEvMTcvMjAyMA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyIGlkPSJyZXN1bHQtMjIiPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zZXJpZXMtMjIiPlNQPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItbnVtYmVyLTIyIj4gODAwLTEzN0E8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz48YSBocmVmPSIvcHVibGljYXRpb25zL2RldGFpbC9zcC84MDAtMTM3YS9hcmNoaXZlLzIwMjAtMDEtMTMiIGlkPSJwdWItdGl0bGUtbGluay0yMiI+QXNzZXNzaW5nIEluZm9ybWF0aW9uIFNlY3VyaXR5IENvbnRpbnVvdXMgTW9uaXRvcmluZyAoSVNDTSkgUHJvZ3JhbXM6IERldmVsb3BpbmcgYW4gSVNDTSBQcm9ncmFtIEFzc2Vzc21lbnQ8L2E+PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InB1Yi1mdWxsLWRpc3BsYXktc20tMjIiPlNQIDgwMC0xMzdBIChEcmFmdCk8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzgwMC0xMzdhL2FyY2hpdmUvMjAyMC0wMS0xMyIgY2xhc3M9Im1vYmlsZS1wdWItdGl0bGUiIGlkPSJwdWItdGl0bGUtbGluay1zbS0yMiI+QXNzZXNzaW5nIEluZm9ybWF0aW9uIFNlY3VyaXR5IENvbnRpbnVvdXMgTW9uaXRvcmluZyAoSVNDTSkgUHJvZ3JhbXM6IERldmVsb3BpbmcgYW4gSVNDTSBQcm9ncmFtIEFzc2Vzc21lbnQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBpZD0icHViLXJlbGVhc2UtZGF0ZS1zbS0yMiI+MS8xMy8yMDIwPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzOiA8c3BhbiBpZD0icHViLXN0YXR1cy1zbS0yMiI+RHJhZnQgKE9ic29sZXRlKTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLXZhbHVlLW5vLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJkb3dubG9hZC12YWx1ZXMtMjIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMjItMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RvaS5vcmcvMTAuNjAyOC9OSVNULlNQLjgwMC0xMzdBLWRyYWZ0Ij5TUCA4MDAtMTM3QSAoRHJhZnQpIChET0kpPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTIyLTEnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9udmxwdWJzLm5pc3QuZ292L25pc3RwdWJzL1NwZWNpYWxQdWJsaWNhdGlvbnMvTklTVC5TUC44MDAtMTM3QS1kcmFmdC5wZGYiPkxvY2FsIERvd25sb2FkPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTIyLTInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL0NTUkMvbWVkaWEvUHVibGljYXRpb25zL3NwLzgwMC0xMzdhL2RyYWZ0L2RvY3VtZW50cy9kcmFmdC1zcDgwMC0xMzdhLWVsZW1lbnQtY2F0YWxvZy54bHN4Ij5FbGVtZW50IENhdGFsb2cgZm9yIERyYWZ0IFNQIDgwMC0xMzdBPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTIyLTMnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL0NTUkMvbWVkaWEvUHVibGljYXRpb25zL3NwLzgwMC0xMzdhL2RyYWZ0L2RvY3VtZW50cy9zcDgwMC0xMzdhLWRyYWZ0LWNvbW1lbnQtdGVtcGxhdGUueGxzeCI+Q29tbWVudCB0ZW1wbGF0ZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItc3RhdHVzLTIyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIERyYWZ0IChPYnNvbGV0ZSkNCiAgICAgICAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItcmVsZWFzZS1kYXRlLTIyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDEvMTMvMjAyMA0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyIGlkPSJyZXN1bHQtMjMiPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zZXJpZXMtMjMiPlNQPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItbnVtYmVyLTIzIj4gODAwLTIwODwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzgwMC0yMDgvYXJjaGl2ZS8yMDE5LTEyLTExIiBpZD0icHViLXRpdGxlLWxpbmstMjMiPlJlY29tbWVuZGF0aW9uIGZvciBTdGF0ZWZ1bCBIYXNoLUJhc2VkIFNpZ25hdHVyZSBTY2hlbWVzPC9hPjwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJwdWItZnVsbC1kaXNwbGF5LXNtLTIzIj5TUCA4MDAtMjA4IChEcmFmdCk8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzgwMC0yMDgvYXJjaGl2ZS8yMDE5LTEyLTExIiBjbGFzcz0ibW9iaWxlLXB1Yi10aXRsZSIgaWQ9InB1Yi10aXRsZS1saW5rLXNtLTIzIj5SZWNvbW1lbmRhdGlvbiBmb3IgU3RhdGVmdWwgSGFzaC1CYXNlZCBTaWduYXR1cmUgU2NoZW1lczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGlkPSJwdWItcmVsZWFzZS1kYXRlLXNtLTIzIj4xMi8xMS8yMDE5PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzOiA8c3BhbiBpZD0icHViLXN0YXR1cy1zbS0yMyI+RHJhZnQgKE9ic29sZXRlKTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250cm9sLXZhbHVlLW5vLWJsb2NrIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJkb3dubG9hZC12YWx1ZXMtMjMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMjMtMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RvaS5vcmcvMTAuNjAyOC9OSVNULlNQLjgwMC0yMDgtZHJhZnQiPlNQIDgwMC0yMDggKERyYWZ0KSAoRE9JKTwvYT47IA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdkb3dubG9hZC12YWx1ZS0yMy0xJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9TcGVjaWFsUHVibGljYXRpb25zL05JU1QuU1AuODAwLTIwOC1kcmFmdC5wZGYiPkxvY2FsIERvd25sb2FkPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTIzLTInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL0NTUkMvbWVkaWEvUHVibGljYXRpb25zL3NwLzgwMC0yMDgvZHJhZnQvZG9jdW1lbnRzL3NwODAwLTIwOC1kcmFmdC1jb21tZW50cy1yZWNlaXZlZC5wZGYiPkNvbW1lbnRzIHJlY2VpdmVkPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zdGF0dXMtMjMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgRHJhZnQgKE9ic29sZXRlKQ0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtMjMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgMTIvMTEvMjAxOQ0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgPHRyIGlkPSJyZXN1bHQtMjQiPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zZXJpZXMtMjQiPlNQPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiIGlkPSJwdWItbnVtYmVyLTI0Ij4gMTgwMC0xNTwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzE4MDAtMTUvYXJjaGl2ZS8yMDE5LTExLTIxIiBpZD0icHViLXRpdGxlLWxpbmstMjQiPlNlY3VyaW5nIFNtYWxsIEJ1c2luZXNzIGFuZCBIb21lIEludGVybmV0IG9mIFRoaW5ncyAoSW9UKSBEZXZpY2VzOiBNaXRpZ2F0aW5nIE5ldHdvcmstQmFzZWQgQXR0YWNrcyBVc2luZyBNYW51ZmFjdHVyZXIgVXNhZ2UgRGVzY3JpcHRpb24gKE1VRCk8L2E+PC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InB1Yi1mdWxsLWRpc3BsYXktc20tMjQiPlNQIDE4MDAtMTUgKERyYWZ0KTwvc3Bhbj48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvMTgwMC0xNS9hcmNoaXZlLzIwMTktMTEtMjEiIGNsYXNzPSJtb2JpbGUtcHViLXRpdGxlIiBpZD0icHViLXRpdGxlLWxpbmstc20tMjQiPlNlY3VyaW5nIFNtYWxsIEJ1c2luZXNzIGFuZCBIb21lIEludGVybmV0IG9mIFRoaW5ncyAoSW9UKSBEZXZpY2VzOiBNaXRpZ2F0aW5nIE5ldHdvcmstQmFzZWQgQXR0YWNrcyBVc2luZyBNYW51ZmFjdHVyZXIgVXNhZ2UgRGVzY3JpcHRpb24gKE1VRCk8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBpZD0icHViLXJlbGVhc2UtZGF0ZS1zbS0yNCI+MTEvMjEvMjAxOTwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tMjQiPkRyYWZ0IChPYnNvbGV0ZSk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZG93bmxvYWQtdmFsdWVzLTI0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTI0LTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmNjb2UubmlzdC5nb3Yvc2l0ZXMvZGVmYXVsdC9maWxlcy9saWJyYXJ5L3NwMTgwMC9pb3QtZGRvcy1uaXN0LXNwMTgwMC0xNS1wcmVsaW1pbmFyeS1kcmFmdC12Mi5wZGYiPlNQIDE4MDAtMTUgKDJuZCBQcmVsaW1pbmFyeSBEcmFmdCk8L2E+OyANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0nZG93bmxvYWQtdmFsdWUtMjQtMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5uY2NvZS5uaXN0Lmdvdi93ZWJmb3JtL2NvbW1lbnRzLXNwLTE4MDAtMTUtc2VjdXJpbmctc21hbGwtYnVzaW5lc3MtYW5kLWhvbWUtaW50ZXJuZXQtdGhpbmdzLWlvdC1kZXZpY2VzLW1pdGlnYXRpbmciPlN1Ym1pdCBDb21tZW50cyBvbiBTUCAxODAwLTE1PC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTI0LTInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmNjb2UubmlzdC5nb3YvcHJvamVjdHMvYnVpbGRpbmctYmxvY2tzL21pdGlnYXRpbmctaW90LWJhc2VkLWRkb3MiPlByb2plY3QgSG9tZXBhZ2U8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXN0YXR1cy0yNCI+DQogICAgICAgICAgICAgICAgICAgICAgICBEcmFmdCAoT2Jzb2xldGUpDQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXJlbGVhc2UtZGF0ZS0yNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAxMS8yMS8yMDE5DQogICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICA8dHIgaWQ9InJlc3VsdC0yNSI+DQogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGlkZGVuLXNtIGhpZGRlbi14cyBoaWRkZW4teHhzIiBpZD0icHViLXNlcmllcy0yNSI+U1A8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1udW1iZXItMjUiPiA4MDAtMTg5PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgPHRkPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoaWRkZW4tc20gaGlkZGVuLXhzIGhpZGRlbi14eHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9kZXRhaWwvc3AvODAwLTE4OS9hcmNoaXZlLzIwMTktMTAtMTciIGlkPSJwdWItdGl0bGUtbGluay0yNSI+UmVzaWxpZW50IEludGVyZG9tYWluIFRyYWZmaWMgRXhjaGFuZ2U6IEJHUCBTZWN1cml0eSBhbmQgRERvUyBNaXRpZ2F0aW9uICgybmQgRHJhZnQpPC9hPjwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhpZGRlbi1tZCBoaWRkZW4tbGciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJwdWItZnVsbC1kaXNwbGF5LXNtLTI1Ij5TUCA4MDAtMTg5IChEcmFmdCk8L3NwYW4+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZGV0YWlsL3NwLzgwMC0xODkvYXJjaGl2ZS8yMDE5LTEwLTE3IiBjbGFzcz0ibW9iaWxlLXB1Yi10aXRsZSIgaWQ9InB1Yi10aXRsZS1saW5rLXNtLTI1Ij5SZXNpbGllbnQgSW50ZXJkb21haW4gVHJhZmZpYyBFeGNoYW5nZTogQkdQIFNlY3VyaXR5IGFuZCBERG9TIE1pdGlnYXRpb24gKDJuZCBEcmFmdCk8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBpZD0icHViLXJlbGVhc2UtZGF0ZS1zbS0yNSI+MTAvMTcvMjAxOTwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czogPHNwYW4gaWQ9InB1Yi1zdGF0dXMtc20tMjUiPkRyYWZ0IChPYnNvbGV0ZSk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbC12YWx1ZS1uby1ibG9jayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG93bmxvYWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZG93bmxvYWQtdmFsdWVzLTI1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTI1LTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9kb2kub3JnLzEwLjYwMjgvTklTVC5TUC44MDAtMTg5LWRyYWZ0MiI+U1AgODAwLTE4OSAoRHJhZnQpIChET0kpPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTI1LTEnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9udmxwdWJzLm5pc3QuZ292L25pc3RwdWJzL1NwZWNpYWxQdWJsaWNhdGlvbnMvTklTVC5TUC44MDAtMTg5LWRyYWZ0Mi5wZGYiPkxvY2FsIERvd25sb2FkPC9hPjsgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J2Rvd25sb2FkLXZhbHVlLTI1LTInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL0NTUkMvbWVkaWEvUHVibGljYXRpb25zL3NwLzgwMC0xODkvZHJhZnQvZG9jdW1lbnRzL05JU1QuU1AuODAwLTE4OS1kcmFmdDItY29tbWVudHMtcmVzcG9uc2VzLnBkZiI+Q29tbWVudHMgYW5kIHJlc3BvbnNlcyBmb3IgU2Vjb25kIFB1YmxpYyBEcmFmdCBTUCA4MDAtMTg5IChPY3QuIDIwMTkpPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1zdGF0dXMtMjUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgRHJhZnQgKE9ic29sZXRlKQ0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhpZGRlbi1zbSBoaWRkZW4teHMgaGlkZGVuLXh4cyIgaWQ9InB1Yi1yZWxlYXNlLWRhdGUtMjUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgMTAvMTcvMjAxOQ0KICAgICAgICAgICAgICAgICAgICA8L3RkPg0KICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgIDwvdGJvZHk+DQogICAgPC90YWJsZT4NCiAgICAgICAgPGRpdiBjbGFzcz0icm93IGJvdHRvbS1wYWdpbmF0aW9uLWFyZWEiPg0KICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtY2VudGVyIj4NCiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ncGFnaW5hdGlvbi1saW5rcycgaWQ9J2JvdHRvbS1wYWdpbmF0aW9uLWNvbnRhaW5lcicgZGF0YS10b3RhbC1wYWdlcz0nNDYnIGRhdGEtbWluLXBhZ2U9JzEnIGRhdGEtbWF4LXBhZ2U9JzEwJyBkYXRhLWN1cnJlbnQtcGFnZT0nMScgZGF0YS1zaG93LWZpcnN0PSdGYWxzZScgZGF0YS1zaG93LWxhc3Q9J1RydWUnPjxzdHJvbmcgYXJpYS1sYWJlbD0iUGFnZSAxIiBpZD0iYm90dG9tLXBhZ2UtMSI+MTwvc3Ryb25nPiAmbmJzcDsmbmJzcDsmbmJzcDsgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT0yIiBhcmlhLWxhYmVsPSJQYWdlIDIiIGlkPSJib3R0b20tcGFnZS0yIj4yPC9hPiAmbmJzcDsmbmJzcDsmbmJzcDsgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT0zIiBhcmlhLWxhYmVsPSJQYWdlIDMiIGlkPSJib3R0b20tcGFnZS0zIj4zPC9hPiAmbmJzcDsmbmJzcDsmbmJzcDsgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT00IiBhcmlhLWxhYmVsPSJQYWdlIDQiIGlkPSJib3R0b20tcGFnZS00Ij40PC9hPiAmbmJzcDsmbmJzcDsmbmJzcDsgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT01IiBhcmlhLWxhYmVsPSJQYWdlIDUiIGlkPSJib3R0b20tcGFnZS01Ij41PC9hPiAmbmJzcDsmbmJzcDsmbmJzcDsgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT02IiBhcmlhLWxhYmVsPSJQYWdlIDYiIGlkPSJib3R0b20tcGFnZS02Ij42PC9hPiAmbmJzcDsmbmJzcDsmbmJzcDsgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT03IiBhcmlhLWxhYmVsPSJQYWdlIDciIGlkPSJib3R0b20tcGFnZS03Ij43PC9hPiAmbmJzcDsmbmJzcDsmbmJzcDsgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT04IiBhcmlhLWxhYmVsPSJQYWdlIDgiIGlkPSJib3R0b20tcGFnZS04Ij44PC9hPiAmbmJzcDsmbmJzcDsmbmJzcDsgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT05IiBhcmlhLWxhYmVsPSJQYWdlIDkiIGlkPSJib3R0b20tcGFnZS05Ij45PC9hPiAmbmJzcDsmbmJzcDsmbmJzcDsgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT0xMCIgYXJpYS1sYWJlbD0iUGFnZSAxMCIgaWQ9ImJvdHRvbS1wYWdlLTEwIj4xMDwvYT4mbmJzcDsmbmJzcDs8YSBocmVmPSIvcHVibGljYXRpb25zL3NlYXJjaD9rZXl3b3Jkcy1sZz1TUCsyMjIyJnNvcnRCeS1sZz1yZWxldmVuY2Umc3RhdHVzLWxnPUZpbmFsJTJjV2l0aGRyYXduJnBhZ2U9MiIgYXJpYS1sYWJlbD0iTmV4dCBQYWdlIiBpZD0iYm90dG9tLXBhZ2UtbmV4dCI+bmV4dCAmZ3Q7PC9hPiZuYnNwOyZuYnNwOzxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoP2tleXdvcmRzLWxnPVNQKzIyMjImc29ydEJ5LWxnPXJlbGV2ZW5jZSZzdGF0dXMtbGc9RmluYWwlMmNXaXRoZHJhd24mcGFnZT00NiIgYXJpYS1sYWJlbD0iTGFzdCBQYWdlIiBpZD0iYm90dG9tLXBhZ2UtbGFzdCIgZGF0YS1sYXN0LXBhZ2UtbnVtYmVyPSI0NiI+bGFzdCAmZ3Q7Jmd0OzwvYT48L3NwYW4+DQogICAgICAgICAgICA8L3A+DQogICAgICAgIDwvZGl2Pg0KPGRpdj4NCiAgICA8c3BhbiBjbGFzcz0icHVsbC1yaWdodCI+DQogICAgICAgIDxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc2VhcmNoIiBpZD0idmlldy1hbGwtcHVicy1saW5rIj5WaWV3IEFsbCBQdWJsaWNhdGlvbnM8L2E+DQogICAgPC9zcGFuPg0KPC9kaXY+DQoNCg0KICAgIDxkaXYgaWQ9InB1YmxpY2F0aW9ucy1xdWlja2xpbmtzLXNtIiBjbGFzcz0iYnMtY2FsbG91dCBicy1jYWxsb3V0LXN1Ym5hdiBoaWRkZW4tbWQgaGlkZGVuLWxnIj4NCiAgICAgICAgPGg0PkN1cnJlbnQgUHVibGljYXRpb25zIDxpIGNsYXNzPSJmYSBmYS1ib2x0Ij48L2k+PC9oND4NCiAgICAgICAgPHVsPg0KICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgIDxzdHJvbmc+DQogICAgICAgICAgICAgICAgICAgIE5JU1QgU2VyaWVzIFB1YnMgPGkgY2xhc3M9ImZhIGZhLWluZm8tY2lyY2xlIiBhcmlhLWhpZGRlbj0idHJ1ZSIgZGF0YS1wbGFjZW1lbnQ9InJpZ2h0IiBkYXRhLWh0bWw9InRydWUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b29sdGlwLXRvZ2dsZT0idG9vbHRpcFdpdGhGdW5jdGlvbiIgZGF0YS10aXRsZS1jb250YWluZXI9Im5pc3Qtc2VyaWVzLXB1YnMtdG9vbHRpcCI+PC9pPg0KICAgICAgICAgICAgICAgIDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZmluYWwtcHVicyIgaWQ9InF1aWNrLWxpbmstZmluYWwtc20iPkZpbmFsIFB1YnM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZHJhZnRzLW9wZW4tZm9yLWNvbW1lbnQiIGlkPSJxdWljay1saW5rcy1jb21tZW50cy1zbSI+RHJhZnRzIE9wZW4gZm9yIENvbW1lbnQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvZHJhZnQtcHVicyIgaWQ9InF1aWNrLWxpbmstZHJhZnQtc20iPkFsbCBQdWJsaWMgRHJhZnRzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBCeSBTZXJpZXMgPGkgY2xhc3M9ImZhIGZhLWluZm8tY2lyY2xlIiBhcmlhLWhpZGRlbj0idHJ1ZSIgZGF0YS1wbGFjZW1lbnQ9InJpZ2h0IiBkYXRhLWh0bWw9InRydWUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b29sdGlwLXRvZ2dsZT0idG9vbHRpcFdpdGhGdW5jdGlvbiIgZGF0YS10aXRsZS1jb250YWluZXI9Im5pc3Qtdmlldy1zZXJpZXMtcHVicy10b29sdGlwIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9maXBzIiBpZD0icXVpY2stbGluay1maXBzLXNtIj5GSVBTPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvc3A4MDAiIGlkPSJxdWljay1saW5rLXNwLTgwMC1zbSI+U1AgODAwIHNlcmllczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHVibGljYXRpb25zL3NwIiBpZD0icXVpY2stbGluay1zcC1zbSI+QWxsIFNQIHNlcmllczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHVibGljYXRpb25zL25pc3RpciIgaWQ9InF1aWNrLWxpbmstbmlzdGlyLXNtIj5OSVNUSVJzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvaXRsLWJ1bGxldGluIiBpZD0icXVpY2stbGluay1pdGwtYnVsLXNtIj5JVEwgQnVsbGV0aW5zPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgIDxzdHJvbmc+DQogICAgICAgICAgICAgICAgICAgIE90aGVyIFB1YnMgPGkgY2xhc3M9ImZhIGZhLWluZm8tY2lyY2xlIiBhcmlhLWhpZGRlbj0idHJ1ZSIgZGF0YS1wbGFjZW1lbnQ9InJpZ2h0IiBkYXRhLWh0bWw9InRydWUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b29sdGlwLXRvZ2dsZT0idG9vbHRpcFdpdGhGdW5jdGlvbiIgZGF0YS10aXRsZS1jb250YWluZXI9Im5pc3Qtb3RoZXItcHVicy10b29sdGlwIj48L2k+DQogICAgICAgICAgICAgICAgPC9zdHJvbmc+DQogICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy93aGl0ZS1wYXBlciIgaWQ9InF1aWNrLWxpbmstd2hpdGUtcGFwZXJzLXNtIj5XaGl0ZSBQYXBlcnM8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wdWJsaWNhdGlvbnMvam91cm5hbC1hcnRpY2xlIiBpZD0icXVpY2stbGluay1qb3VybmFsLWFydGljbGVzLXNtIj5Kb3VybmFsIEFydGljbGVzPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHVibGljYXRpb25zL2NvbmZlcmVuY2UtcGFwZXIiIGlkPSJxdWljay1saW5rLWNvbmZlcmVuY2UtcGFwZXJzLXNtIj5Db25mZXJlbmNlIFBhcGVyczwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3B1YmxpY2F0aW9ucy9ib29rIiBpZD0icXVpY2stbGluay1ib29rcy1zbSI+Qm9va3M8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgPC9saT4NCiAgICAgICAgPC91bD4NCiAgICAgICAgPHNwYW4gc3R5bGU9ImRpc3BsYXk6IG5vbmU7IiBpZD0ibmlzdC1zZXJpZXMtcHVicy10b29sdGlwIj4NCiAgICAgICAgICAgIDxzdHJvbmc+RmluYWw6PC9zdHJvbmc+IDxlbT5DdXJyZW50IGxpc3Qgb2YgYWxsIHB1Ymxpc2hlZCBOSVNUIGN5YmVyc2VjdXJpdHkgZG9jdW1lbnRzLjwvZW0+DQogICAgICAgICAgICBEb2VzIG5vdCBpbmNsdWRlICJXaXRoZHJhd24iIGRvY3VtZW50cy4gSW5jbHVkZXMgRklQUywgU3BlY2lhbCBQdWJsaWNhdGlvbnMsIE5JU1RJUnMsIElUTCBCdWxsZXRpbnMsIGFuZCBOSVNUIEN5YmVyc2VjdXJpdHkgV2hpdGUgUGFwZXJzLjxiciAvPg0KICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICA8c3Ryb25nPlB1YmxpYyBEcmFmdHM6PC9zdHJvbmc+IDxlbT5DdXJyZW50IGxpc3Qgb2YgYWxsIGRyYWZ0IE5JU1QgY3liZXJzZWN1cml0eSBkb2N1bWVudHMtLXRoZXkgYXJlIHR5cGljYWxseSBwb3N0ZWQgZm9yIHB1YmxpYyBjb21tZW50LjwvZW0+DQogICAgICAgICAgICAiQ3VycmVudCIgcHVibGljIGRyYWZ0cyBhcmUgdGhlIGxhdGVzdCBkcmFmdCB2ZXJzaW9ucyB0aGF0IGhhdmUgbm90IHlldCBiZWVuIHB1Ymxpc2hlZCBhcyAiRmluYWwuIg0KICAgICAgICA8L3NwYW4+DQogICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBub25lOyIgaWQ9Im5pc3Qtdmlldy1zZXJpZXMtcHVicy10b29sdGlwIj4NCiAgICAgICAgICAgIDxzdHJvbmc+RklQUzo8L3N0cm9uZz4gPGVtPkN1cnJlbnQgRmVkZXJhbCBJbmZvcm1hdGlvbiBQcm9jZXNzaW5nIFN0YW5kYXJkIFB1YmxpY2F0aW9ucyAoRklQUykuPC9lbT4gSW5jbHVkZXMgY3VycmVudCAoRmluYWwgYW5kIERyYWZ0KSBGSVBTLjxiciAvPg0KICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICA8c3Ryb25nPlNQIDgwMCBTZXJpZXM6PC9zdHJvbmc+IDxlbT5DdXJyZW50IE5JU1QgU3BlY2lhbCBQdWJsaWNhdGlvbiAoU1ApIDgwMCBzZXJpZXMgcHVibGljYXRpb25zLCB3aGljaCBmb2N1cyBvbiBDb21wdXRlci9JbmZvcm1hdGlvbiBTZWN1cml0eS48L2VtPg0KICAgICAgICAgICAgSW5jbHVkZXMgY3VycmVudCAoRmluYWwgYW5kIERyYWZ0KSBTUCA4MDAgcHVicy48YnIgLz4NCiAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgPHN0cm9uZz5BbGwgU1AgU2VyaWVzOjwvc3Ryb25nPiA8ZW0+DQogICAgICAgICAgICAgICAgQ3VycmVudCBOSVNUIFNwZWNpYWwgUHVibGljYXRpb25zIChTUCksIGluY2x1ZGluZyBTUCA4MDAgKENvbXB1dGVyL0luZm9ybWF0aW9uIFNlY3VyaXR5KSBhbmQgU1AgMTgwMA0KICAgICAgICAgICAgICAgIChDeWJlcnNlY3VyaXR5IFByYWN0aWNlIEd1aWRlcykgcHVicy4gQWxzbyBpbmNsdWRlcyBTUCA1MDAgKENvbXB1dGVyIFN5c3RlbXMgVGVjaG5vbG9neSkgcHVicyByZWxhdGVkIHRvIGN5YmVyc2VjdXJpdHkgYW5kIHByaXZhY3kuDQogICAgICAgICAgICA8L2VtPg0KICAgICAgICAgICAgSW5jbHVkZXMgY3VycmVudCAoRmluYWwgYW5kIERyYWZ0KSBOSVNUIFNwZWNpYWwgUHVibGljYXRpb25zLjxiciAvPg0KICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICA8c3Ryb25nPk5JU1RJUnM6PC9zdHJvbmc+IDxlbT5DdXJyZW50IGxpc3Qgb2YgTklTVCBJbnRlcmFnZW5jeSBvciBJbnRlcm5hbCBSZXBvcnRzIChOSVNUSVIpIHJlbGF0ZWQgdG8gY3liZXJzZWN1cml0eSBhbmQgcHJpdmFjeS48L2VtPg0KICAgICAgICAgICAgSW5jbHVkZXMgY3VycmVudCAoRmluYWwgYW5kIERyYWZ0KSBOSVNUSVJzLjxiciAvPg0KICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICA8c3Ryb25nPklUTCBCdWxsZXRpbnM6PC9zdHJvbmc+IEN1cnJlbnQgbGlzdCBvZiBOSVNUIEluZm9ybWF0aW9uIFRlY2hub2xvZ3kgTGFib3JhdG9yeSAoSVRMKSBCdWxsZXRpbnMuDQogICAgICAgIDwvc3Bhbj4NCiAgICAgICAgPHNwYW4gc3R5bGU9ImRpc3BsYXk6IG5vbmU7IiBpZD0ibmlzdC1vdGhlci1wdWJzLXRvb2x0aXAiPg0KICAgICAgICAgICAgPHN0cm9uZz5XaGl0ZSBQYXBlcnM6PC9zdHJvbmc+IDxlbT4NCiAgICAgICAgICAgICAgICBDb25zaXN0cyBvZiBOSVNUIEN5YmVyc2VjdXJpdHkgV2hpdGUgUGFwZXJzOyBOQ0NvRSBQcm9qZWN0IERlc2NyaXB0aW9ucywgQnVpbGRpbmcgQmxvY2tzIGFuZCBVc2UgQ2FzZXM7IGFuZA0KICAgICAgICAgICAgICAgIG90aGVyIE5JU1QtYXV0aG9yZWQgcGFwZXJzIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIGEgZm9ybWFsIHNlcmllcy4NCiAgICAgICAgICAgIDwvZW0+IEluY2x1ZGVzIGN1cnJlbnQgKEZpbmFsIGFuZCBEcmFmdCkgcGFwZXJzLjxiciAvPg0KICAgICAgICAgICAgPGJyIC8+DQogICAgICAgICAgICA8c3Ryb25nPkpvdXJuYWwgQXJ0aWNsZXM6PC9zdHJvbmc+IE5JU1QtYXV0aG9yZWQgYXJ0aWNsZXMgcHVibGlzaGVkIGluIGV4dGVybmFsIGpvdXJuYWxzIGFuZCBpbiB0aGUgTklTVCBKb3VybmFsIG9mIFJlc2VhcmNoIChKUkVTKS48YnIgLz4NCiAgICAgICAgICAgIDxiciAvPg0KICAgICAgICAgICAgPHN0cm9uZz5Db25mZXJlbmNlIFBhcGVyczo8L3N0cm9uZz4gTklTVC1hdXRob3JlZCBjb25mZXJlbmNlIHBhcGVycyByZWxhdGVkIHRvIGN5YmVyc2VjdXJpdHkgYW5kIHByaXZhY3kuPGJyIC8+DQogICAgICAgICAgICA8YnIgLz4NCiAgICAgICAgICAgIDxzdHJvbmc+Qm9va3M6PC9zdHJvbmc+IE5JU1QtYXV0aG9yZWQgYm9va3MsIGJvb2sgc2VjdGlvbnMsIGFuZCBlbmN5Y2xvcGVkaWEgZW50cmllcyByZWxhdGVkIHRvIGN5YmVyc2VjdXJpdHkgYW5kIHByaXZhY3kuDQogICAgICAgIDwvc3Bhbj4NCiAgICA8L2Rpdj4NCg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQogICAgICAgIDxkaXYgaWQ9ImZvb3Rlci1wdXNoZXIiPjwvZGl2Pg0KDQogICAgPC9kaXY+DQoNCiAgICANCg0KICAgIDxmb290ZXIgaWQ9ImZvb3RlciI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTYiPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaGlkZGVuLXhzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5pc3QuZ292IiB0aXRsZT0iTmF0aW9uYWwgSW5zdGl0dXRlIG9mIFN0YW5kYXJkcyBhbmQgVGVjaG5vbG9neSIgcmVsPSJob21lIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImZvb3Rlci1uaXN0LWxvZ28iIGlkPSJmb290ZXItbmlzdC1sb2dvLWxpbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvQ1NSQy9NZWRpYS9pbWFnZXMvbG9nb19yZXYucG5nIiBhbHQ9Ik5hdGlvbmFsIEluc3RpdHV0ZSBvZiBTdGFuZGFyZHMgYW5kIFRlY2hub2xvZ3kgbG9nbyIgaWQ9ImZvb3Rlci1uaXN0LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgZm9vdGVyLWNvbnRhY3QtY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiIgaWQ9ImZvb3Rlci1hZGRyZXNzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPkhFQURRVUFSVEVSUzwvc3Ryb25nPjxicj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDAgQnVyZWF1IERyaXZlPGJyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdhaXRoZXJzYnVyZywgTUQgMjA4OTkNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNiI+DQogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ic29jaWFsLWxpc3QgdGV4dC1yaWdodCIgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLWl0ZW0gc2VydmljZS10d2l0dGVyIGxpc3QtaG9yaXoiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vTklTVEN5YmVyIiBjbGFzcz0ic29jaWFsLWJ0biBzb2NpYWwtYnRuLS1sYXJnZSBleHRsaW5rIGV4dCIgaWQ9ImZvb3Rlci1zb2NpYWwtdHdpdHRlci1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXR3aXR0ZXIgZmEtZnciPjxzcGFuIGNsYXNzPSJlbGVtZW50LWludmlzaWJsZSI+dHdpdHRlcjwvc3Bhbj48L2k+PHNwYW4gY2xhc3M9ImV4dCI+PHNwYW4gY2xhc3M9ImVsZW1lbnQtaW52aXNpYmxlIj4gKGxpbmsgaXMgZXh0ZXJuYWwpPC9zcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJmaWVsZC1pdGVtIHNlcnZpY2UtZmFjZWJvb2sgbGlzdC1ob3JpeiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL05JU1QiIGNsYXNzPSJzb2NpYWwtYnRuIHNvY2lhbC1idG4tLWxhcmdlIGV4dGxpbmsgZXh0IiBpZD0iZm9vdGVyLXNvY2lhbC1mYWNlYm9vay1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWZhY2Vib29rIGZhLWZ3Ij48c3BhbiBjbGFzcz0iZWxlbWVudC1pbnZpc2libGUiPmZhY2Vib29rPC9zcGFuPjwvaT48c3BhbiBjbGFzcz0iZXh0Ij48c3BhbiBjbGFzcz0iZWxlbWVudC1pbnZpc2libGUiPiAobGluayBpcyBleHRlcm5hbCk8L3NwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtaXRlbSBzZXJ2aWNlLWxpbmtlZGluIGxpc3QtaG9yaXoiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9jb21wYW55L25pc3QiIGNsYXNzPSJzb2NpYWwtYnRuIHNvY2lhbC1idG4tLWxhcmdlIGV4dGxpbmsgZXh0IiBpZD0iZm9vdGVyLXNvY2lhbC1saW5rZWRpbi1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWxpbmtlZGluIGZhLWZ3Ij48c3BhbiBjbGFzcz0iZWxlbWVudC1pbnZpc2libGUiPmxpbmtlZGluPC9zcGFuPjwvaT48c3BhbiBjbGFzcz0iZXh0Ij48c3BhbiBjbGFzcz0iZWxlbWVudC1pbnZpc2libGUiPiAobGluayBpcyBleHRlcm5hbCk8L3NwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtaXRlbSBzZXJ2aWNlLWluc3RhZ3JhbSBsaXN0LWhvcml6Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3VzbmlzdGdvdi8iIGNsYXNzPSJzb2NpYWwtYnRuIHNvY2lhbC1idG4tLWxhcmdlIGV4dGxpbmsgZXh0IiBpZD0iZm9vdGVyLXNvY2lhbC1pbnN0YWdyYW0tbGluayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1pbnN0YWdyYW0gZmEtZnciPjxzcGFuIGNsYXNzPSJlbGVtZW50LWludmlzaWJsZSI+aW5zdGFncmFtPC9zcGFuPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImV4dCI+PHNwYW4gY2xhc3M9ImVsZW1lbnQtaW52aXNpYmxlIj4gKGxpbmsgaXMgZXh0ZXJuYWwpPC9zcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLWl0ZW0gc2VydmljZS15b3V0dWJlIGxpc3QtaG9yaXoiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvVVNOSVNUR09WIiBjbGFzcz0ic29jaWFsLWJ0biBzb2NpYWwtYnRuLS1sYXJnZSBleHRsaW5rIGV4dCIgaWQ9ImZvb3Rlci1zb2NpYWwteW91dHViZS1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXlvdXR1YmUgZmEtZnciPjxzcGFuIGNsYXNzPSJlbGVtZW50LWludmlzaWJsZSI+eW91dHViZTwvc3Bhbj48L2k+PHNwYW4gY2xhc3M9ImV4dCI+PHNwYW4gY2xhc3M9ImVsZW1lbnQtaW52aXNpYmxlIj4gKGxpbmsgaXMgZXh0ZXJuYWwpPC9zcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZpZWxkLWl0ZW0gc2VydmljZS1yc3MgbGlzdC1ob3JpeiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmlzdC5nb3YvbmV3cy1ldmVudHMvbmlzdC1yc3MtZmVlZHMiIGNsYXNzPSJzb2NpYWwtYnRuIHNvY2lhbC1idG4tLWxhcmdlIGV4dGxpbmsiIGlkPSJmb290ZXItc29jaWFsLXJzcy1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXJzcyBmYS1mdyI+PHNwYW4gY2xhc3M9ImVsZW1lbnQtaW52aXNpYmxlIj5yc3M8L3NwYW4+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZmllbGQtaXRlbSBzZXJ2aWNlLWdvdmRlbGl2ZXJ5IGxpc3QtaG9yaXogbGFzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWJsaWMuZ292ZGVsaXZlcnkuY29tL2FjY291bnRzL1VTTklTVC9zdWJzY3JpYmVyL25ldz9xc3A9VVNOSVNUXzMiIGNsYXNzPSJzb2NpYWwtYnRuIHNvY2lhbC1idG4tLWxhcmdlIGV4dGxpbmsgZXh0IiB0aXRsZT0iU3Vic2NyaWJlIHRvIENTUkMgYW5kIHB1YmxpY2F0aW9uIHVwZGF0ZXMsIGFuZCBvdGhlciBOSVNUIGN5YmVyc2VjdXJpdHkgbmV3cyIgaWQ9ImZvb3Rlci1zb2NpYWwtZ292ZGVsaXZlcnktbGluayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1lbnZlbG9wZSBmYS1mdyI+PHNwYW4gY2xhc3M9ImVsZW1lbnQtaW52aXNpYmxlIj5nb3ZkZWxpdmVyeTwvc3Bhbj48L2k+PHNwYW4gY2xhc3M9ImV4dCI+PHNwYW4gY2xhc3M9ImVsZW1lbnQtaW52aXNpYmxlIj4gKGxpbmsgaXMgZXh0ZXJuYWwpPC9zcGFuPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1yaWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICBXYW50IHVwZGF0ZXMgYWJvdXQgQ1NSQyBhbmQgb3VyIHB1YmxpY2F0aW9ucz8NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHVibGljLmdvdmRlbGl2ZXJ5LmNvbS9hY2NvdW50cy9VU05JU1Qvc3Vic2NyaWJlci9uZXc/cXNwPVVTTklTVF8zIiBjbGFzcz0iYnRuIGJ0bi1sZyBidG4taW5mbyIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICMxMjY1OWMhaW1wb3J0YW50OyBib3JkZXItY29sb3I6ICMxMjY1OWMhaW1wb3J0YW50OyIgaWQ9ImZvb3Rlci1zdWJzY3JpYmUtbGluayI+U3Vic2NyaWJlPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBoaWRkZW4tc20gaGlkZGVuLW1kIGhpZGRlbi1sZyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmlzdC5nb3YiIHRpdGxlPSJOYXRpb25hbCBJbnN0aXR1dGUgb2YgU3RhbmRhcmRzIGFuZCBUZWNobm9sb2d5IiByZWw9ImhvbWUiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iZm9vdGVyLW5pc3QtbG9nbyIgaWQ9ImZvb3Rlci1ib3R0b20tbmlzdC1sb2dvLWxpbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9DU1JDL01lZGlhL2ltYWdlcy9sb2dvX3Jldi5wbmciIGFsdD0iTmF0aW9uYWwgSW5zdGl0dXRlIG9mIFN0YW5kYXJkcyBhbmQgVGVjaG5vbG9neSBsb2dvIiBpZD0iZm9vdGVyLWJvdHRvbS1uaXN0LWxvZ28iIC8+DQogICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBjb2wtbWQtNiI+DQogICAgICAgICAgICAgICAgICAgIDxwPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0ibWFpbHRvOndlYm1hc3Rlci1jc3JjQG5pc3QuZ292P3N1YmplY3Q9Q1NSQyBJbnF1aXJ5IiBpZD0iZm9vdGVyLXdlYm1hc3Rlci1saW5rIj5XZWJtYXN0ZXI8L2E+IHwNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hYm91dC9jb250YWN0IiBpZD0iZm9vdGVyLWNvbnRhY3QtdXMtbGluayI+Q29udGFjdCBVczwvYT4gfA0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmlzdC5nb3YvYWJvdXQtbmlzdC9vdXItb3JnYW5pemF0aW9uIiBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgaWQ9ImZvb3Rlci1vcmctbGluayI+T3VyIE90aGVyIE9mZmljZXM8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBjb2wtc20tMTIiPg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icHVsbC1yaWdodCB0ZXh0LXJpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3QgQ1NSQyBXZWJtYXN0ZXI6IDxhIGhyZWY9Im1haWx0bzp3ZWJtYXN0ZXItY3NyY0BuaXN0Lmdvdj9zdWJqZWN0PUNTUkMgSW5xdWlyeSIgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiIGlkPSJmb290ZXItaW5mby13ZWJtYXN0ZXItbGluayI+d2VibWFzdGVyLWNzcmNAbmlzdC5nb3Y8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiBmb290ZXItYm90dG9tLWxpbmtzLWNvbnRhaW5lciIgaWQ9ImZvb3Rlci1ib3R0b20tbGlua3MtY29udGFpbmVyIj4NCiAgICAgICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cubmlzdC5nb3YvcHJpdmFjeS1wb2xpY3kiPlByaXZhY3kgU3RhdGVtZW50PC9hPiB8DQogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cubmlzdC5nb3YvcHJpdmFjeS1wb2xpY3kjcHJpdnBvbGljeSI+UHJpdmFjeSBQb2xpY3k8L2E+IHwNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5uaXN0Lmdvdi9wcml2YWN5LXBvbGljeSNzZWNub3QiPlNlY3VyaXR5IE5vdGljZTwvYT4gfA0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lm5pc3QuZ292L3ByaXZhY3ktcG9saWN5I2FjY2Vzc3RhdGUiPkFjY2Vzc2liaWxpdHkgU3RhdGVtZW50PC9hPiB8DQogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cubmlzdC5nb3YvcHJpdmFjeSI+TklTVCBQcml2YWN5IFByb2dyYW08L2E+IHwNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5uaXN0Lmdvdi9uby1mZWFyLWFjdC1wb2xpY3kiPk5vIEZlYXIgQWN0IFBvbGljeTwvYT4gfA0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lm5pc3QuZ292L2Rpc2NsYWltZXIiPkRpc2NsYWltZXI8L2E+IHwNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5uaXN0Lmdvdi9vZmZpY2UtZGlyZWN0b3IvZnJlZWRvbS1pbmZvcm1hdGlvbi1hY3QiPkZPSUE8L2E+IHwNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5uaXN0Lmdvdi9lbnZpcm9ubWVudGFsLXBvbGljeS1zdGF0ZW1lbnQiPkVudmlyb25tZW50YWwgUG9saWN5IFN0YXRlbWVudDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5uaXN0Lmdvdi9wcml2YWN5LXBvbGljeSNjb29raWUiPkNvb2tpZSBEaXNjbGFpbWVyPC9hPiB8DQogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cubmlzdC5nb3Yvc3VtbWFyeS1yZXBvcnQtc2NpZW50aWZpYy1pbnRlZ3JpdHkiPlNjaWVudGlmaWMgSW50ZWdyaXR5IFN1bW1hcnk8L2E+IHwNCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL3d3dy5uaXN0Lmdvdi9uaXN0LWluZm9ybWF0aW9uLXF1YWxpdHktc3RhbmRhcmRzIj5OSVNUIEluZm9ybWF0aW9uIFF1YWxpdHkgU3RhbmRhcmRzPC9hPiB8DQogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuY29tbWVyY2UuZ292LyI+Q29tbWVyY2UuZ292PC9hPiB8DQogICAgICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly93d3cuaGVhbHRoY2FyZS5nb3YvIj5IZWFsdGhjYXJlLmdvdjwvYT4gfA0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHA6Ly93d3cuc2NpZW5jZS5nb3YvIj5TY2llbmNlLmdvdjwvYT4gfA0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHA6Ly93d3cudXNhLmdvdi8iPlVTQS5nb3Y8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Zvb3Rlcj4NCg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9kaXN0L2FwcC5idW5kbGUuanMiPjwvc2NyaXB0Pg0KICAgIDxzY3JpcHQgYXN5bmMgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9kaXN0L21hdGhqYXgvTWF0aEpheC5qcz9jb25maWc9VGVYLUFNU19IVE1MIj48L3NjcmlwdD4NCg0KICAgIA0KDQogICAgPC9ib2R5Pg0KPC9odG1sPg0K
  recorded_at: Thu, 18 Mar 2021 20:34:16 GMT
recorded_with: VCR 6.0.0
